

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Apr 23 17:28:38 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F1789
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	stringtext,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    23                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	inittext,global,class=CODE,delta=2
    26                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	text33,local,class=CODE,merge=1,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	swtext1,local,class=CONST,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	text51,local,class=CODE,merge=1,delta=2
    83                           	psect	text52,local,class=CODE,merge=1,delta=2
    84                           	psect	text53,local,class=CODE,merge=1,delta=2
    85                           	psect	text54,local,class=CODE,merge=1,delta=2
    86                           	psect	text55,local,class=CODE,merge=1,delta=2
    87                           	psect	text56,local,class=CODE,merge=1,delta=2
    88                           	psect	text57,local,class=CODE,merge=1,delta=2
    89                           	psect	text58,local,class=CODE,merge=1,delta=2
    90                           	psect	text59,local,class=CODE,merge=1,delta=2
    91                           	psect	text60,local,class=CODE,merge=1,delta=2
    92                           	psect	text61,local,class=CODE,merge=1,delta=2
    93                           	psect	text62,local,class=CODE,merge=1,delta=2
    94                           	psect	text63,local,class=CODE,merge=1,delta=2
    95                           	psect	text64,local,class=CODE,merge=1,delta=2
    96                           	psect	text65,local,class=CODE,merge=1,delta=2
    97                           	psect	text66,local,class=CODE,merge=1,delta=2
    98                           	psect	text67,local,class=CODE,merge=1,delta=2
    99                           	psect	text68,local,class=CODE,merge=1,delta=2
   100                           	psect	text69,local,class=CODE,merge=1,delta=2
   101                           	psect	text70,local,class=CODE,merge=1,delta=2
   102                           	psect	text71,local,class=CODE,merge=1,delta=2
   103                           	psect	intentry,global,class=CODE,delta=2
   104                           	psect	text73,local,class=CODE,merge=1,delta=2
   105                           	psect	text74,local,class=CODE,merge=1,delta=2
   106                           	psect	text75,local,class=CODE,merge=1,delta=2
   107                           	psect	text76,local,class=CODE,merge=1,delta=2
   108                           	psect	text77,local,class=CODE,merge=1,delta=2
   109                           	psect	text78,local,class=CODE,merge=1,delta=2
   110                           	dabs	1,0x7E,2
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  008F                     	;# 
   145  0090                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0095                     	;# 
   151  0096                     	;# 
   152  0097                     	;# 
   153  0098                     	;# 
   154  0099                     	;# 
   155  009A                     	;# 
   156  009B                     	;# 
   157  009B                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  0110                     	;# 
   167  0111                     	;# 
   168  0112                     	;# 
   169  0113                     	;# 
   170  0114                     	;# 
   171  0115                     	;# 
   172  0116                     	;# 
   173  0117                     	;# 
   174  0118                     	;# 
   175  0119                     	;# 
   176  011A                     	;# 
   177  011B                     	;# 
   178  011C                     	;# 
   179  011D                     	;# 
   180  011D                     	;# 
   181  011D                     	;# 
   182  011E                     	;# 
   183  011F                     	;# 
   184  018C                     	;# 
   185  018D                     	;# 
   186  018E                     	;# 
   187  018F                     	;# 
   188  0190                     	;# 
   189  0191                     	;# 
   190  0191                     	;# 
   191  0192                     	;# 
   192  0193                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0194                     	;# 
   196  0195                     	;# 
   197  0196                     	;# 
   198  0197                     	;# 
   199  0199                     	;# 
   200  0199                     	;# 
   201  0199                     	;# 
   202  019A                     	;# 
   203  019A                     	;# 
   204  019A                     	;# 
   205  019B                     	;# 
   206  019B                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019C                     	;# 
   211  019C                     	;# 
   212  019C                     	;# 
   213  019D                     	;# 
   214  019D                     	;# 
   215  019D                     	;# 
   216  019E                     	;# 
   217  019E                     	;# 
   218  019E                     	;# 
   219  019F                     	;# 
   220  019F                     	;# 
   221  019F                     	;# 
   222  019F                     	;# 
   223  019F                     	;# 
   224  020C                     	;# 
   225  020D                     	;# 
   226  020E                     	;# 
   227  020F                     	;# 
   228  0210                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  028C                     	;# 
   246  028D                     	;# 
   247  028E                     	;# 
   248  028F                     	;# 
   249  0290                     	;# 
   250  0291                     	;# 
   251  0291                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0298                     	;# 
   255  0298                     	;# 
   256  0299                     	;# 
   257  029A                     	;# 
   258  030C                     	;# 
   259  030D                     	;# 
   260  030E                     	;# 
   261  030F                     	;# 
   262  0310                     	;# 
   263  0311                     	;# 
   264  0311                     	;# 
   265  0312                     	;# 
   266  0313                     	;# 
   267  038C                     	;# 
   268  038D                     	;# 
   269  038E                     	;# 
   270  038F                     	;# 
   271  0390                     	;# 
   272  0391                     	;# 
   273  0392                     	;# 
   274  0393                     	;# 
   275  0394                     	;# 
   276  0395                     	;# 
   277  0396                     	;# 
   278  0397                     	;# 
   279  0398                     	;# 
   280  0399                     	;# 
   281  039D                     	;# 
   282  039E                     	;# 
   283  039F                     	;# 
   284  0511                     	;# 
   285  0513                     	;# 
   286  0515                     	;# 
   287  051A                     	;# 
   288  0591                     	;# 
   289  0592                     	;# 
   290  0592                     	;# 
   291  0593                     	;# 
   292  0594                     	;# 
   293  0594                     	;# 
   294  0595                     	;# 
   295  0596                     	;# 
   296  0596                     	;# 
   297  0E91                     	;# 
   298  0E92                     	;# 
   299  0E93                     	;# 
   300  0E94                     	;# 
   301  0E95                     	;# 
   302  0E96                     	;# 
   303  0E97                     	;# 
   304  0E98                     	;# 
   305  0E99                     	;# 
   306  0E9A                     	;# 
   307  0E9B                     	;# 
   308  0E9C                     	;# 
   309  0E9D                     	;# 
   310  0E9E                     	;# 
   311  0E9F                     	;# 
   312  0EA0                     	;# 
   313  0EA1                     	;# 
   314  0EA1                     	;# 
   315  0EA2                     	;# 
   316  0EA3                     	;# 
   317  0EA3                     	;# 
   318  0EA4                     	;# 
   319  0EA5                     	;# 
   320  0EA5                     	;# 
   321  0EA6                     	;# 
   322  0EA7                     	;# 
   323  0EA7                     	;# 
   324  0EA8                     	;# 
   325  0EA9                     	;# 
   326  0EAA                     	;# 
   327  0EAB                     	;# 
   328  0EAC                     	;# 
   329  0EAD                     	;# 
   330  0EAE                     	;# 
   331  0EAF                     	;# 
   332  0EB1                     	;# 
   333  0EB2                     	;# 
   334  0EB3                     	;# 
   335  0EB4                     	;# 
   336  0EB5                     	;# 
   337  0EB6                     	;# 
   338  0EB7                     	;# 
   339  0EB8                     	;# 
   340  0EB9                     	;# 
   341  0EBA                     	;# 
   342  0EBB                     	;# 
   343  0EBC                     	;# 
   344  0EBD                     	;# 
   345  0EBE                     	;# 
   346  0EBF                     	;# 
   347  0EC0                     	;# 
   348  0EC1                     	;# 
   349  0EC1                     	;# 
   350  0EC2                     	;# 
   351  0EC3                     	;# 
   352  0EC3                     	;# 
   353  0EC4                     	;# 
   354  0EC5                     	;# 
   355  0EC5                     	;# 
   356  0EC6                     	;# 
   357  0EC7                     	;# 
   358  0EC7                     	;# 
   359  0EC8                     	;# 
   360  0EC9                     	;# 
   361  0ECA                     	;# 
   362  0ECB                     	;# 
   363  0ECC                     	;# 
   364  0ECD                     	;# 
   365  0ECE                     	;# 
   366  0ECF                     	;# 
   367  0ED1                     	;# 
   368  0ED2                     	;# 
   369  0ED3                     	;# 
   370  0ED4                     	;# 
   371  0ED5                     	;# 
   372  0ED6                     	;# 
   373  0ED7                     	;# 
   374  0ED8                     	;# 
   375  0ED9                     	;# 
   376  0EDA                     	;# 
   377  0EDB                     	;# 
   378  0EDC                     	;# 
   379  0EDD                     	;# 
   380  0EDE                     	;# 
   381  0EDF                     	;# 
   382  0EE0                     	;# 
   383  0EE1                     	;# 
   384  0EE1                     	;# 
   385  0EE2                     	;# 
   386  0EE3                     	;# 
   387  0EE3                     	;# 
   388  0EE4                     	;# 
   389  0EE5                     	;# 
   390  0EE5                     	;# 
   391  0EE6                     	;# 
   392  0EE7                     	;# 
   393  0EE7                     	;# 
   394  0EE8                     	;# 
   395  0EE9                     	;# 
   396  0EEA                     	;# 
   397  0EEB                     	;# 
   398  0EEC                     	;# 
   399  0EED                     	;# 
   400  0EEE                     	;# 
   401  0EEF                     	;# 
   402  0F11                     	;# 
   403  0F12                     	;# 
   404  0F13                     	;# 
   405  0F14                     	;# 
   406  0F15                     	;# 
   407  0F16                     	;# 
   408  0F17                     	;# 
   409  0F18                     	;# 
   410  0F19                     	;# 
   411  0F1A                     	;# 
   412  0F1B                     	;# 
   413  0F1C                     	;# 
   414  0F1D                     	;# 
   415  0F1E                     	;# 
   416  0F1F                     	;# 
   417  0F20                     	;# 
   418  0F21                     	;# 
   419  0F21                     	;# 
   420  0F22                     	;# 
   421  0F23                     	;# 
   422  0F23                     	;# 
   423  0F24                     	;# 
   424  0F25                     	;# 
   425  0F25                     	;# 
   426  0F26                     	;# 
   427  0F27                     	;# 
   428  0F27                     	;# 
   429  0F28                     	;# 
   430  0F29                     	;# 
   431  0F2A                     	;# 
   432  0F2B                     	;# 
   433  0F2C                     	;# 
   434  0F2D                     	;# 
   435  0F2E                     	;# 
   436  0F2F                     	;# 
   437  0FE4                     	;# 
   438  0FE5                     	;# 
   439  0FE6                     	;# 
   440  0FE7                     	;# 
   441  0FE8                     	;# 
   442  0FE9                     	;# 
   443  0FEA                     	;# 
   444  0FEB                     	;# 
   445  0FED                     	;# 
   446  0FEE                     	;# 
   447  0FEF                     	;# 
   448  0000                     	;# 
   449  0001                     	;# 
   450  0002                     	;# 
   451  0003                     	;# 
   452  0004                     	;# 
   453  0005                     	;# 
   454  0006                     	;# 
   455  0007                     	;# 
   456  0008                     	;# 
   457  0009                     	;# 
   458  000A                     	;# 
   459  000B                     	;# 
   460  000C                     	;# 
   461  000D                     	;# 
   462  000E                     	;# 
   463  000F                     	;# 
   464  0010                     	;# 
   465  0011                     	;# 
   466  0012                     	;# 
   467  0013                     	;# 
   468  0014                     	;# 
   469  0015                     	;# 
   470  0016                     	;# 
   471  0016                     	;# 
   472  0017                     	;# 
   473  0018                     	;# 
   474  0019                     	;# 
   475  001A                     	;# 
   476  001B                     	;# 
   477  001C                     	;# 
   478  008C                     	;# 
   479  008D                     	;# 
   480  008E                     	;# 
   481  008F                     	;# 
   482  0090                     	;# 
   483  0091                     	;# 
   484  0092                     	;# 
   485  0093                     	;# 
   486  0094                     	;# 
   487  0095                     	;# 
   488  0096                     	;# 
   489  0097                     	;# 
   490  0098                     	;# 
   491  0099                     	;# 
   492  009A                     	;# 
   493  009B                     	;# 
   494  009B                     	;# 
   495  009C                     	;# 
   496  009D                     	;# 
   497  009E                     	;# 
   498  009F                     	;# 
   499  010C                     	;# 
   500  010D                     	;# 
   501  010E                     	;# 
   502  010F                     	;# 
   503  0110                     	;# 
   504  0111                     	;# 
   505  0112                     	;# 
   506  0113                     	;# 
   507  0114                     	;# 
   508  0115                     	;# 
   509  0116                     	;# 
   510  0117                     	;# 
   511  0118                     	;# 
   512  0119                     	;# 
   513  011A                     	;# 
   514  011B                     	;# 
   515  011C                     	;# 
   516  011D                     	;# 
   517  011D                     	;# 
   518  011D                     	;# 
   519  011E                     	;# 
   520  011F                     	;# 
   521  018C                     	;# 
   522  018D                     	;# 
   523  018E                     	;# 
   524  018F                     	;# 
   525  0190                     	;# 
   526  0191                     	;# 
   527  0191                     	;# 
   528  0192                     	;# 
   529  0193                     	;# 
   530  0193                     	;# 
   531  0193                     	;# 
   532  0194                     	;# 
   533  0195                     	;# 
   534  0196                     	;# 
   535  0197                     	;# 
   536  0199                     	;# 
   537  0199                     	;# 
   538  0199                     	;# 
   539  019A                     	;# 
   540  019A                     	;# 
   541  019A                     	;# 
   542  019B                     	;# 
   543  019B                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019C                     	;# 
   548  019C                     	;# 
   549  019C                     	;# 
   550  019D                     	;# 
   551  019D                     	;# 
   552  019D                     	;# 
   553  019E                     	;# 
   554  019E                     	;# 
   555  019E                     	;# 
   556  019F                     	;# 
   557  019F                     	;# 
   558  019F                     	;# 
   559  019F                     	;# 
   560  019F                     	;# 
   561  020C                     	;# 
   562  020D                     	;# 
   563  020E                     	;# 
   564  020F                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0215                     	;# 
   578  0216                     	;# 
   579  0216                     	;# 
   580  0217                     	;# 
   581  0217                     	;# 
   582  028C                     	;# 
   583  028D                     	;# 
   584  028E                     	;# 
   585  028F                     	;# 
   586  0290                     	;# 
   587  0291                     	;# 
   588  0291                     	;# 
   589  0292                     	;# 
   590  0293                     	;# 
   591  0298                     	;# 
   592  0298                     	;# 
   593  0299                     	;# 
   594  029A                     	;# 
   595  030C                     	;# 
   596  030D                     	;# 
   597  030E                     	;# 
   598  030F                     	;# 
   599  0310                     	;# 
   600  0311                     	;# 
   601  0311                     	;# 
   602  0312                     	;# 
   603  0313                     	;# 
   604  038C                     	;# 
   605  038D                     	;# 
   606  038E                     	;# 
   607  038F                     	;# 
   608  0390                     	;# 
   609  0391                     	;# 
   610  0392                     	;# 
   611  0393                     	;# 
   612  0394                     	;# 
   613  0395                     	;# 
   614  0396                     	;# 
   615  0397                     	;# 
   616  0398                     	;# 
   617  0399                     	;# 
   618  039D                     	;# 
   619  039E                     	;# 
   620  039F                     	;# 
   621  0511                     	;# 
   622  0513                     	;# 
   623  0515                     	;# 
   624  051A                     	;# 
   625  0591                     	;# 
   626  0592                     	;# 
   627  0592                     	;# 
   628  0593                     	;# 
   629  0594                     	;# 
   630  0594                     	;# 
   631  0595                     	;# 
   632  0596                     	;# 
   633  0596                     	;# 
   634  0E91                     	;# 
   635  0E92                     	;# 
   636  0E93                     	;# 
   637  0E94                     	;# 
   638  0E95                     	;# 
   639  0E96                     	;# 
   640  0E97                     	;# 
   641  0E98                     	;# 
   642  0E99                     	;# 
   643  0E9A                     	;# 
   644  0E9B                     	;# 
   645  0E9C                     	;# 
   646  0E9D                     	;# 
   647  0E9E                     	;# 
   648  0E9F                     	;# 
   649  0EA0                     	;# 
   650  0EA1                     	;# 
   651  0EA1                     	;# 
   652  0EA2                     	;# 
   653  0EA3                     	;# 
   654  0EA3                     	;# 
   655  0EA4                     	;# 
   656  0EA5                     	;# 
   657  0EA5                     	;# 
   658  0EA6                     	;# 
   659  0EA7                     	;# 
   660  0EA7                     	;# 
   661  0EA8                     	;# 
   662  0EA9                     	;# 
   663  0EAA                     	;# 
   664  0EAB                     	;# 
   665  0EAC                     	;# 
   666  0EAD                     	;# 
   667  0EAE                     	;# 
   668  0EAF                     	;# 
   669  0EB1                     	;# 
   670  0EB2                     	;# 
   671  0EB3                     	;# 
   672  0EB4                     	;# 
   673  0EB5                     	;# 
   674  0EB6                     	;# 
   675  0EB7                     	;# 
   676  0EB8                     	;# 
   677  0EB9                     	;# 
   678  0EBA                     	;# 
   679  0EBB                     	;# 
   680  0EBC                     	;# 
   681  0EBD                     	;# 
   682  0EBE                     	;# 
   683  0EBF                     	;# 
   684  0EC0                     	;# 
   685  0EC1                     	;# 
   686  0EC1                     	;# 
   687  0EC2                     	;# 
   688  0EC3                     	;# 
   689  0EC3                     	;# 
   690  0EC4                     	;# 
   691  0EC5                     	;# 
   692  0EC5                     	;# 
   693  0EC6                     	;# 
   694  0EC7                     	;# 
   695  0EC7                     	;# 
   696  0EC8                     	;# 
   697  0EC9                     	;# 
   698  0ECA                     	;# 
   699  0ECB                     	;# 
   700  0ECC                     	;# 
   701  0ECD                     	;# 
   702  0ECE                     	;# 
   703  0ECF                     	;# 
   704  0ED1                     	;# 
   705  0ED2                     	;# 
   706  0ED3                     	;# 
   707  0ED4                     	;# 
   708  0ED5                     	;# 
   709  0ED6                     	;# 
   710  0ED7                     	;# 
   711  0ED8                     	;# 
   712  0ED9                     	;# 
   713  0EDA                     	;# 
   714  0EDB                     	;# 
   715  0EDC                     	;# 
   716  0EDD                     	;# 
   717  0EDE                     	;# 
   718  0EDF                     	;# 
   719  0EE0                     	;# 
   720  0EE1                     	;# 
   721  0EE1                     	;# 
   722  0EE2                     	;# 
   723  0EE3                     	;# 
   724  0EE3                     	;# 
   725  0EE4                     	;# 
   726  0EE5                     	;# 
   727  0EE5                     	;# 
   728  0EE6                     	;# 
   729  0EE7                     	;# 
   730  0EE7                     	;# 
   731  0EE8                     	;# 
   732  0EE9                     	;# 
   733  0EEA                     	;# 
   734  0EEB                     	;# 
   735  0EEC                     	;# 
   736  0EED                     	;# 
   737  0EEE                     	;# 
   738  0EEF                     	;# 
   739  0F11                     	;# 
   740  0F12                     	;# 
   741  0F13                     	;# 
   742  0F14                     	;# 
   743  0F15                     	;# 
   744  0F16                     	;# 
   745  0F17                     	;# 
   746  0F18                     	;# 
   747  0F19                     	;# 
   748  0F1A                     	;# 
   749  0F1B                     	;# 
   750  0F1C                     	;# 
   751  0F1D                     	;# 
   752  0F1E                     	;# 
   753  0F1F                     	;# 
   754  0F20                     	;# 
   755  0F21                     	;# 
   756  0F21                     	;# 
   757  0F22                     	;# 
   758  0F23                     	;# 
   759  0F23                     	;# 
   760  0F24                     	;# 
   761  0F25                     	;# 
   762  0F25                     	;# 
   763  0F26                     	;# 
   764  0F27                     	;# 
   765  0F27                     	;# 
   766  0F28                     	;# 
   767  0F29                     	;# 
   768  0F2A                     	;# 
   769  0F2B                     	;# 
   770  0F2C                     	;# 
   771  0F2D                     	;# 
   772  0F2E                     	;# 
   773  0F2F                     	;# 
   774  0FE4                     	;# 
   775  0FE5                     	;# 
   776  0FE6                     	;# 
   777  0FE7                     	;# 
   778  0FE8                     	;# 
   779  0FE9                     	;# 
   780  0FEA                     	;# 
   781  0FEB                     	;# 
   782  0FED                     	;# 
   783  0FEE                     	;# 
   784  0FEF                     	;# 
   785  0000                     	;# 
   786  0001                     	;# 
   787  0002                     	;# 
   788  0003                     	;# 
   789  0004                     	;# 
   790  0005                     	;# 
   791  0006                     	;# 
   792  0007                     	;# 
   793  0008                     	;# 
   794  0009                     	;# 
   795  000A                     	;# 
   796  000B                     	;# 
   797  000C                     	;# 
   798  000D                     	;# 
   799  000E                     	;# 
   800  000F                     	;# 
   801  0010                     	;# 
   802  0011                     	;# 
   803  0012                     	;# 
   804  0013                     	;# 
   805  0014                     	;# 
   806  0015                     	;# 
   807  0016                     	;# 
   808  0016                     	;# 
   809  0017                     	;# 
   810  0018                     	;# 
   811  0019                     	;# 
   812  001A                     	;# 
   813  001B                     	;# 
   814  001C                     	;# 
   815  008C                     	;# 
   816  008D                     	;# 
   817  008E                     	;# 
   818  008F                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0095                     	;# 
   825  0096                     	;# 
   826  0097                     	;# 
   827  0098                     	;# 
   828  0099                     	;# 
   829  009A                     	;# 
   830  009B                     	;# 
   831  009B                     	;# 
   832  009C                     	;# 
   833  009D                     	;# 
   834  009E                     	;# 
   835  009F                     	;# 
   836  010C                     	;# 
   837  010D                     	;# 
   838  010E                     	;# 
   839  010F                     	;# 
   840  0110                     	;# 
   841  0111                     	;# 
   842  0112                     	;# 
   843  0113                     	;# 
   844  0114                     	;# 
   845  0115                     	;# 
   846  0116                     	;# 
   847  0117                     	;# 
   848  0118                     	;# 
   849  0119                     	;# 
   850  011A                     	;# 
   851  011B                     	;# 
   852  011C                     	;# 
   853  011D                     	;# 
   854  011D                     	;# 
   855  011D                     	;# 
   856  011E                     	;# 
   857  011F                     	;# 
   858  018C                     	;# 
   859  018D                     	;# 
   860  018E                     	;# 
   861  018F                     	;# 
   862  0190                     	;# 
   863  0191                     	;# 
   864  0191                     	;# 
   865  0192                     	;# 
   866  0193                     	;# 
   867  0193                     	;# 
   868  0193                     	;# 
   869  0194                     	;# 
   870  0195                     	;# 
   871  0196                     	;# 
   872  0197                     	;# 
   873  0199                     	;# 
   874  0199                     	;# 
   875  0199                     	;# 
   876  019A                     	;# 
   877  019A                     	;# 
   878  019A                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019C                     	;# 
   885  019C                     	;# 
   886  019C                     	;# 
   887  019D                     	;# 
   888  019D                     	;# 
   889  019D                     	;# 
   890  019E                     	;# 
   891  019E                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  019F                     	;# 
   895  019F                     	;# 
   896  019F                     	;# 
   897  019F                     	;# 
   898  020C                     	;# 
   899  020D                     	;# 
   900  020E                     	;# 
   901  020F                     	;# 
   902  0210                     	;# 
   903  0211                     	;# 
   904  0211                     	;# 
   905  0212                     	;# 
   906  0212                     	;# 
   907  0213                     	;# 
   908  0213                     	;# 
   909  0214                     	;# 
   910  0214                     	;# 
   911  0215                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0216                     	;# 
   916  0216                     	;# 
   917  0217                     	;# 
   918  0217                     	;# 
   919  028C                     	;# 
   920  028D                     	;# 
   921  028E                     	;# 
   922  028F                     	;# 
   923  0290                     	;# 
   924  0291                     	;# 
   925  0291                     	;# 
   926  0292                     	;# 
   927  0293                     	;# 
   928  0298                     	;# 
   929  0298                     	;# 
   930  0299                     	;# 
   931  029A                     	;# 
   932  030C                     	;# 
   933  030D                     	;# 
   934  030E                     	;# 
   935  030F                     	;# 
   936  0310                     	;# 
   937  0311                     	;# 
   938  0311                     	;# 
   939  0312                     	;# 
   940  0313                     	;# 
   941  038C                     	;# 
   942  038D                     	;# 
   943  038E                     	;# 
   944  038F                     	;# 
   945  0390                     	;# 
   946  0391                     	;# 
   947  0392                     	;# 
   948  0393                     	;# 
   949  0394                     	;# 
   950  0395                     	;# 
   951  0396                     	;# 
   952  0397                     	;# 
   953  0398                     	;# 
   954  0399                     	;# 
   955  039D                     	;# 
   956  039E                     	;# 
   957  039F                     	;# 
   958  0511                     	;# 
   959  0513                     	;# 
   960  0515                     	;# 
   961  051A                     	;# 
   962  0591                     	;# 
   963  0592                     	;# 
   964  0592                     	;# 
   965  0593                     	;# 
   966  0594                     	;# 
   967  0594                     	;# 
   968  0595                     	;# 
   969  0596                     	;# 
   970  0596                     	;# 
   971  0E91                     	;# 
   972  0E92                     	;# 
   973  0E93                     	;# 
   974  0E94                     	;# 
   975  0E95                     	;# 
   976  0E96                     	;# 
   977  0E97                     	;# 
   978  0E98                     	;# 
   979  0E99                     	;# 
   980  0E9A                     	;# 
   981  0E9B                     	;# 
   982  0E9C                     	;# 
   983  0E9D                     	;# 
   984  0E9E                     	;# 
   985  0E9F                     	;# 
   986  0EA0                     	;# 
   987  0EA1                     	;# 
   988  0EA1                     	;# 
   989  0EA2                     	;# 
   990  0EA3                     	;# 
   991  0EA3                     	;# 
   992  0EA4                     	;# 
   993  0EA5                     	;# 
   994  0EA5                     	;# 
   995  0EA6                     	;# 
   996  0EA7                     	;# 
   997  0EA7                     	;# 
   998  0EA8                     	;# 
   999  0EA9                     	;# 
  1000  0EAA                     	;# 
  1001  0EAB                     	;# 
  1002  0EAC                     	;# 
  1003  0EAD                     	;# 
  1004  0EAE                     	;# 
  1005  0EAF                     	;# 
  1006  0EB1                     	;# 
  1007  0EB2                     	;# 
  1008  0EB3                     	;# 
  1009  0EB4                     	;# 
  1010  0EB5                     	;# 
  1011  0EB6                     	;# 
  1012  0EB7                     	;# 
  1013  0EB8                     	;# 
  1014  0EB9                     	;# 
  1015  0EBA                     	;# 
  1016  0EBB                     	;# 
  1017  0EBC                     	;# 
  1018  0EBD                     	;# 
  1019  0EBE                     	;# 
  1020  0EBF                     	;# 
  1021  0EC0                     	;# 
  1022  0EC1                     	;# 
  1023  0EC1                     	;# 
  1024  0EC2                     	;# 
  1025  0EC3                     	;# 
  1026  0EC3                     	;# 
  1027  0EC4                     	;# 
  1028  0EC5                     	;# 
  1029  0EC5                     	;# 
  1030  0EC6                     	;# 
  1031  0EC7                     	;# 
  1032  0EC7                     	;# 
  1033  0EC8                     	;# 
  1034  0EC9                     	;# 
  1035  0ECA                     	;# 
  1036  0ECB                     	;# 
  1037  0ECC                     	;# 
  1038  0ECD                     	;# 
  1039  0ECE                     	;# 
  1040  0ECF                     	;# 
  1041  0ED1                     	;# 
  1042  0ED2                     	;# 
  1043  0ED3                     	;# 
  1044  0ED4                     	;# 
  1045  0ED5                     	;# 
  1046  0ED6                     	;# 
  1047  0ED7                     	;# 
  1048  0ED8                     	;# 
  1049  0ED9                     	;# 
  1050  0EDA                     	;# 
  1051  0EDB                     	;# 
  1052  0EDC                     	;# 
  1053  0EDD                     	;# 
  1054  0EDE                     	;# 
  1055  0EDF                     	;# 
  1056  0EE0                     	;# 
  1057  0EE1                     	;# 
  1058  0EE1                     	;# 
  1059  0EE2                     	;# 
  1060  0EE3                     	;# 
  1061  0EE3                     	;# 
  1062  0EE4                     	;# 
  1063  0EE5                     	;# 
  1064  0EE5                     	;# 
  1065  0EE6                     	;# 
  1066  0EE7                     	;# 
  1067  0EE7                     	;# 
  1068  0EE8                     	;# 
  1069  0EE9                     	;# 
  1070  0EEA                     	;# 
  1071  0EEB                     	;# 
  1072  0EEC                     	;# 
  1073  0EED                     	;# 
  1074  0EEE                     	;# 
  1075  0EEF                     	;# 
  1076  0F11                     	;# 
  1077  0F12                     	;# 
  1078  0F13                     	;# 
  1079  0F14                     	;# 
  1080  0F15                     	;# 
  1081  0F16                     	;# 
  1082  0F17                     	;# 
  1083  0F18                     	;# 
  1084  0F19                     	;# 
  1085  0F1A                     	;# 
  1086  0F1B                     	;# 
  1087  0F1C                     	;# 
  1088  0F1D                     	;# 
  1089  0F1E                     	;# 
  1090  0F1F                     	;# 
  1091  0F20                     	;# 
  1092  0F21                     	;# 
  1093  0F21                     	;# 
  1094  0F22                     	;# 
  1095  0F23                     	;# 
  1096  0F23                     	;# 
  1097  0F24                     	;# 
  1098  0F25                     	;# 
  1099  0F25                     	;# 
  1100  0F26                     	;# 
  1101  0F27                     	;# 
  1102  0F27                     	;# 
  1103  0F28                     	;# 
  1104  0F29                     	;# 
  1105  0F2A                     	;# 
  1106  0F2B                     	;# 
  1107  0F2C                     	;# 
  1108  0F2D                     	;# 
  1109  0F2E                     	;# 
  1110  0F2F                     	;# 
  1111  0FE4                     	;# 
  1112  0FE5                     	;# 
  1113  0FE6                     	;# 
  1114  0FE7                     	;# 
  1115  0FE8                     	;# 
  1116  0FE9                     	;# 
  1117  0FEA                     	;# 
  1118  0FEB                     	;# 
  1119  0FED                     	;# 
  1120  0FEE                     	;# 
  1121  0FEF                     	;# 
  1122  0000                     	;# 
  1123  0001                     	;# 
  1124  0002                     	;# 
  1125  0003                     	;# 
  1126  0004                     	;# 
  1127  0005                     	;# 
  1128  0006                     	;# 
  1129  0007                     	;# 
  1130  0008                     	;# 
  1131  0009                     	;# 
  1132  000A                     	;# 
  1133  000B                     	;# 
  1134  000C                     	;# 
  1135  000D                     	;# 
  1136  000E                     	;# 
  1137  000F                     	;# 
  1138  0010                     	;# 
  1139  0011                     	;# 
  1140  0012                     	;# 
  1141  0013                     	;# 
  1142  0014                     	;# 
  1143  0015                     	;# 
  1144  0016                     	;# 
  1145  0016                     	;# 
  1146  0017                     	;# 
  1147  0018                     	;# 
  1148  0019                     	;# 
  1149  001A                     	;# 
  1150  001B                     	;# 
  1151  001C                     	;# 
  1152  008C                     	;# 
  1153  008D                     	;# 
  1154  008E                     	;# 
  1155  008F                     	;# 
  1156  0090                     	;# 
  1157  0091                     	;# 
  1158  0092                     	;# 
  1159  0093                     	;# 
  1160  0094                     	;# 
  1161  0095                     	;# 
  1162  0096                     	;# 
  1163  0097                     	;# 
  1164  0098                     	;# 
  1165  0099                     	;# 
  1166  009A                     	;# 
  1167  009B                     	;# 
  1168  009B                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009E                     	;# 
  1172  009F                     	;# 
  1173  010C                     	;# 
  1174  010D                     	;# 
  1175  010E                     	;# 
  1176  010F                     	;# 
  1177  0110                     	;# 
  1178  0111                     	;# 
  1179  0112                     	;# 
  1180  0113                     	;# 
  1181  0114                     	;# 
  1182  0115                     	;# 
  1183  0116                     	;# 
  1184  0117                     	;# 
  1185  0118                     	;# 
  1186  0119                     	;# 
  1187  011A                     	;# 
  1188  011B                     	;# 
  1189  011C                     	;# 
  1190  011D                     	;# 
  1191  011D                     	;# 
  1192  011D                     	;# 
  1193  011E                     	;# 
  1194  011F                     	;# 
  1195  018C                     	;# 
  1196  018D                     	;# 
  1197  018E                     	;# 
  1198  018F                     	;# 
  1199  0190                     	;# 
  1200  0191                     	;# 
  1201  0191                     	;# 
  1202  0192                     	;# 
  1203  0193                     	;# 
  1204  0193                     	;# 
  1205  0193                     	;# 
  1206  0194                     	;# 
  1207  0195                     	;# 
  1208  0196                     	;# 
  1209  0197                     	;# 
  1210  0199                     	;# 
  1211  0199                     	;# 
  1212  0199                     	;# 
  1213  019A                     	;# 
  1214  019A                     	;# 
  1215  019A                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019C                     	;# 
  1222  019C                     	;# 
  1223  019C                     	;# 
  1224  019D                     	;# 
  1225  019D                     	;# 
  1226  019D                     	;# 
  1227  019E                     	;# 
  1228  019E                     	;# 
  1229  019E                     	;# 
  1230  019F                     	;# 
  1231  019F                     	;# 
  1232  019F                     	;# 
  1233  019F                     	;# 
  1234  019F                     	;# 
  1235  020C                     	;# 
  1236  020D                     	;# 
  1237  020E                     	;# 
  1238  020F                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  028C                     	;# 
  1257  028D                     	;# 
  1258  028E                     	;# 
  1259  028F                     	;# 
  1260  0290                     	;# 
  1261  0291                     	;# 
  1262  0291                     	;# 
  1263  0292                     	;# 
  1264  0293                     	;# 
  1265  0298                     	;# 
  1266  0298                     	;# 
  1267  0299                     	;# 
  1268  029A                     	;# 
  1269  030C                     	;# 
  1270  030D                     	;# 
  1271  030E                     	;# 
  1272  030F                     	;# 
  1273  0310                     	;# 
  1274  0311                     	;# 
  1275  0311                     	;# 
  1276  0312                     	;# 
  1277  0313                     	;# 
  1278  038C                     	;# 
  1279  038D                     	;# 
  1280  038E                     	;# 
  1281  038F                     	;# 
  1282  0390                     	;# 
  1283  0391                     	;# 
  1284  0392                     	;# 
  1285  0393                     	;# 
  1286  0394                     	;# 
  1287  0395                     	;# 
  1288  0396                     	;# 
  1289  0397                     	;# 
  1290  0398                     	;# 
  1291  0399                     	;# 
  1292  039D                     	;# 
  1293  039E                     	;# 
  1294  039F                     	;# 
  1295  0511                     	;# 
  1296  0513                     	;# 
  1297  0515                     	;# 
  1298  051A                     	;# 
  1299  0591                     	;# 
  1300  0592                     	;# 
  1301  0592                     	;# 
  1302  0593                     	;# 
  1303  0594                     	;# 
  1304  0594                     	;# 
  1305  0595                     	;# 
  1306  0596                     	;# 
  1307  0596                     	;# 
  1308  0E91                     	;# 
  1309  0E92                     	;# 
  1310  0E93                     	;# 
  1311  0E94                     	;# 
  1312  0E95                     	;# 
  1313  0E96                     	;# 
  1314  0E97                     	;# 
  1315  0E98                     	;# 
  1316  0E99                     	;# 
  1317  0E9A                     	;# 
  1318  0E9B                     	;# 
  1319  0E9C                     	;# 
  1320  0E9D                     	;# 
  1321  0E9E                     	;# 
  1322  0E9F                     	;# 
  1323  0EA0                     	;# 
  1324  0EA1                     	;# 
  1325  0EA1                     	;# 
  1326  0EA2                     	;# 
  1327  0EA3                     	;# 
  1328  0EA3                     	;# 
  1329  0EA4                     	;# 
  1330  0EA5                     	;# 
  1331  0EA5                     	;# 
  1332  0EA6                     	;# 
  1333  0EA7                     	;# 
  1334  0EA7                     	;# 
  1335  0EA8                     	;# 
  1336  0EA9                     	;# 
  1337  0EAA                     	;# 
  1338  0EAB                     	;# 
  1339  0EAC                     	;# 
  1340  0EAD                     	;# 
  1341  0EAE                     	;# 
  1342  0EAF                     	;# 
  1343  0EB1                     	;# 
  1344  0EB2                     	;# 
  1345  0EB3                     	;# 
  1346  0EB4                     	;# 
  1347  0EB5                     	;# 
  1348  0EB6                     	;# 
  1349  0EB7                     	;# 
  1350  0EB8                     	;# 
  1351  0EB9                     	;# 
  1352  0EBA                     	;# 
  1353  0EBB                     	;# 
  1354  0EBC                     	;# 
  1355  0EBD                     	;# 
  1356  0EBE                     	;# 
  1357  0EBF                     	;# 
  1358  0EC0                     	;# 
  1359  0EC1                     	;# 
  1360  0EC1                     	;# 
  1361  0EC2                     	;# 
  1362  0EC3                     	;# 
  1363  0EC3                     	;# 
  1364  0EC4                     	;# 
  1365  0EC5                     	;# 
  1366  0EC5                     	;# 
  1367  0EC6                     	;# 
  1368  0EC7                     	;# 
  1369  0EC7                     	;# 
  1370  0EC8                     	;# 
  1371  0EC9                     	;# 
  1372  0ECA                     	;# 
  1373  0ECB                     	;# 
  1374  0ECC                     	;# 
  1375  0ECD                     	;# 
  1376  0ECE                     	;# 
  1377  0ECF                     	;# 
  1378  0ED1                     	;# 
  1379  0ED2                     	;# 
  1380  0ED3                     	;# 
  1381  0ED4                     	;# 
  1382  0ED5                     	;# 
  1383  0ED6                     	;# 
  1384  0ED7                     	;# 
  1385  0ED8                     	;# 
  1386  0ED9                     	;# 
  1387  0EDA                     	;# 
  1388  0EDB                     	;# 
  1389  0EDC                     	;# 
  1390  0EDD                     	;# 
  1391  0EDE                     	;# 
  1392  0EDF                     	;# 
  1393  0EE0                     	;# 
  1394  0EE1                     	;# 
  1395  0EE1                     	;# 
  1396  0EE2                     	;# 
  1397  0EE3                     	;# 
  1398  0EE3                     	;# 
  1399  0EE4                     	;# 
  1400  0EE5                     	;# 
  1401  0EE5                     	;# 
  1402  0EE6                     	;# 
  1403  0EE7                     	;# 
  1404  0EE7                     	;# 
  1405  0EE8                     	;# 
  1406  0EE9                     	;# 
  1407  0EEA                     	;# 
  1408  0EEB                     	;# 
  1409  0EEC                     	;# 
  1410  0EED                     	;# 
  1411  0EEE                     	;# 
  1412  0EEF                     	;# 
  1413  0F11                     	;# 
  1414  0F12                     	;# 
  1415  0F13                     	;# 
  1416  0F14                     	;# 
  1417  0F15                     	;# 
  1418  0F16                     	;# 
  1419  0F17                     	;# 
  1420  0F18                     	;# 
  1421  0F19                     	;# 
  1422  0F1A                     	;# 
  1423  0F1B                     	;# 
  1424  0F1C                     	;# 
  1425  0F1D                     	;# 
  1426  0F1E                     	;# 
  1427  0F1F                     	;# 
  1428  0F20                     	;# 
  1429  0F21                     	;# 
  1430  0F21                     	;# 
  1431  0F22                     	;# 
  1432  0F23                     	;# 
  1433  0F23                     	;# 
  1434  0F24                     	;# 
  1435  0F25                     	;# 
  1436  0F25                     	;# 
  1437  0F26                     	;# 
  1438  0F27                     	;# 
  1439  0F27                     	;# 
  1440  0F28                     	;# 
  1441  0F29                     	;# 
  1442  0F2A                     	;# 
  1443  0F2B                     	;# 
  1444  0F2C                     	;# 
  1445  0F2D                     	;# 
  1446  0F2E                     	;# 
  1447  0F2F                     	;# 
  1448  0FE4                     	;# 
  1449  0FE5                     	;# 
  1450  0FE6                     	;# 
  1451  0FE7                     	;# 
  1452  0FE8                     	;# 
  1453  0FE9                     	;# 
  1454  0FEA                     	;# 
  1455  0FEB                     	;# 
  1456  0FED                     	;# 
  1457  0FEE                     	;# 
  1458  0FEF                     	;# 
  1459  0000                     	;# 
  1460  0001                     	;# 
  1461  0002                     	;# 
  1462  0003                     	;# 
  1463  0004                     	;# 
  1464  0005                     	;# 
  1465  0006                     	;# 
  1466  0007                     	;# 
  1467  0008                     	;# 
  1468  0009                     	;# 
  1469  000A                     	;# 
  1470  000B                     	;# 
  1471  000C                     	;# 
  1472  000D                     	;# 
  1473  000E                     	;# 
  1474  000F                     	;# 
  1475  0010                     	;# 
  1476  0011                     	;# 
  1477  0012                     	;# 
  1478  0013                     	;# 
  1479  0014                     	;# 
  1480  0015                     	;# 
  1481  0016                     	;# 
  1482  0016                     	;# 
  1483  0017                     	;# 
  1484  0018                     	;# 
  1485  0019                     	;# 
  1486  001A                     	;# 
  1487  001B                     	;# 
  1488  001C                     	;# 
  1489  008C                     	;# 
  1490  008D                     	;# 
  1491  008E                     	;# 
  1492  008F                     	;# 
  1493  0090                     	;# 
  1494  0091                     	;# 
  1495  0092                     	;# 
  1496  0093                     	;# 
  1497  0094                     	;# 
  1498  0095                     	;# 
  1499  0096                     	;# 
  1500  0097                     	;# 
  1501  0098                     	;# 
  1502  0099                     	;# 
  1503  009A                     	;# 
  1504  009B                     	;# 
  1505  009B                     	;# 
  1506  009C                     	;# 
  1507  009D                     	;# 
  1508  009E                     	;# 
  1509  009F                     	;# 
  1510  010C                     	;# 
  1511  010D                     	;# 
  1512  010E                     	;# 
  1513  010F                     	;# 
  1514  0110                     	;# 
  1515  0111                     	;# 
  1516  0112                     	;# 
  1517  0113                     	;# 
  1518  0114                     	;# 
  1519  0115                     	;# 
  1520  0116                     	;# 
  1521  0117                     	;# 
  1522  0118                     	;# 
  1523  0119                     	;# 
  1524  011A                     	;# 
  1525  011B                     	;# 
  1526  011C                     	;# 
  1527  011D                     	;# 
  1528  011D                     	;# 
  1529  011D                     	;# 
  1530  011E                     	;# 
  1531  011F                     	;# 
  1532  018C                     	;# 
  1533  018D                     	;# 
  1534  018E                     	;# 
  1535  018F                     	;# 
  1536  0190                     	;# 
  1537  0191                     	;# 
  1538  0191                     	;# 
  1539  0192                     	;# 
  1540  0193                     	;# 
  1541  0193                     	;# 
  1542  0193                     	;# 
  1543  0194                     	;# 
  1544  0195                     	;# 
  1545  0196                     	;# 
  1546  0197                     	;# 
  1547  0199                     	;# 
  1548  0199                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019A                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019C                     	;# 
  1561  019D                     	;# 
  1562  019D                     	;# 
  1563  019D                     	;# 
  1564  019E                     	;# 
  1565  019E                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  019F                     	;# 
  1569  019F                     	;# 
  1570  019F                     	;# 
  1571  019F                     	;# 
  1572  020C                     	;# 
  1573  020D                     	;# 
  1574  020E                     	;# 
  1575  020F                     	;# 
  1576  0210                     	;# 
  1577  0211                     	;# 
  1578  0211                     	;# 
  1579  0212                     	;# 
  1580  0212                     	;# 
  1581  0213                     	;# 
  1582  0213                     	;# 
  1583  0214                     	;# 
  1584  0214                     	;# 
  1585  0215                     	;# 
  1586  0215                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0216                     	;# 
  1590  0216                     	;# 
  1591  0217                     	;# 
  1592  0217                     	;# 
  1593  028C                     	;# 
  1594  028D                     	;# 
  1595  028E                     	;# 
  1596  028F                     	;# 
  1597  0290                     	;# 
  1598  0291                     	;# 
  1599  0291                     	;# 
  1600  0292                     	;# 
  1601  0293                     	;# 
  1602  0298                     	;# 
  1603  0298                     	;# 
  1604  0299                     	;# 
  1605  029A                     	;# 
  1606  030C                     	;# 
  1607  030D                     	;# 
  1608  030E                     	;# 
  1609  030F                     	;# 
  1610  0310                     	;# 
  1611  0311                     	;# 
  1612  0311                     	;# 
  1613  0312                     	;# 
  1614  0313                     	;# 
  1615  038C                     	;# 
  1616  038D                     	;# 
  1617  038E                     	;# 
  1618  038F                     	;# 
  1619  0390                     	;# 
  1620  0391                     	;# 
  1621  0392                     	;# 
  1622  0393                     	;# 
  1623  0394                     	;# 
  1624  0395                     	;# 
  1625  0396                     	;# 
  1626  0397                     	;# 
  1627  0398                     	;# 
  1628  0399                     	;# 
  1629  039D                     	;# 
  1630  039E                     	;# 
  1631  039F                     	;# 
  1632  0511                     	;# 
  1633  0513                     	;# 
  1634  0515                     	;# 
  1635  051A                     	;# 
  1636  0591                     	;# 
  1637  0592                     	;# 
  1638  0592                     	;# 
  1639  0593                     	;# 
  1640  0594                     	;# 
  1641  0594                     	;# 
  1642  0595                     	;# 
  1643  0596                     	;# 
  1644  0596                     	;# 
  1645  0E91                     	;# 
  1646  0E92                     	;# 
  1647  0E93                     	;# 
  1648  0E94                     	;# 
  1649  0E95                     	;# 
  1650  0E96                     	;# 
  1651  0E97                     	;# 
  1652  0E98                     	;# 
  1653  0E99                     	;# 
  1654  0E9A                     	;# 
  1655  0E9B                     	;# 
  1656  0E9C                     	;# 
  1657  0E9D                     	;# 
  1658  0E9E                     	;# 
  1659  0E9F                     	;# 
  1660  0EA0                     	;# 
  1661  0EA1                     	;# 
  1662  0EA1                     	;# 
  1663  0EA2                     	;# 
  1664  0EA3                     	;# 
  1665  0EA3                     	;# 
  1666  0EA4                     	;# 
  1667  0EA5                     	;# 
  1668  0EA5                     	;# 
  1669  0EA6                     	;# 
  1670  0EA7                     	;# 
  1671  0EA7                     	;# 
  1672  0EA8                     	;# 
  1673  0EA9                     	;# 
  1674  0EAA                     	;# 
  1675  0EAB                     	;# 
  1676  0EAC                     	;# 
  1677  0EAD                     	;# 
  1678  0EAE                     	;# 
  1679  0EAF                     	;# 
  1680  0EB1                     	;# 
  1681  0EB2                     	;# 
  1682  0EB3                     	;# 
  1683  0EB4                     	;# 
  1684  0EB5                     	;# 
  1685  0EB6                     	;# 
  1686  0EB7                     	;# 
  1687  0EB8                     	;# 
  1688  0EB9                     	;# 
  1689  0EBA                     	;# 
  1690  0EBB                     	;# 
  1691  0EBC                     	;# 
  1692  0EBD                     	;# 
  1693  0EBE                     	;# 
  1694  0EBF                     	;# 
  1695  0EC0                     	;# 
  1696  0EC1                     	;# 
  1697  0EC1                     	;# 
  1698  0EC2                     	;# 
  1699  0EC3                     	;# 
  1700  0EC3                     	;# 
  1701  0EC4                     	;# 
  1702  0EC5                     	;# 
  1703  0EC5                     	;# 
  1704  0EC6                     	;# 
  1705  0EC7                     	;# 
  1706  0EC7                     	;# 
  1707  0EC8                     	;# 
  1708  0EC9                     	;# 
  1709  0ECA                     	;# 
  1710  0ECB                     	;# 
  1711  0ECC                     	;# 
  1712  0ECD                     	;# 
  1713  0ECE                     	;# 
  1714  0ECF                     	;# 
  1715  0ED1                     	;# 
  1716  0ED2                     	;# 
  1717  0ED3                     	;# 
  1718  0ED4                     	;# 
  1719  0ED5                     	;# 
  1720  0ED6                     	;# 
  1721  0ED7                     	;# 
  1722  0ED8                     	;# 
  1723  0ED9                     	;# 
  1724  0EDA                     	;# 
  1725  0EDB                     	;# 
  1726  0EDC                     	;# 
  1727  0EDD                     	;# 
  1728  0EDE                     	;# 
  1729  0EDF                     	;# 
  1730  0EE0                     	;# 
  1731  0EE1                     	;# 
  1732  0EE1                     	;# 
  1733  0EE2                     	;# 
  1734  0EE3                     	;# 
  1735  0EE3                     	;# 
  1736  0EE4                     	;# 
  1737  0EE5                     	;# 
  1738  0EE5                     	;# 
  1739  0EE6                     	;# 
  1740  0EE7                     	;# 
  1741  0EE7                     	;# 
  1742  0EE8                     	;# 
  1743  0EE9                     	;# 
  1744  0EEA                     	;# 
  1745  0EEB                     	;# 
  1746  0EEC                     	;# 
  1747  0EED                     	;# 
  1748  0EEE                     	;# 
  1749  0EEF                     	;# 
  1750  0F11                     	;# 
  1751  0F12                     	;# 
  1752  0F13                     	;# 
  1753  0F14                     	;# 
  1754  0F15                     	;# 
  1755  0F16                     	;# 
  1756  0F17                     	;# 
  1757  0F18                     	;# 
  1758  0F19                     	;# 
  1759  0F1A                     	;# 
  1760  0F1B                     	;# 
  1761  0F1C                     	;# 
  1762  0F1D                     	;# 
  1763  0F1E                     	;# 
  1764  0F1F                     	;# 
  1765  0F20                     	;# 
  1766  0F21                     	;# 
  1767  0F21                     	;# 
  1768  0F22                     	;# 
  1769  0F23                     	;# 
  1770  0F23                     	;# 
  1771  0F24                     	;# 
  1772  0F25                     	;# 
  1773  0F25                     	;# 
  1774  0F26                     	;# 
  1775  0F27                     	;# 
  1776  0F27                     	;# 
  1777  0F28                     	;# 
  1778  0F29                     	;# 
  1779  0F2A                     	;# 
  1780  0F2B                     	;# 
  1781  0F2C                     	;# 
  1782  0F2D                     	;# 
  1783  0F2E                     	;# 
  1784  0F2F                     	;# 
  1785  0FE4                     	;# 
  1786  0FE5                     	;# 
  1787  0FE6                     	;# 
  1788  0FE7                     	;# 
  1789  0FE8                     	;# 
  1790  0FE9                     	;# 
  1791  0FEA                     	;# 
  1792  0FEB                     	;# 
  1793  0FED                     	;# 
  1794  0FEE                     	;# 
  1795  0FEF                     	;# 
  1796  0000                     	;# 
  1797  0001                     	;# 
  1798  0002                     	;# 
  1799  0003                     	;# 
  1800  0004                     	;# 
  1801  0005                     	;# 
  1802  0006                     	;# 
  1803  0007                     	;# 
  1804  0008                     	;# 
  1805  0009                     	;# 
  1806  000A                     	;# 
  1807  000B                     	;# 
  1808  000C                     	;# 
  1809  000D                     	;# 
  1810  000E                     	;# 
  1811  000F                     	;# 
  1812  0010                     	;# 
  1813  0011                     	;# 
  1814  0012                     	;# 
  1815  0013                     	;# 
  1816  0014                     	;# 
  1817  0015                     	;# 
  1818  0016                     	;# 
  1819  0016                     	;# 
  1820  0017                     	;# 
  1821  0018                     	;# 
  1822  0019                     	;# 
  1823  001A                     	;# 
  1824  001B                     	;# 
  1825  001C                     	;# 
  1826  008C                     	;# 
  1827  008D                     	;# 
  1828  008E                     	;# 
  1829  008F                     	;# 
  1830  0090                     	;# 
  1831  0091                     	;# 
  1832  0092                     	;# 
  1833  0093                     	;# 
  1834  0094                     	;# 
  1835  0095                     	;# 
  1836  0096                     	;# 
  1837  0097                     	;# 
  1838  0098                     	;# 
  1839  0099                     	;# 
  1840  009A                     	;# 
  1841  009B                     	;# 
  1842  009B                     	;# 
  1843  009C                     	;# 
  1844  009D                     	;# 
  1845  009E                     	;# 
  1846  009F                     	;# 
  1847  010C                     	;# 
  1848  010D                     	;# 
  1849  010E                     	;# 
  1850  010F                     	;# 
  1851  0110                     	;# 
  1852  0111                     	;# 
  1853  0112                     	;# 
  1854  0113                     	;# 
  1855  0114                     	;# 
  1856  0115                     	;# 
  1857  0116                     	;# 
  1858  0117                     	;# 
  1859  0118                     	;# 
  1860  0119                     	;# 
  1861  011A                     	;# 
  1862  011B                     	;# 
  1863  011C                     	;# 
  1864  011D                     	;# 
  1865  011D                     	;# 
  1866  011D                     	;# 
  1867  011E                     	;# 
  1868  011F                     	;# 
  1869  018C                     	;# 
  1870  018D                     	;# 
  1871  018E                     	;# 
  1872  018F                     	;# 
  1873  0190                     	;# 
  1874  0191                     	;# 
  1875  0191                     	;# 
  1876  0192                     	;# 
  1877  0193                     	;# 
  1878  0193                     	;# 
  1879  0193                     	;# 
  1880  0194                     	;# 
  1881  0195                     	;# 
  1882  0196                     	;# 
  1883  0197                     	;# 
  1884  0199                     	;# 
  1885  0199                     	;# 
  1886  0199                     	;# 
  1887  019A                     	;# 
  1888  019A                     	;# 
  1889  019A                     	;# 
  1890  019B                     	;# 
  1891  019B                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019C                     	;# 
  1896  019C                     	;# 
  1897  019C                     	;# 
  1898  019D                     	;# 
  1899  019D                     	;# 
  1900  019D                     	;# 
  1901  019E                     	;# 
  1902  019E                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  019F                     	;# 
  1906  019F                     	;# 
  1907  019F                     	;# 
  1908  019F                     	;# 
  1909  020C                     	;# 
  1910  020D                     	;# 
  1911  020E                     	;# 
  1912  020F                     	;# 
  1913  0210                     	;# 
  1914  0211                     	;# 
  1915  0211                     	;# 
  1916  0212                     	;# 
  1917  0212                     	;# 
  1918  0213                     	;# 
  1919  0213                     	;# 
  1920  0214                     	;# 
  1921  0214                     	;# 
  1922  0215                     	;# 
  1923  0215                     	;# 
  1924  0215                     	;# 
  1925  0215                     	;# 
  1926  0216                     	;# 
  1927  0216                     	;# 
  1928  0217                     	;# 
  1929  0217                     	;# 
  1930  028C                     	;# 
  1931  028D                     	;# 
  1932  028E                     	;# 
  1933  028F                     	;# 
  1934  0290                     	;# 
  1935  0291                     	;# 
  1936  0291                     	;# 
  1937  0292                     	;# 
  1938  0293                     	;# 
  1939  0298                     	;# 
  1940  0298                     	;# 
  1941  0299                     	;# 
  1942  029A                     	;# 
  1943  030C                     	;# 
  1944  030D                     	;# 
  1945  030E                     	;# 
  1946  030F                     	;# 
  1947  0310                     	;# 
  1948  0311                     	;# 
  1949  0311                     	;# 
  1950  0312                     	;# 
  1951  0313                     	;# 
  1952  038C                     	;# 
  1953  038D                     	;# 
  1954  038E                     	;# 
  1955  038F                     	;# 
  1956  0390                     	;# 
  1957  0391                     	;# 
  1958  0392                     	;# 
  1959  0393                     	;# 
  1960  0394                     	;# 
  1961  0395                     	;# 
  1962  0396                     	;# 
  1963  0397                     	;# 
  1964  0398                     	;# 
  1965  0399                     	;# 
  1966  039D                     	;# 
  1967  039E                     	;# 
  1968  039F                     	;# 
  1969  0511                     	;# 
  1970  0513                     	;# 
  1971  0515                     	;# 
  1972  051A                     	;# 
  1973  0591                     	;# 
  1974  0592                     	;# 
  1975  0592                     	;# 
  1976  0593                     	;# 
  1977  0594                     	;# 
  1978  0594                     	;# 
  1979  0595                     	;# 
  1980  0596                     	;# 
  1981  0596                     	;# 
  1982  0E91                     	;# 
  1983  0E92                     	;# 
  1984  0E93                     	;# 
  1985  0E94                     	;# 
  1986  0E95                     	;# 
  1987  0E96                     	;# 
  1988  0E97                     	;# 
  1989  0E98                     	;# 
  1990  0E99                     	;# 
  1991  0E9A                     	;# 
  1992  0E9B                     	;# 
  1993  0E9C                     	;# 
  1994  0E9D                     	;# 
  1995  0E9E                     	;# 
  1996  0E9F                     	;# 
  1997  0EA0                     	;# 
  1998  0EA1                     	;# 
  1999  0EA1                     	;# 
  2000  0EA2                     	;# 
  2001  0EA3                     	;# 
  2002  0EA3                     	;# 
  2003  0EA4                     	;# 
  2004  0EA5                     	;# 
  2005  0EA5                     	;# 
  2006  0EA6                     	;# 
  2007  0EA7                     	;# 
  2008  0EA7                     	;# 
  2009  0EA8                     	;# 
  2010  0EA9                     	;# 
  2011  0EAA                     	;# 
  2012  0EAB                     	;# 
  2013  0EAC                     	;# 
  2014  0EAD                     	;# 
  2015  0EAE                     	;# 
  2016  0EAF                     	;# 
  2017  0EB1                     	;# 
  2018  0EB2                     	;# 
  2019  0EB3                     	;# 
  2020  0EB4                     	;# 
  2021  0EB5                     	;# 
  2022  0EB6                     	;# 
  2023  0EB7                     	;# 
  2024  0EB8                     	;# 
  2025  0EB9                     	;# 
  2026  0EBA                     	;# 
  2027  0EBB                     	;# 
  2028  0EBC                     	;# 
  2029  0EBD                     	;# 
  2030  0EBE                     	;# 
  2031  0EBF                     	;# 
  2032  0EC0                     	;# 
  2033  0EC1                     	;# 
  2034  0EC1                     	;# 
  2035  0EC2                     	;# 
  2036  0EC3                     	;# 
  2037  0EC3                     	;# 
  2038  0EC4                     	;# 
  2039  0EC5                     	;# 
  2040  0EC5                     	;# 
  2041  0EC6                     	;# 
  2042  0EC7                     	;# 
  2043  0EC7                     	;# 
  2044  0EC8                     	;# 
  2045  0EC9                     	;# 
  2046  0ECA                     	;# 
  2047  0ECB                     	;# 
  2048  0ECC                     	;# 
  2049  0ECD                     	;# 
  2050  0ECE                     	;# 
  2051  0ECF                     	;# 
  2052  0ED1                     	;# 
  2053  0ED2                     	;# 
  2054  0ED3                     	;# 
  2055  0ED4                     	;# 
  2056  0ED5                     	;# 
  2057  0ED6                     	;# 
  2058  0ED7                     	;# 
  2059  0ED8                     	;# 
  2060  0ED9                     	;# 
  2061  0EDA                     	;# 
  2062  0EDB                     	;# 
  2063  0EDC                     	;# 
  2064  0EDD                     	;# 
  2065  0EDE                     	;# 
  2066  0EDF                     	;# 
  2067  0EE0                     	;# 
  2068  0EE1                     	;# 
  2069  0EE1                     	;# 
  2070  0EE2                     	;# 
  2071  0EE3                     	;# 
  2072  0EE3                     	;# 
  2073  0EE4                     	;# 
  2074  0EE5                     	;# 
  2075  0EE5                     	;# 
  2076  0EE6                     	;# 
  2077  0EE7                     	;# 
  2078  0EE7                     	;# 
  2079  0EE8                     	;# 
  2080  0EE9                     	;# 
  2081  0EEA                     	;# 
  2082  0EEB                     	;# 
  2083  0EEC                     	;# 
  2084  0EED                     	;# 
  2085  0EEE                     	;# 
  2086  0EEF                     	;# 
  2087  0F11                     	;# 
  2088  0F12                     	;# 
  2089  0F13                     	;# 
  2090  0F14                     	;# 
  2091  0F15                     	;# 
  2092  0F16                     	;# 
  2093  0F17                     	;# 
  2094  0F18                     	;# 
  2095  0F19                     	;# 
  2096  0F1A                     	;# 
  2097  0F1B                     	;# 
  2098  0F1C                     	;# 
  2099  0F1D                     	;# 
  2100  0F1E                     	;# 
  2101  0F1F                     	;# 
  2102  0F20                     	;# 
  2103  0F21                     	;# 
  2104  0F21                     	;# 
  2105  0F22                     	;# 
  2106  0F23                     	;# 
  2107  0F23                     	;# 
  2108  0F24                     	;# 
  2109  0F25                     	;# 
  2110  0F25                     	;# 
  2111  0F26                     	;# 
  2112  0F27                     	;# 
  2113  0F27                     	;# 
  2114  0F28                     	;# 
  2115  0F29                     	;# 
  2116  0F2A                     	;# 
  2117  0F2B                     	;# 
  2118  0F2C                     	;# 
  2119  0F2D                     	;# 
  2120  0F2E                     	;# 
  2121  0F2F                     	;# 
  2122  0FE4                     	;# 
  2123  0FE5                     	;# 
  2124  0FE6                     	;# 
  2125  0FE7                     	;# 
  2126  0FE8                     	;# 
  2127  0FE9                     	;# 
  2128  0FEA                     	;# 
  2129  0FEB                     	;# 
  2130  0FED                     	;# 
  2131  0FEE                     	;# 
  2132  0FEF                     	;# 
  2133  0000                     	;# 
  2134  0001                     	;# 
  2135  0002                     	;# 
  2136  0003                     	;# 
  2137  0004                     	;# 
  2138  0005                     	;# 
  2139  0006                     	;# 
  2140  0007                     	;# 
  2141  0008                     	;# 
  2142  0009                     	;# 
  2143  000A                     	;# 
  2144  000B                     	;# 
  2145  000C                     	;# 
  2146  000D                     	;# 
  2147  000E                     	;# 
  2148  000F                     	;# 
  2149  0010                     	;# 
  2150  0011                     	;# 
  2151  0012                     	;# 
  2152  0013                     	;# 
  2153  0014                     	;# 
  2154  0015                     	;# 
  2155  0016                     	;# 
  2156  0016                     	;# 
  2157  0017                     	;# 
  2158  0018                     	;# 
  2159  0019                     	;# 
  2160  001A                     	;# 
  2161  001B                     	;# 
  2162  001C                     	;# 
  2163  008C                     	;# 
  2164  008D                     	;# 
  2165  008E                     	;# 
  2166  008F                     	;# 
  2167  0090                     	;# 
  2168  0091                     	;# 
  2169  0092                     	;# 
  2170  0093                     	;# 
  2171  0094                     	;# 
  2172  0095                     	;# 
  2173  0096                     	;# 
  2174  0097                     	;# 
  2175  0098                     	;# 
  2176  0099                     	;# 
  2177  009A                     	;# 
  2178  009B                     	;# 
  2179  009B                     	;# 
  2180  009C                     	;# 
  2181  009D                     	;# 
  2182  009E                     	;# 
  2183  009F                     	;# 
  2184  010C                     	;# 
  2185  010D                     	;# 
  2186  010E                     	;# 
  2187  010F                     	;# 
  2188  0110                     	;# 
  2189  0111                     	;# 
  2190  0112                     	;# 
  2191  0113                     	;# 
  2192  0114                     	;# 
  2193  0115                     	;# 
  2194  0116                     	;# 
  2195  0117                     	;# 
  2196  0118                     	;# 
  2197  0119                     	;# 
  2198  011A                     	;# 
  2199  011B                     	;# 
  2200  011C                     	;# 
  2201  011D                     	;# 
  2202  011D                     	;# 
  2203  011D                     	;# 
  2204  011E                     	;# 
  2205  011F                     	;# 
  2206  018C                     	;# 
  2207  018D                     	;# 
  2208  018E                     	;# 
  2209  018F                     	;# 
  2210  0190                     	;# 
  2211  0191                     	;# 
  2212  0191                     	;# 
  2213  0192                     	;# 
  2214  0193                     	;# 
  2215  0193                     	;# 
  2216  0193                     	;# 
  2217  0194                     	;# 
  2218  0195                     	;# 
  2219  0196                     	;# 
  2220  0197                     	;# 
  2221  0199                     	;# 
  2222  0199                     	;# 
  2223  0199                     	;# 
  2224  019A                     	;# 
  2225  019A                     	;# 
  2226  019A                     	;# 
  2227  019B                     	;# 
  2228  019B                     	;# 
  2229  019B                     	;# 
  2230  019B                     	;# 
  2231  019B                     	;# 
  2232  019C                     	;# 
  2233  019C                     	;# 
  2234  019C                     	;# 
  2235  019D                     	;# 
  2236  019D                     	;# 
  2237  019D                     	;# 
  2238  019E                     	;# 
  2239  019E                     	;# 
  2240  019E                     	;# 
  2241  019F                     	;# 
  2242  019F                     	;# 
  2243  019F                     	;# 
  2244  019F                     	;# 
  2245  019F                     	;# 
  2246  020C                     	;# 
  2247  020D                     	;# 
  2248  020E                     	;# 
  2249  020F                     	;# 
  2250  0210                     	;# 
  2251  0211                     	;# 
  2252  0211                     	;# 
  2253  0212                     	;# 
  2254  0212                     	;# 
  2255  0213                     	;# 
  2256  0213                     	;# 
  2257  0214                     	;# 
  2258  0214                     	;# 
  2259  0215                     	;# 
  2260  0215                     	;# 
  2261  0215                     	;# 
  2262  0215                     	;# 
  2263  0216                     	;# 
  2264  0216                     	;# 
  2265  0217                     	;# 
  2266  0217                     	;# 
  2267  028C                     	;# 
  2268  028D                     	;# 
  2269  028E                     	;# 
  2270  028F                     	;# 
  2271  0290                     	;# 
  2272  0291                     	;# 
  2273  0291                     	;# 
  2274  0292                     	;# 
  2275  0293                     	;# 
  2276  0298                     	;# 
  2277  0298                     	;# 
  2278  0299                     	;# 
  2279  029A                     	;# 
  2280  030C                     	;# 
  2281  030D                     	;# 
  2282  030E                     	;# 
  2283  030F                     	;# 
  2284  0310                     	;# 
  2285  0311                     	;# 
  2286  0311                     	;# 
  2287  0312                     	;# 
  2288  0313                     	;# 
  2289  038C                     	;# 
  2290  038D                     	;# 
  2291  038E                     	;# 
  2292  038F                     	;# 
  2293  0390                     	;# 
  2294  0391                     	;# 
  2295  0392                     	;# 
  2296  0393                     	;# 
  2297  0394                     	;# 
  2298  0395                     	;# 
  2299  0396                     	;# 
  2300  0397                     	;# 
  2301  0398                     	;# 
  2302  0399                     	;# 
  2303  039D                     	;# 
  2304  039E                     	;# 
  2305  039F                     	;# 
  2306  0511                     	;# 
  2307  0513                     	;# 
  2308  0515                     	;# 
  2309  051A                     	;# 
  2310  0591                     	;# 
  2311  0592                     	;# 
  2312  0592                     	;# 
  2313  0593                     	;# 
  2314  0594                     	;# 
  2315  0594                     	;# 
  2316  0595                     	;# 
  2317  0596                     	;# 
  2318  0596                     	;# 
  2319  0E91                     	;# 
  2320  0E92                     	;# 
  2321  0E93                     	;# 
  2322  0E94                     	;# 
  2323  0E95                     	;# 
  2324  0E96                     	;# 
  2325  0E97                     	;# 
  2326  0E98                     	;# 
  2327  0E99                     	;# 
  2328  0E9A                     	;# 
  2329  0E9B                     	;# 
  2330  0E9C                     	;# 
  2331  0E9D                     	;# 
  2332  0E9E                     	;# 
  2333  0E9F                     	;# 
  2334  0EA0                     	;# 
  2335  0EA1                     	;# 
  2336  0EA1                     	;# 
  2337  0EA2                     	;# 
  2338  0EA3                     	;# 
  2339  0EA3                     	;# 
  2340  0EA4                     	;# 
  2341  0EA5                     	;# 
  2342  0EA5                     	;# 
  2343  0EA6                     	;# 
  2344  0EA7                     	;# 
  2345  0EA7                     	;# 
  2346  0EA8                     	;# 
  2347  0EA9                     	;# 
  2348  0EAA                     	;# 
  2349  0EAB                     	;# 
  2350  0EAC                     	;# 
  2351  0EAD                     	;# 
  2352  0EAE                     	;# 
  2353  0EAF                     	;# 
  2354  0EB1                     	;# 
  2355  0EB2                     	;# 
  2356  0EB3                     	;# 
  2357  0EB4                     	;# 
  2358  0EB5                     	;# 
  2359  0EB6                     	;# 
  2360  0EB7                     	;# 
  2361  0EB8                     	;# 
  2362  0EB9                     	;# 
  2363  0EBA                     	;# 
  2364  0EBB                     	;# 
  2365  0EBC                     	;# 
  2366  0EBD                     	;# 
  2367  0EBE                     	;# 
  2368  0EBF                     	;# 
  2369  0EC0                     	;# 
  2370  0EC1                     	;# 
  2371  0EC1                     	;# 
  2372  0EC2                     	;# 
  2373  0EC3                     	;# 
  2374  0EC3                     	;# 
  2375  0EC4                     	;# 
  2376  0EC5                     	;# 
  2377  0EC5                     	;# 
  2378  0EC6                     	;# 
  2379  0EC7                     	;# 
  2380  0EC7                     	;# 
  2381  0EC8                     	;# 
  2382  0EC9                     	;# 
  2383  0ECA                     	;# 
  2384  0ECB                     	;# 
  2385  0ECC                     	;# 
  2386  0ECD                     	;# 
  2387  0ECE                     	;# 
  2388  0ECF                     	;# 
  2389  0ED1                     	;# 
  2390  0ED2                     	;# 
  2391  0ED3                     	;# 
  2392  0ED4                     	;# 
  2393  0ED5                     	;# 
  2394  0ED6                     	;# 
  2395  0ED7                     	;# 
  2396  0ED8                     	;# 
  2397  0ED9                     	;# 
  2398  0EDA                     	;# 
  2399  0EDB                     	;# 
  2400  0EDC                     	;# 
  2401  0EDD                     	;# 
  2402  0EDE                     	;# 
  2403  0EDF                     	;# 
  2404  0EE0                     	;# 
  2405  0EE1                     	;# 
  2406  0EE1                     	;# 
  2407  0EE2                     	;# 
  2408  0EE3                     	;# 
  2409  0EE3                     	;# 
  2410  0EE4                     	;# 
  2411  0EE5                     	;# 
  2412  0EE5                     	;# 
  2413  0EE6                     	;# 
  2414  0EE7                     	;# 
  2415  0EE7                     	;# 
  2416  0EE8                     	;# 
  2417  0EE9                     	;# 
  2418  0EEA                     	;# 
  2419  0EEB                     	;# 
  2420  0EEC                     	;# 
  2421  0EED                     	;# 
  2422  0EEE                     	;# 
  2423  0EEF                     	;# 
  2424  0F11                     	;# 
  2425  0F12                     	;# 
  2426  0F13                     	;# 
  2427  0F14                     	;# 
  2428  0F15                     	;# 
  2429  0F16                     	;# 
  2430  0F17                     	;# 
  2431  0F18                     	;# 
  2432  0F19                     	;# 
  2433  0F1A                     	;# 
  2434  0F1B                     	;# 
  2435  0F1C                     	;# 
  2436  0F1D                     	;# 
  2437  0F1E                     	;# 
  2438  0F1F                     	;# 
  2439  0F20                     	;# 
  2440  0F21                     	;# 
  2441  0F21                     	;# 
  2442  0F22                     	;# 
  2443  0F23                     	;# 
  2444  0F23                     	;# 
  2445  0F24                     	;# 
  2446  0F25                     	;# 
  2447  0F25                     	;# 
  2448  0F26                     	;# 
  2449  0F27                     	;# 
  2450  0F27                     	;# 
  2451  0F28                     	;# 
  2452  0F29                     	;# 
  2453  0F2A                     	;# 
  2454  0F2B                     	;# 
  2455  0F2C                     	;# 
  2456  0F2D                     	;# 
  2457  0F2E                     	;# 
  2458  0F2F                     	;# 
  2459  0FE4                     	;# 
  2460  0FE5                     	;# 
  2461  0FE6                     	;# 
  2462  0FE7                     	;# 
  2463  0FE8                     	;# 
  2464  0FE9                     	;# 
  2465  0FEA                     	;# 
  2466  0FEB                     	;# 
  2467  0FED                     	;# 
  2468  0FEE                     	;# 
  2469  0FEF                     	;# 
  2470  0000                     	;# 
  2471  0001                     	;# 
  2472  0002                     	;# 
  2473  0003                     	;# 
  2474  0004                     	;# 
  2475  0005                     	;# 
  2476  0006                     	;# 
  2477  0007                     	;# 
  2478  0008                     	;# 
  2479  0009                     	;# 
  2480  000A                     	;# 
  2481  000B                     	;# 
  2482  000C                     	;# 
  2483  000D                     	;# 
  2484  000E                     	;# 
  2485  000F                     	;# 
  2486  0010                     	;# 
  2487  0011                     	;# 
  2488  0012                     	;# 
  2489  0013                     	;# 
  2490  0014                     	;# 
  2491  0015                     	;# 
  2492  0016                     	;# 
  2493  0016                     	;# 
  2494  0017                     	;# 
  2495  0018                     	;# 
  2496  0019                     	;# 
  2497  001A                     	;# 
  2498  001B                     	;# 
  2499  001C                     	;# 
  2500  008C                     	;# 
  2501  008D                     	;# 
  2502  008E                     	;# 
  2503  008F                     	;# 
  2504  0090                     	;# 
  2505  0091                     	;# 
  2506  0092                     	;# 
  2507  0093                     	;# 
  2508  0094                     	;# 
  2509  0095                     	;# 
  2510  0096                     	;# 
  2511  0097                     	;# 
  2512  0098                     	;# 
  2513  0099                     	;# 
  2514  009A                     	;# 
  2515  009B                     	;# 
  2516  009B                     	;# 
  2517  009C                     	;# 
  2518  009D                     	;# 
  2519  009E                     	;# 
  2520  009F                     	;# 
  2521  010C                     	;# 
  2522  010D                     	;# 
  2523  010E                     	;# 
  2524  010F                     	;# 
  2525  0110                     	;# 
  2526  0111                     	;# 
  2527  0112                     	;# 
  2528  0113                     	;# 
  2529  0114                     	;# 
  2530  0115                     	;# 
  2531  0116                     	;# 
  2532  0117                     	;# 
  2533  0118                     	;# 
  2534  0119                     	;# 
  2535  011A                     	;# 
  2536  011B                     	;# 
  2537  011C                     	;# 
  2538  011D                     	;# 
  2539  011D                     	;# 
  2540  011D                     	;# 
  2541  011E                     	;# 
  2542  011F                     	;# 
  2543  018C                     	;# 
  2544  018D                     	;# 
  2545  018E                     	;# 
  2546  018F                     	;# 
  2547  0190                     	;# 
  2548  0191                     	;# 
  2549  0191                     	;# 
  2550  0192                     	;# 
  2551  0193                     	;# 
  2552  0193                     	;# 
  2553  0193                     	;# 
  2554  0194                     	;# 
  2555  0195                     	;# 
  2556  0196                     	;# 
  2557  0197                     	;# 
  2558  0199                     	;# 
  2559  0199                     	;# 
  2560  0199                     	;# 
  2561  019A                     	;# 
  2562  019A                     	;# 
  2563  019A                     	;# 
  2564  019B                     	;# 
  2565  019B                     	;# 
  2566  019B                     	;# 
  2567  019B                     	;# 
  2568  019B                     	;# 
  2569  019C                     	;# 
  2570  019C                     	;# 
  2571  019C                     	;# 
  2572  019D                     	;# 
  2573  019D                     	;# 
  2574  019D                     	;# 
  2575  019E                     	;# 
  2576  019E                     	;# 
  2577  019E                     	;# 
  2578  019F                     	;# 
  2579  019F                     	;# 
  2580  019F                     	;# 
  2581  019F                     	;# 
  2582  019F                     	;# 
  2583  020C                     	;# 
  2584  020D                     	;# 
  2585  020E                     	;# 
  2586  020F                     	;# 
  2587  0210                     	;# 
  2588  0211                     	;# 
  2589  0211                     	;# 
  2590  0212                     	;# 
  2591  0212                     	;# 
  2592  0213                     	;# 
  2593  0213                     	;# 
  2594  0214                     	;# 
  2595  0214                     	;# 
  2596  0215                     	;# 
  2597  0215                     	;# 
  2598  0215                     	;# 
  2599  0215                     	;# 
  2600  0216                     	;# 
  2601  0216                     	;# 
  2602  0217                     	;# 
  2603  0217                     	;# 
  2604  028C                     	;# 
  2605  028D                     	;# 
  2606  028E                     	;# 
  2607  028F                     	;# 
  2608  0290                     	;# 
  2609  0291                     	;# 
  2610  0291                     	;# 
  2611  0292                     	;# 
  2612  0293                     	;# 
  2613  0298                     	;# 
  2614  0298                     	;# 
  2615  0299                     	;# 
  2616  029A                     	;# 
  2617  030C                     	;# 
  2618  030D                     	;# 
  2619  030E                     	;# 
  2620  030F                     	;# 
  2621  0310                     	;# 
  2622  0311                     	;# 
  2623  0311                     	;# 
  2624  0312                     	;# 
  2625  0313                     	;# 
  2626  038C                     	;# 
  2627  038D                     	;# 
  2628  038E                     	;# 
  2629  038F                     	;# 
  2630  0390                     	;# 
  2631  0391                     	;# 
  2632  0392                     	;# 
  2633  0393                     	;# 
  2634  0394                     	;# 
  2635  0395                     	;# 
  2636  0396                     	;# 
  2637  0397                     	;# 
  2638  0398                     	;# 
  2639  0399                     	;# 
  2640  039D                     	;# 
  2641  039E                     	;# 
  2642  039F                     	;# 
  2643  0511                     	;# 
  2644  0513                     	;# 
  2645  0515                     	;# 
  2646  051A                     	;# 
  2647  0591                     	;# 
  2648  0592                     	;# 
  2649  0592                     	;# 
  2650  0593                     	;# 
  2651  0594                     	;# 
  2652  0594                     	;# 
  2653  0595                     	;# 
  2654  0596                     	;# 
  2655  0596                     	;# 
  2656  0E91                     	;# 
  2657  0E92                     	;# 
  2658  0E93                     	;# 
  2659  0E94                     	;# 
  2660  0E95                     	;# 
  2661  0E96                     	;# 
  2662  0E97                     	;# 
  2663  0E98                     	;# 
  2664  0E99                     	;# 
  2665  0E9A                     	;# 
  2666  0E9B                     	;# 
  2667  0E9C                     	;# 
  2668  0E9D                     	;# 
  2669  0E9E                     	;# 
  2670  0E9F                     	;# 
  2671  0EA0                     	;# 
  2672  0EA1                     	;# 
  2673  0EA1                     	;# 
  2674  0EA2                     	;# 
  2675  0EA3                     	;# 
  2676  0EA3                     	;# 
  2677  0EA4                     	;# 
  2678  0EA5                     	;# 
  2679  0EA5                     	;# 
  2680  0EA6                     	;# 
  2681  0EA7                     	;# 
  2682  0EA7                     	;# 
  2683  0EA8                     	;# 
  2684  0EA9                     	;# 
  2685  0EAA                     	;# 
  2686  0EAB                     	;# 
  2687  0EAC                     	;# 
  2688  0EAD                     	;# 
  2689  0EAE                     	;# 
  2690  0EAF                     	;# 
  2691  0EB1                     	;# 
  2692  0EB2                     	;# 
  2693  0EB3                     	;# 
  2694  0EB4                     	;# 
  2695  0EB5                     	;# 
  2696  0EB6                     	;# 
  2697  0EB7                     	;# 
  2698  0EB8                     	;# 
  2699  0EB9                     	;# 
  2700  0EBA                     	;# 
  2701  0EBB                     	;# 
  2702  0EBC                     	;# 
  2703  0EBD                     	;# 
  2704  0EBE                     	;# 
  2705  0EBF                     	;# 
  2706  0EC0                     	;# 
  2707  0EC1                     	;# 
  2708  0EC1                     	;# 
  2709  0EC2                     	;# 
  2710  0EC3                     	;# 
  2711  0EC3                     	;# 
  2712  0EC4                     	;# 
  2713  0EC5                     	;# 
  2714  0EC5                     	;# 
  2715  0EC6                     	;# 
  2716  0EC7                     	;# 
  2717  0EC7                     	;# 
  2718  0EC8                     	;# 
  2719  0EC9                     	;# 
  2720  0ECA                     	;# 
  2721  0ECB                     	;# 
  2722  0ECC                     	;# 
  2723  0ECD                     	;# 
  2724  0ECE                     	;# 
  2725  0ECF                     	;# 
  2726  0ED1                     	;# 
  2727  0ED2                     	;# 
  2728  0ED3                     	;# 
  2729  0ED4                     	;# 
  2730  0ED5                     	;# 
  2731  0ED6                     	;# 
  2732  0ED7                     	;# 
  2733  0ED8                     	;# 
  2734  0ED9                     	;# 
  2735  0EDA                     	;# 
  2736  0EDB                     	;# 
  2737  0EDC                     	;# 
  2738  0EDD                     	;# 
  2739  0EDE                     	;# 
  2740  0EDF                     	;# 
  2741  0EE0                     	;# 
  2742  0EE1                     	;# 
  2743  0EE1                     	;# 
  2744  0EE2                     	;# 
  2745  0EE3                     	;# 
  2746  0EE3                     	;# 
  2747  0EE4                     	;# 
  2748  0EE5                     	;# 
  2749  0EE5                     	;# 
  2750  0EE6                     	;# 
  2751  0EE7                     	;# 
  2752  0EE7                     	;# 
  2753  0EE8                     	;# 
  2754  0EE9                     	;# 
  2755  0EEA                     	;# 
  2756  0EEB                     	;# 
  2757  0EEC                     	;# 
  2758  0EED                     	;# 
  2759  0EEE                     	;# 
  2760  0EEF                     	;# 
  2761  0F11                     	;# 
  2762  0F12                     	;# 
  2763  0F13                     	;# 
  2764  0F14                     	;# 
  2765  0F15                     	;# 
  2766  0F16                     	;# 
  2767  0F17                     	;# 
  2768  0F18                     	;# 
  2769  0F19                     	;# 
  2770  0F1A                     	;# 
  2771  0F1B                     	;# 
  2772  0F1C                     	;# 
  2773  0F1D                     	;# 
  2774  0F1E                     	;# 
  2775  0F1F                     	;# 
  2776  0F20                     	;# 
  2777  0F21                     	;# 
  2778  0F21                     	;# 
  2779  0F22                     	;# 
  2780  0F23                     	;# 
  2781  0F23                     	;# 
  2782  0F24                     	;# 
  2783  0F25                     	;# 
  2784  0F25                     	;# 
  2785  0F26                     	;# 
  2786  0F27                     	;# 
  2787  0F27                     	;# 
  2788  0F28                     	;# 
  2789  0F29                     	;# 
  2790  0F2A                     	;# 
  2791  0F2B                     	;# 
  2792  0F2C                     	;# 
  2793  0F2D                     	;# 
  2794  0F2E                     	;# 
  2795  0F2F                     	;# 
  2796  0FE4                     	;# 
  2797  0FE5                     	;# 
  2798  0FE6                     	;# 
  2799  0FE7                     	;# 
  2800  0FE8                     	;# 
  2801  0FE9                     	;# 
  2802  0FEA                     	;# 
  2803  0FEB                     	;# 
  2804  0FED                     	;# 
  2805  0FEE                     	;# 
  2806  0FEF                     	;# 
  2807  0000                     	;# 
  2808  0001                     	;# 
  2809  0002                     	;# 
  2810  0003                     	;# 
  2811  0004                     	;# 
  2812  0005                     	;# 
  2813  0006                     	;# 
  2814  0007                     	;# 
  2815  0008                     	;# 
  2816  0009                     	;# 
  2817  000A                     	;# 
  2818  000B                     	;# 
  2819  000C                     	;# 
  2820  000D                     	;# 
  2821  000E                     	;# 
  2822  000F                     	;# 
  2823  0010                     	;# 
  2824  0011                     	;# 
  2825  0012                     	;# 
  2826  0013                     	;# 
  2827  0014                     	;# 
  2828  0015                     	;# 
  2829  0016                     	;# 
  2830  0016                     	;# 
  2831  0017                     	;# 
  2832  0018                     	;# 
  2833  0019                     	;# 
  2834  001A                     	;# 
  2835  001B                     	;# 
  2836  001C                     	;# 
  2837  008C                     	;# 
  2838  008D                     	;# 
  2839  008E                     	;# 
  2840  008F                     	;# 
  2841  0090                     	;# 
  2842  0091                     	;# 
  2843  0092                     	;# 
  2844  0093                     	;# 
  2845  0094                     	;# 
  2846  0095                     	;# 
  2847  0096                     	;# 
  2848  0097                     	;# 
  2849  0098                     	;# 
  2850  0099                     	;# 
  2851  009A                     	;# 
  2852  009B                     	;# 
  2853  009B                     	;# 
  2854  009C                     	;# 
  2855  009D                     	;# 
  2856  009E                     	;# 
  2857  009F                     	;# 
  2858  010C                     	;# 
  2859  010D                     	;# 
  2860  010E                     	;# 
  2861  010F                     	;# 
  2862  0110                     	;# 
  2863  0111                     	;# 
  2864  0112                     	;# 
  2865  0113                     	;# 
  2866  0114                     	;# 
  2867  0115                     	;# 
  2868  0116                     	;# 
  2869  0117                     	;# 
  2870  0118                     	;# 
  2871  0119                     	;# 
  2872  011A                     	;# 
  2873  011B                     	;# 
  2874  011C                     	;# 
  2875  011D                     	;# 
  2876  011D                     	;# 
  2877  011D                     	;# 
  2878  011E                     	;# 
  2879  011F                     	;# 
  2880  018C                     	;# 
  2881  018D                     	;# 
  2882  018E                     	;# 
  2883  018F                     	;# 
  2884  0190                     	;# 
  2885  0191                     	;# 
  2886  0191                     	;# 
  2887  0192                     	;# 
  2888  0193                     	;# 
  2889  0193                     	;# 
  2890  0193                     	;# 
  2891  0194                     	;# 
  2892  0195                     	;# 
  2893  0196                     	;# 
  2894  0197                     	;# 
  2895  0199                     	;# 
  2896  0199                     	;# 
  2897  0199                     	;# 
  2898  019A                     	;# 
  2899  019A                     	;# 
  2900  019A                     	;# 
  2901  019B                     	;# 
  2902  019B                     	;# 
  2903  019B                     	;# 
  2904  019B                     	;# 
  2905  019B                     	;# 
  2906  019C                     	;# 
  2907  019C                     	;# 
  2908  019C                     	;# 
  2909  019D                     	;# 
  2910  019D                     	;# 
  2911  019D                     	;# 
  2912  019E                     	;# 
  2913  019E                     	;# 
  2914  019E                     	;# 
  2915  019F                     	;# 
  2916  019F                     	;# 
  2917  019F                     	;# 
  2918  019F                     	;# 
  2919  019F                     	;# 
  2920  020C                     	;# 
  2921  020D                     	;# 
  2922  020E                     	;# 
  2923  020F                     	;# 
  2924  0210                     	;# 
  2925  0211                     	;# 
  2926  0211                     	;# 
  2927  0212                     	;# 
  2928  0212                     	;# 
  2929  0213                     	;# 
  2930  0213                     	;# 
  2931  0214                     	;# 
  2932  0214                     	;# 
  2933  0215                     	;# 
  2934  0215                     	;# 
  2935  0215                     	;# 
  2936  0215                     	;# 
  2937  0216                     	;# 
  2938  0216                     	;# 
  2939  0217                     	;# 
  2940  0217                     	;# 
  2941  028C                     	;# 
  2942  028D                     	;# 
  2943  028E                     	;# 
  2944  028F                     	;# 
  2945  0290                     	;# 
  2946  0291                     	;# 
  2947  0291                     	;# 
  2948  0292                     	;# 
  2949  0293                     	;# 
  2950  0298                     	;# 
  2951  0298                     	;# 
  2952  0299                     	;# 
  2953  029A                     	;# 
  2954  030C                     	;# 
  2955  030D                     	;# 
  2956  030E                     	;# 
  2957  030F                     	;# 
  2958  0310                     	;# 
  2959  0311                     	;# 
  2960  0311                     	;# 
  2961  0312                     	;# 
  2962  0313                     	;# 
  2963  038C                     	;# 
  2964  038D                     	;# 
  2965  038E                     	;# 
  2966  038F                     	;# 
  2967  0390                     	;# 
  2968  0391                     	;# 
  2969  0392                     	;# 
  2970  0393                     	;# 
  2971  0394                     	;# 
  2972  0395                     	;# 
  2973  0396                     	;# 
  2974  0397                     	;# 
  2975  0398                     	;# 
  2976  0399                     	;# 
  2977  039D                     	;# 
  2978  039E                     	;# 
  2979  039F                     	;# 
  2980  0511                     	;# 
  2981  0513                     	;# 
  2982  0515                     	;# 
  2983  051A                     	;# 
  2984  0591                     	;# 
  2985  0592                     	;# 
  2986  0592                     	;# 
  2987  0593                     	;# 
  2988  0594                     	;# 
  2989  0594                     	;# 
  2990  0595                     	;# 
  2991  0596                     	;# 
  2992  0596                     	;# 
  2993  0E91                     	;# 
  2994  0E92                     	;# 
  2995  0E93                     	;# 
  2996  0E94                     	;# 
  2997  0E95                     	;# 
  2998  0E96                     	;# 
  2999  0E97                     	;# 
  3000  0E98                     	;# 
  3001  0E99                     	;# 
  3002  0E9A                     	;# 
  3003  0E9B                     	;# 
  3004  0E9C                     	;# 
  3005  0E9D                     	;# 
  3006  0E9E                     	;# 
  3007  0E9F                     	;# 
  3008  0EA0                     	;# 
  3009  0EA1                     	;# 
  3010  0EA1                     	;# 
  3011  0EA2                     	;# 
  3012  0EA3                     	;# 
  3013  0EA3                     	;# 
  3014  0EA4                     	;# 
  3015  0EA5                     	;# 
  3016  0EA5                     	;# 
  3017  0EA6                     	;# 
  3018  0EA7                     	;# 
  3019  0EA7                     	;# 
  3020  0EA8                     	;# 
  3021  0EA9                     	;# 
  3022  0EAA                     	;# 
  3023  0EAB                     	;# 
  3024  0EAC                     	;# 
  3025  0EAD                     	;# 
  3026  0EAE                     	;# 
  3027  0EAF                     	;# 
  3028  0EB1                     	;# 
  3029  0EB2                     	;# 
  3030  0EB3                     	;# 
  3031  0EB4                     	;# 
  3032  0EB5                     	;# 
  3033  0EB6                     	;# 
  3034  0EB7                     	;# 
  3035  0EB8                     	;# 
  3036  0EB9                     	;# 
  3037  0EBA                     	;# 
  3038  0EBB                     	;# 
  3039  0EBC                     	;# 
  3040  0EBD                     	;# 
  3041  0EBE                     	;# 
  3042  0EBF                     	;# 
  3043  0EC0                     	;# 
  3044  0EC1                     	;# 
  3045  0EC1                     	;# 
  3046  0EC2                     	;# 
  3047  0EC3                     	;# 
  3048  0EC3                     	;# 
  3049  0EC4                     	;# 
  3050  0EC5                     	;# 
  3051  0EC5                     	;# 
  3052  0EC6                     	;# 
  3053  0EC7                     	;# 
  3054  0EC7                     	;# 
  3055  0EC8                     	;# 
  3056  0EC9                     	;# 
  3057  0ECA                     	;# 
  3058  0ECB                     	;# 
  3059  0ECC                     	;# 
  3060  0ECD                     	;# 
  3061  0ECE                     	;# 
  3062  0ECF                     	;# 
  3063  0ED1                     	;# 
  3064  0ED2                     	;# 
  3065  0ED3                     	;# 
  3066  0ED4                     	;# 
  3067  0ED5                     	;# 
  3068  0ED6                     	;# 
  3069  0ED7                     	;# 
  3070  0ED8                     	;# 
  3071  0ED9                     	;# 
  3072  0EDA                     	;# 
  3073  0EDB                     	;# 
  3074  0EDC                     	;# 
  3075  0EDD                     	;# 
  3076  0EDE                     	;# 
  3077  0EDF                     	;# 
  3078  0EE0                     	;# 
  3079  0EE1                     	;# 
  3080  0EE1                     	;# 
  3081  0EE2                     	;# 
  3082  0EE3                     	;# 
  3083  0EE3                     	;# 
  3084  0EE4                     	;# 
  3085  0EE5                     	;# 
  3086  0EE5                     	;# 
  3087  0EE6                     	;# 
  3088  0EE7                     	;# 
  3089  0EE7                     	;# 
  3090  0EE8                     	;# 
  3091  0EE9                     	;# 
  3092  0EEA                     	;# 
  3093  0EEB                     	;# 
  3094  0EEC                     	;# 
  3095  0EED                     	;# 
  3096  0EEE                     	;# 
  3097  0EEF                     	;# 
  3098  0F11                     	;# 
  3099  0F12                     	;# 
  3100  0F13                     	;# 
  3101  0F14                     	;# 
  3102  0F15                     	;# 
  3103  0F16                     	;# 
  3104  0F17                     	;# 
  3105  0F18                     	;# 
  3106  0F19                     	;# 
  3107  0F1A                     	;# 
  3108  0F1B                     	;# 
  3109  0F1C                     	;# 
  3110  0F1D                     	;# 
  3111  0F1E                     	;# 
  3112  0F1F                     	;# 
  3113  0F20                     	;# 
  3114  0F21                     	;# 
  3115  0F21                     	;# 
  3116  0F22                     	;# 
  3117  0F23                     	;# 
  3118  0F23                     	;# 
  3119  0F24                     	;# 
  3120  0F25                     	;# 
  3121  0F25                     	;# 
  3122  0F26                     	;# 
  3123  0F27                     	;# 
  3124  0F27                     	;# 
  3125  0F28                     	;# 
  3126  0F29                     	;# 
  3127  0F2A                     	;# 
  3128  0F2B                     	;# 
  3129  0F2C                     	;# 
  3130  0F2D                     	;# 
  3131  0F2E                     	;# 
  3132  0F2F                     	;# 
  3133  0FE4                     	;# 
  3134  0FE5                     	;# 
  3135  0FE6                     	;# 
  3136  0FE7                     	;# 
  3137  0FE8                     	;# 
  3138  0FE9                     	;# 
  3139  0FEA                     	;# 
  3140  0FEB                     	;# 
  3141  0FED                     	;# 
  3142  0FEE                     	;# 
  3143  0FEF                     	;# 
  3144  0000                     	;# 
  3145  0001                     	;# 
  3146  0002                     	;# 
  3147  0003                     	;# 
  3148  0004                     	;# 
  3149  0005                     	;# 
  3150  0006                     	;# 
  3151  0007                     	;# 
  3152  0008                     	;# 
  3153  0009                     	;# 
  3154  000A                     	;# 
  3155  000B                     	;# 
  3156  000C                     	;# 
  3157  000D                     	;# 
  3158  000E                     	;# 
  3159  000F                     	;# 
  3160  0010                     	;# 
  3161  0011                     	;# 
  3162  0012                     	;# 
  3163  0013                     	;# 
  3164  0014                     	;# 
  3165  0015                     	;# 
  3166  0016                     	;# 
  3167  0016                     	;# 
  3168  0017                     	;# 
  3169  0018                     	;# 
  3170  0019                     	;# 
  3171  001A                     	;# 
  3172  001B                     	;# 
  3173  001C                     	;# 
  3174  008C                     	;# 
  3175  008D                     	;# 
  3176  008E                     	;# 
  3177  008F                     	;# 
  3178  0090                     	;# 
  3179  0091                     	;# 
  3180  0092                     	;# 
  3181  0093                     	;# 
  3182  0094                     	;# 
  3183  0095                     	;# 
  3184  0096                     	;# 
  3185  0097                     	;# 
  3186  0098                     	;# 
  3187  0099                     	;# 
  3188  009A                     	;# 
  3189  009B                     	;# 
  3190  009B                     	;# 
  3191  009C                     	;# 
  3192  009D                     	;# 
  3193  009E                     	;# 
  3194  009F                     	;# 
  3195  010C                     	;# 
  3196  010D                     	;# 
  3197  010E                     	;# 
  3198  010F                     	;# 
  3199  0110                     	;# 
  3200  0111                     	;# 
  3201  0112                     	;# 
  3202  0113                     	;# 
  3203  0114                     	;# 
  3204  0115                     	;# 
  3205  0116                     	;# 
  3206  0117                     	;# 
  3207  0118                     	;# 
  3208  0119                     	;# 
  3209  011A                     	;# 
  3210  011B                     	;# 
  3211  011C                     	;# 
  3212  011D                     	;# 
  3213  011D                     	;# 
  3214  011D                     	;# 
  3215  011E                     	;# 
  3216  011F                     	;# 
  3217  018C                     	;# 
  3218  018D                     	;# 
  3219  018E                     	;# 
  3220  018F                     	;# 
  3221  0190                     	;# 
  3222  0191                     	;# 
  3223  0191                     	;# 
  3224  0192                     	;# 
  3225  0193                     	;# 
  3226  0193                     	;# 
  3227  0193                     	;# 
  3228  0194                     	;# 
  3229  0195                     	;# 
  3230  0196                     	;# 
  3231  0197                     	;# 
  3232  0199                     	;# 
  3233  0199                     	;# 
  3234  0199                     	;# 
  3235  019A                     	;# 
  3236  019A                     	;# 
  3237  019A                     	;# 
  3238  019B                     	;# 
  3239  019B                     	;# 
  3240  019B                     	;# 
  3241  019B                     	;# 
  3242  019B                     	;# 
  3243  019C                     	;# 
  3244  019C                     	;# 
  3245  019C                     	;# 
  3246  019D                     	;# 
  3247  019D                     	;# 
  3248  019D                     	;# 
  3249  019E                     	;# 
  3250  019E                     	;# 
  3251  019E                     	;# 
  3252  019F                     	;# 
  3253  019F                     	;# 
  3254  019F                     	;# 
  3255  019F                     	;# 
  3256  019F                     	;# 
  3257  020C                     	;# 
  3258  020D                     	;# 
  3259  020E                     	;# 
  3260  020F                     	;# 
  3261  0210                     	;# 
  3262  0211                     	;# 
  3263  0211                     	;# 
  3264  0212                     	;# 
  3265  0212                     	;# 
  3266  0213                     	;# 
  3267  0213                     	;# 
  3268  0214                     	;# 
  3269  0214                     	;# 
  3270  0215                     	;# 
  3271  0215                     	;# 
  3272  0215                     	;# 
  3273  0215                     	;# 
  3274  0216                     	;# 
  3275  0216                     	;# 
  3276  0217                     	;# 
  3277  0217                     	;# 
  3278  028C                     	;# 
  3279  028D                     	;# 
  3280  028E                     	;# 
  3281  028F                     	;# 
  3282  0290                     	;# 
  3283  0291                     	;# 
  3284  0291                     	;# 
  3285  0292                     	;# 
  3286  0293                     	;# 
  3287  0298                     	;# 
  3288  0298                     	;# 
  3289  0299                     	;# 
  3290  029A                     	;# 
  3291  030C                     	;# 
  3292  030D                     	;# 
  3293  030E                     	;# 
  3294  030F                     	;# 
  3295  0310                     	;# 
  3296  0311                     	;# 
  3297  0311                     	;# 
  3298  0312                     	;# 
  3299  0313                     	;# 
  3300  038C                     	;# 
  3301  038D                     	;# 
  3302  038E                     	;# 
  3303  038F                     	;# 
  3304  0390                     	;# 
  3305  0391                     	;# 
  3306  0392                     	;# 
  3307  0393                     	;# 
  3308  0394                     	;# 
  3309  0395                     	;# 
  3310  0396                     	;# 
  3311  0397                     	;# 
  3312  0398                     	;# 
  3313  0399                     	;# 
  3314  039D                     	;# 
  3315  039E                     	;# 
  3316  039F                     	;# 
  3317  0511                     	;# 
  3318  0513                     	;# 
  3319  0515                     	;# 
  3320  051A                     	;# 
  3321  0591                     	;# 
  3322  0592                     	;# 
  3323  0592                     	;# 
  3324  0593                     	;# 
  3325  0594                     	;# 
  3326  0594                     	;# 
  3327  0595                     	;# 
  3328  0596                     	;# 
  3329  0596                     	;# 
  3330  0E91                     	;# 
  3331  0E92                     	;# 
  3332  0E93                     	;# 
  3333  0E94                     	;# 
  3334  0E95                     	;# 
  3335  0E96                     	;# 
  3336  0E97                     	;# 
  3337  0E98                     	;# 
  3338  0E99                     	;# 
  3339  0E9A                     	;# 
  3340  0E9B                     	;# 
  3341  0E9C                     	;# 
  3342  0E9D                     	;# 
  3343  0E9E                     	;# 
  3344  0E9F                     	;# 
  3345  0EA0                     	;# 
  3346  0EA1                     	;# 
  3347  0EA1                     	;# 
  3348  0EA2                     	;# 
  3349  0EA3                     	;# 
  3350  0EA3                     	;# 
  3351  0EA4                     	;# 
  3352  0EA5                     	;# 
  3353  0EA5                     	;# 
  3354  0EA6                     	;# 
  3355  0EA7                     	;# 
  3356  0EA7                     	;# 
  3357  0EA8                     	;# 
  3358  0EA9                     	;# 
  3359  0EAA                     	;# 
  3360  0EAB                     	;# 
  3361  0EAC                     	;# 
  3362  0EAD                     	;# 
  3363  0EAE                     	;# 
  3364  0EAF                     	;# 
  3365  0EB1                     	;# 
  3366  0EB2                     	;# 
  3367  0EB3                     	;# 
  3368  0EB4                     	;# 
  3369  0EB5                     	;# 
  3370  0EB6                     	;# 
  3371  0EB7                     	;# 
  3372  0EB8                     	;# 
  3373  0EB9                     	;# 
  3374  0EBA                     	;# 
  3375  0EBB                     	;# 
  3376  0EBC                     	;# 
  3377  0EBD                     	;# 
  3378  0EBE                     	;# 
  3379  0EBF                     	;# 
  3380  0EC0                     	;# 
  3381  0EC1                     	;# 
  3382  0EC1                     	;# 
  3383  0EC2                     	;# 
  3384  0EC3                     	;# 
  3385  0EC3                     	;# 
  3386  0EC4                     	;# 
  3387  0EC5                     	;# 
  3388  0EC5                     	;# 
  3389  0EC6                     	;# 
  3390  0EC7                     	;# 
  3391  0EC7                     	;# 
  3392  0EC8                     	;# 
  3393  0EC9                     	;# 
  3394  0ECA                     	;# 
  3395  0ECB                     	;# 
  3396  0ECC                     	;# 
  3397  0ECD                     	;# 
  3398  0ECE                     	;# 
  3399  0ECF                     	;# 
  3400  0ED1                     	;# 
  3401  0ED2                     	;# 
  3402  0ED3                     	;# 
  3403  0ED4                     	;# 
  3404  0ED5                     	;# 
  3405  0ED6                     	;# 
  3406  0ED7                     	;# 
  3407  0ED8                     	;# 
  3408  0ED9                     	;# 
  3409  0EDA                     	;# 
  3410  0EDB                     	;# 
  3411  0EDC                     	;# 
  3412  0EDD                     	;# 
  3413  0EDE                     	;# 
  3414  0EDF                     	;# 
  3415  0EE0                     	;# 
  3416  0EE1                     	;# 
  3417  0EE1                     	;# 
  3418  0EE2                     	;# 
  3419  0EE3                     	;# 
  3420  0EE3                     	;# 
  3421  0EE4                     	;# 
  3422  0EE5                     	;# 
  3423  0EE5                     	;# 
  3424  0EE6                     	;# 
  3425  0EE7                     	;# 
  3426  0EE7                     	;# 
  3427  0EE8                     	;# 
  3428  0EE9                     	;# 
  3429  0EEA                     	;# 
  3430  0EEB                     	;# 
  3431  0EEC                     	;# 
  3432  0EED                     	;# 
  3433  0EEE                     	;# 
  3434  0EEF                     	;# 
  3435  0F11                     	;# 
  3436  0F12                     	;# 
  3437  0F13                     	;# 
  3438  0F14                     	;# 
  3439  0F15                     	;# 
  3440  0F16                     	;# 
  3441  0F17                     	;# 
  3442  0F18                     	;# 
  3443  0F19                     	;# 
  3444  0F1A                     	;# 
  3445  0F1B                     	;# 
  3446  0F1C                     	;# 
  3447  0F1D                     	;# 
  3448  0F1E                     	;# 
  3449  0F1F                     	;# 
  3450  0F20                     	;# 
  3451  0F21                     	;# 
  3452  0F21                     	;# 
  3453  0F22                     	;# 
  3454  0F23                     	;# 
  3455  0F23                     	;# 
  3456  0F24                     	;# 
  3457  0F25                     	;# 
  3458  0F25                     	;# 
  3459  0F26                     	;# 
  3460  0F27                     	;# 
  3461  0F27                     	;# 
  3462  0F28                     	;# 
  3463  0F29                     	;# 
  3464  0F2A                     	;# 
  3465  0F2B                     	;# 
  3466  0F2C                     	;# 
  3467  0F2D                     	;# 
  3468  0F2E                     	;# 
  3469  0F2F                     	;# 
  3470  0FE4                     	;# 
  3471  0FE5                     	;# 
  3472  0FE6                     	;# 
  3473  0FE7                     	;# 
  3474  0FE8                     	;# 
  3475  0FE9                     	;# 
  3476  0FEA                     	;# 
  3477  0FEB                     	;# 
  3478  0FED                     	;# 
  3479  0FEE                     	;# 
  3480  0FEF                     	;# 
  3481  0000                     	;# 
  3482  0001                     	;# 
  3483  0002                     	;# 
  3484  0003                     	;# 
  3485  0004                     	;# 
  3486  0005                     	;# 
  3487  0006                     	;# 
  3488  0007                     	;# 
  3489  0008                     	;# 
  3490  0009                     	;# 
  3491  000A                     	;# 
  3492  000B                     	;# 
  3493  000C                     	;# 
  3494  000D                     	;# 
  3495  000E                     	;# 
  3496  000F                     	;# 
  3497  0010                     	;# 
  3498  0011                     	;# 
  3499  0012                     	;# 
  3500  0013                     	;# 
  3501  0014                     	;# 
  3502  0015                     	;# 
  3503  0016                     	;# 
  3504  0016                     	;# 
  3505  0017                     	;# 
  3506  0018                     	;# 
  3507  0019                     	;# 
  3508  001A                     	;# 
  3509  001B                     	;# 
  3510  001C                     	;# 
  3511  008C                     	;# 
  3512  008D                     	;# 
  3513  008E                     	;# 
  3514  008F                     	;# 
  3515  0090                     	;# 
  3516  0091                     	;# 
  3517  0092                     	;# 
  3518  0093                     	;# 
  3519  0094                     	;# 
  3520  0095                     	;# 
  3521  0096                     	;# 
  3522  0097                     	;# 
  3523  0098                     	;# 
  3524  0099                     	;# 
  3525  009A                     	;# 
  3526  009B                     	;# 
  3527  009B                     	;# 
  3528  009C                     	;# 
  3529  009D                     	;# 
  3530  009E                     	;# 
  3531  009F                     	;# 
  3532  010C                     	;# 
  3533  010D                     	;# 
  3534  010E                     	;# 
  3535  010F                     	;# 
  3536  0110                     	;# 
  3537  0111                     	;# 
  3538  0112                     	;# 
  3539  0113                     	;# 
  3540  0114                     	;# 
  3541  0115                     	;# 
  3542  0116                     	;# 
  3543  0117                     	;# 
  3544  0118                     	;# 
  3545  0119                     	;# 
  3546  011A                     	;# 
  3547  011B                     	;# 
  3548  011C                     	;# 
  3549  011D                     	;# 
  3550  011D                     	;# 
  3551  011D                     	;# 
  3552  011E                     	;# 
  3553  011F                     	;# 
  3554  018C                     	;# 
  3555  018D                     	;# 
  3556  018E                     	;# 
  3557  018F                     	;# 
  3558  0190                     	;# 
  3559  0191                     	;# 
  3560  0191                     	;# 
  3561  0192                     	;# 
  3562  0193                     	;# 
  3563  0193                     	;# 
  3564  0193                     	;# 
  3565  0194                     	;# 
  3566  0195                     	;# 
  3567  0196                     	;# 
  3568  0197                     	;# 
  3569  0199                     	;# 
  3570  0199                     	;# 
  3571  0199                     	;# 
  3572  019A                     	;# 
  3573  019A                     	;# 
  3574  019A                     	;# 
  3575  019B                     	;# 
  3576  019B                     	;# 
  3577  019B                     	;# 
  3578  019B                     	;# 
  3579  019B                     	;# 
  3580  019C                     	;# 
  3581  019C                     	;# 
  3582  019C                     	;# 
  3583  019D                     	;# 
  3584  019D                     	;# 
  3585  019D                     	;# 
  3586  019E                     	;# 
  3587  019E                     	;# 
  3588  019E                     	;# 
  3589  019F                     	;# 
  3590  019F                     	;# 
  3591  019F                     	;# 
  3592  019F                     	;# 
  3593  019F                     	;# 
  3594  020C                     	;# 
  3595  020D                     	;# 
  3596  020E                     	;# 
  3597  020F                     	;# 
  3598  0210                     	;# 
  3599  0211                     	;# 
  3600  0211                     	;# 
  3601  0212                     	;# 
  3602  0212                     	;# 
  3603  0213                     	;# 
  3604  0213                     	;# 
  3605  0214                     	;# 
  3606  0214                     	;# 
  3607  0215                     	;# 
  3608  0215                     	;# 
  3609  0215                     	;# 
  3610  0215                     	;# 
  3611  0216                     	;# 
  3612  0216                     	;# 
  3613  0217                     	;# 
  3614  0217                     	;# 
  3615  028C                     	;# 
  3616  028D                     	;# 
  3617  028E                     	;# 
  3618  028F                     	;# 
  3619  0290                     	;# 
  3620  0291                     	;# 
  3621  0291                     	;# 
  3622  0292                     	;# 
  3623  0293                     	;# 
  3624  0298                     	;# 
  3625  0298                     	;# 
  3626  0299                     	;# 
  3627  029A                     	;# 
  3628  030C                     	;# 
  3629  030D                     	;# 
  3630  030E                     	;# 
  3631  030F                     	;# 
  3632  0310                     	;# 
  3633  0311                     	;# 
  3634  0311                     	;# 
  3635  0312                     	;# 
  3636  0313                     	;# 
  3637  038C                     	;# 
  3638  038D                     	;# 
  3639  038E                     	;# 
  3640  038F                     	;# 
  3641  0390                     	;# 
  3642  0391                     	;# 
  3643  0392                     	;# 
  3644  0393                     	;# 
  3645  0394                     	;# 
  3646  0395                     	;# 
  3647  0396                     	;# 
  3648  0397                     	;# 
  3649  0398                     	;# 
  3650  0399                     	;# 
  3651  039D                     	;# 
  3652  039E                     	;# 
  3653  039F                     	;# 
  3654  0511                     	;# 
  3655  0513                     	;# 
  3656  0515                     	;# 
  3657  051A                     	;# 
  3658  0591                     	;# 
  3659  0592                     	;# 
  3660  0592                     	;# 
  3661  0593                     	;# 
  3662  0594                     	;# 
  3663  0594                     	;# 
  3664  0595                     	;# 
  3665  0596                     	;# 
  3666  0596                     	;# 
  3667  0E91                     	;# 
  3668  0E92                     	;# 
  3669  0E93                     	;# 
  3670  0E94                     	;# 
  3671  0E95                     	;# 
  3672  0E96                     	;# 
  3673  0E97                     	;# 
  3674  0E98                     	;# 
  3675  0E99                     	;# 
  3676  0E9A                     	;# 
  3677  0E9B                     	;# 
  3678  0E9C                     	;# 
  3679  0E9D                     	;# 
  3680  0E9E                     	;# 
  3681  0E9F                     	;# 
  3682  0EA0                     	;# 
  3683  0EA1                     	;# 
  3684  0EA1                     	;# 
  3685  0EA2                     	;# 
  3686  0EA3                     	;# 
  3687  0EA3                     	;# 
  3688  0EA4                     	;# 
  3689  0EA5                     	;# 
  3690  0EA5                     	;# 
  3691  0EA6                     	;# 
  3692  0EA7                     	;# 
  3693  0EA7                     	;# 
  3694  0EA8                     	;# 
  3695  0EA9                     	;# 
  3696  0EAA                     	;# 
  3697  0EAB                     	;# 
  3698  0EAC                     	;# 
  3699  0EAD                     	;# 
  3700  0EAE                     	;# 
  3701  0EAF                     	;# 
  3702  0EB1                     	;# 
  3703  0EB2                     	;# 
  3704  0EB3                     	;# 
  3705  0EB4                     	;# 
  3706  0EB5                     	;# 
  3707  0EB6                     	;# 
  3708  0EB7                     	;# 
  3709  0EB8                     	;# 
  3710  0EB9                     	;# 
  3711  0EBA                     	;# 
  3712  0EBB                     	;# 
  3713  0EBC                     	;# 
  3714  0EBD                     	;# 
  3715  0EBE                     	;# 
  3716  0EBF                     	;# 
  3717  0EC0                     	;# 
  3718  0EC1                     	;# 
  3719  0EC1                     	;# 
  3720  0EC2                     	;# 
  3721  0EC3                     	;# 
  3722  0EC3                     	;# 
  3723  0EC4                     	;# 
  3724  0EC5                     	;# 
  3725  0EC5                     	;# 
  3726  0EC6                     	;# 
  3727  0EC7                     	;# 
  3728  0EC7                     	;# 
  3729  0EC8                     	;# 
  3730  0EC9                     	;# 
  3731  0ECA                     	;# 
  3732  0ECB                     	;# 
  3733  0ECC                     	;# 
  3734  0ECD                     	;# 
  3735  0ECE                     	;# 
  3736  0ECF                     	;# 
  3737  0ED1                     	;# 
  3738  0ED2                     	;# 
  3739  0ED3                     	;# 
  3740  0ED4                     	;# 
  3741  0ED5                     	;# 
  3742  0ED6                     	;# 
  3743  0ED7                     	;# 
  3744  0ED8                     	;# 
  3745  0ED9                     	;# 
  3746  0EDA                     	;# 
  3747  0EDB                     	;# 
  3748  0EDC                     	;# 
  3749  0EDD                     	;# 
  3750  0EDE                     	;# 
  3751  0EDF                     	;# 
  3752  0EE0                     	;# 
  3753  0EE1                     	;# 
  3754  0EE1                     	;# 
  3755  0EE2                     	;# 
  3756  0EE3                     	;# 
  3757  0EE3                     	;# 
  3758  0EE4                     	;# 
  3759  0EE5                     	;# 
  3760  0EE5                     	;# 
  3761  0EE6                     	;# 
  3762  0EE7                     	;# 
  3763  0EE7                     	;# 
  3764  0EE8                     	;# 
  3765  0EE9                     	;# 
  3766  0EEA                     	;# 
  3767  0EEB                     	;# 
  3768  0EEC                     	;# 
  3769  0EED                     	;# 
  3770  0EEE                     	;# 
  3771  0EEF                     	;# 
  3772  0F11                     	;# 
  3773  0F12                     	;# 
  3774  0F13                     	;# 
  3775  0F14                     	;# 
  3776  0F15                     	;# 
  3777  0F16                     	;# 
  3778  0F17                     	;# 
  3779  0F18                     	;# 
  3780  0F19                     	;# 
  3781  0F1A                     	;# 
  3782  0F1B                     	;# 
  3783  0F1C                     	;# 
  3784  0F1D                     	;# 
  3785  0F1E                     	;# 
  3786  0F1F                     	;# 
  3787  0F20                     	;# 
  3788  0F21                     	;# 
  3789  0F21                     	;# 
  3790  0F22                     	;# 
  3791  0F23                     	;# 
  3792  0F23                     	;# 
  3793  0F24                     	;# 
  3794  0F25                     	;# 
  3795  0F25                     	;# 
  3796  0F26                     	;# 
  3797  0F27                     	;# 
  3798  0F27                     	;# 
  3799  0F28                     	;# 
  3800  0F29                     	;# 
  3801  0F2A                     	;# 
  3802  0F2B                     	;# 
  3803  0F2C                     	;# 
  3804  0F2D                     	;# 
  3805  0F2E                     	;# 
  3806  0F2F                     	;# 
  3807  0FE4                     	;# 
  3808  0FE5                     	;# 
  3809  0FE6                     	;# 
  3810  0FE7                     	;# 
  3811  0FE8                     	;# 
  3812  0FE9                     	;# 
  3813  0FEA                     	;# 
  3814  0FEB                     	;# 
  3815  0FED                     	;# 
  3816  0FEE                     	;# 
  3817  0FEF                     	;# 
  3818  0000                     	;# 
  3819  0001                     	;# 
  3820  0002                     	;# 
  3821  0003                     	;# 
  3822  0004                     	;# 
  3823  0005                     	;# 
  3824  0006                     	;# 
  3825  0007                     	;# 
  3826  0008                     	;# 
  3827  0009                     	;# 
  3828  000A                     	;# 
  3829  000B                     	;# 
  3830  000C                     	;# 
  3831  000D                     	;# 
  3832  000E                     	;# 
  3833  000F                     	;# 
  3834  0010                     	;# 
  3835  0011                     	;# 
  3836  0012                     	;# 
  3837  0013                     	;# 
  3838  0014                     	;# 
  3839  0015                     	;# 
  3840  0016                     	;# 
  3841  0016                     	;# 
  3842  0017                     	;# 
  3843  0018                     	;# 
  3844  0019                     	;# 
  3845  001A                     	;# 
  3846  001B                     	;# 
  3847  001C                     	;# 
  3848  008C                     	;# 
  3849  008D                     	;# 
  3850  008E                     	;# 
  3851  008F                     	;# 
  3852  0090                     	;# 
  3853  0091                     	;# 
  3854  0092                     	;# 
  3855  0093                     	;# 
  3856  0094                     	;# 
  3857  0095                     	;# 
  3858  0096                     	;# 
  3859  0097                     	;# 
  3860  0098                     	;# 
  3861  0099                     	;# 
  3862  009A                     	;# 
  3863  009B                     	;# 
  3864  009B                     	;# 
  3865  009C                     	;# 
  3866  009D                     	;# 
  3867  009E                     	;# 
  3868  009F                     	;# 
  3869  010C                     	;# 
  3870  010D                     	;# 
  3871  010E                     	;# 
  3872  010F                     	;# 
  3873  0110                     	;# 
  3874  0111                     	;# 
  3875  0112                     	;# 
  3876  0113                     	;# 
  3877  0114                     	;# 
  3878  0115                     	;# 
  3879  0116                     	;# 
  3880  0117                     	;# 
  3881  0118                     	;# 
  3882  0119                     	;# 
  3883  011A                     	;# 
  3884  011B                     	;# 
  3885  011C                     	;# 
  3886  011D                     	;# 
  3887  011D                     	;# 
  3888  011D                     	;# 
  3889  011E                     	;# 
  3890  011F                     	;# 
  3891  018C                     	;# 
  3892  018D                     	;# 
  3893  018E                     	;# 
  3894  018F                     	;# 
  3895  0190                     	;# 
  3896  0191                     	;# 
  3897  0191                     	;# 
  3898  0192                     	;# 
  3899  0193                     	;# 
  3900  0193                     	;# 
  3901  0193                     	;# 
  3902  0194                     	;# 
  3903  0195                     	;# 
  3904  0196                     	;# 
  3905  0197                     	;# 
  3906  0199                     	;# 
  3907  0199                     	;# 
  3908  0199                     	;# 
  3909  019A                     	;# 
  3910  019A                     	;# 
  3911  019A                     	;# 
  3912  019B                     	;# 
  3913  019B                     	;# 
  3914  019B                     	;# 
  3915  019B                     	;# 
  3916  019B                     	;# 
  3917  019C                     	;# 
  3918  019C                     	;# 
  3919  019C                     	;# 
  3920  019D                     	;# 
  3921  019D                     	;# 
  3922  019D                     	;# 
  3923  019E                     	;# 
  3924  019E                     	;# 
  3925  019E                     	;# 
  3926  019F                     	;# 
  3927  019F                     	;# 
  3928  019F                     	;# 
  3929  019F                     	;# 
  3930  019F                     	;# 
  3931  020C                     	;# 
  3932  020D                     	;# 
  3933  020E                     	;# 
  3934  020F                     	;# 
  3935  0210                     	;# 
  3936  0211                     	;# 
  3937  0211                     	;# 
  3938  0212                     	;# 
  3939  0212                     	;# 
  3940  0213                     	;# 
  3941  0213                     	;# 
  3942  0214                     	;# 
  3943  0214                     	;# 
  3944  0215                     	;# 
  3945  0215                     	;# 
  3946  0215                     	;# 
  3947  0215                     	;# 
  3948  0216                     	;# 
  3949  0216                     	;# 
  3950  0217                     	;# 
  3951  0217                     	;# 
  3952  028C                     	;# 
  3953  028D                     	;# 
  3954  028E                     	;# 
  3955  028F                     	;# 
  3956  0290                     	;# 
  3957  0291                     	;# 
  3958  0291                     	;# 
  3959  0292                     	;# 
  3960  0293                     	;# 
  3961  0298                     	;# 
  3962  0298                     	;# 
  3963  0299                     	;# 
  3964  029A                     	;# 
  3965  030C                     	;# 
  3966  030D                     	;# 
  3967  030E                     	;# 
  3968  030F                     	;# 
  3969  0310                     	;# 
  3970  0311                     	;# 
  3971  0311                     	;# 
  3972  0312                     	;# 
  3973  0313                     	;# 
  3974  038C                     	;# 
  3975  038D                     	;# 
  3976  038E                     	;# 
  3977  038F                     	;# 
  3978  0390                     	;# 
  3979  0391                     	;# 
  3980  0392                     	;# 
  3981  0393                     	;# 
  3982  0394                     	;# 
  3983  0395                     	;# 
  3984  0396                     	;# 
  3985  0397                     	;# 
  3986  0398                     	;# 
  3987  0399                     	;# 
  3988  039D                     	;# 
  3989  039E                     	;# 
  3990  039F                     	;# 
  3991  0511                     	;# 
  3992  0513                     	;# 
  3993  0515                     	;# 
  3994  051A                     	;# 
  3995  0591                     	;# 
  3996  0592                     	;# 
  3997  0592                     	;# 
  3998  0593                     	;# 
  3999  0594                     	;# 
  4000  0594                     	;# 
  4001  0595                     	;# 
  4002  0596                     	;# 
  4003  0596                     	;# 
  4004  0E91                     	;# 
  4005  0E92                     	;# 
  4006  0E93                     	;# 
  4007  0E94                     	;# 
  4008  0E95                     	;# 
  4009  0E96                     	;# 
  4010  0E97                     	;# 
  4011  0E98                     	;# 
  4012  0E99                     	;# 
  4013  0E9A                     	;# 
  4014  0E9B                     	;# 
  4015  0E9C                     	;# 
  4016  0E9D                     	;# 
  4017  0E9E                     	;# 
  4018  0E9F                     	;# 
  4019  0EA0                     	;# 
  4020  0EA1                     	;# 
  4021  0EA1                     	;# 
  4022  0EA2                     	;# 
  4023  0EA3                     	;# 
  4024  0EA3                     	;# 
  4025  0EA4                     	;# 
  4026  0EA5                     	;# 
  4027  0EA5                     	;# 
  4028  0EA6                     	;# 
  4029  0EA7                     	;# 
  4030  0EA7                     	;# 
  4031  0EA8                     	;# 
  4032  0EA9                     	;# 
  4033  0EAA                     	;# 
  4034  0EAB                     	;# 
  4035  0EAC                     	;# 
  4036  0EAD                     	;# 
  4037  0EAE                     	;# 
  4038  0EAF                     	;# 
  4039  0EB1                     	;# 
  4040  0EB2                     	;# 
  4041  0EB3                     	;# 
  4042  0EB4                     	;# 
  4043  0EB5                     	;# 
  4044  0EB6                     	;# 
  4045  0EB7                     	;# 
  4046  0EB8                     	;# 
  4047  0EB9                     	;# 
  4048  0EBA                     	;# 
  4049  0EBB                     	;# 
  4050  0EBC                     	;# 
  4051  0EBD                     	;# 
  4052  0EBE                     	;# 
  4053  0EBF                     	;# 
  4054  0EC0                     	;# 
  4055  0EC1                     	;# 
  4056  0EC1                     	;# 
  4057  0EC2                     	;# 
  4058  0EC3                     	;# 
  4059  0EC3                     	;# 
  4060  0EC4                     	;# 
  4061  0EC5                     	;# 
  4062  0EC5                     	;# 
  4063  0EC6                     	;# 
  4064  0EC7                     	;# 
  4065  0EC7                     	;# 
  4066  0EC8                     	;# 
  4067  0EC9                     	;# 
  4068  0ECA                     	;# 
  4069  0ECB                     	;# 
  4070  0ECC                     	;# 
  4071  0ECD                     	;# 
  4072  0ECE                     	;# 
  4073  0ECF                     	;# 
  4074  0ED1                     	;# 
  4075  0ED2                     	;# 
  4076  0ED3                     	;# 
  4077  0ED4                     	;# 
  4078  0ED5                     	;# 
  4079  0ED6                     	;# 
  4080  0ED7                     	;# 
  4081  0ED8                     	;# 
  4082  0ED9                     	;# 
  4083  0EDA                     	;# 
  4084  0EDB                     	;# 
  4085  0EDC                     	;# 
  4086  0EDD                     	;# 
  4087  0EDE                     	;# 
  4088  0EDF                     	;# 
  4089  0EE0                     	;# 
  4090  0EE1                     	;# 
  4091  0EE1                     	;# 
  4092  0EE2                     	;# 
  4093  0EE3                     	;# 
  4094  0EE3                     	;# 
  4095  0EE4                     	;# 
  4096  0EE5                     	;# 
  4097  0EE5                     	;# 
  4098  0EE6                     	;# 
  4099  0EE7                     	;# 
  4100  0EE7                     	;# 
  4101  0EE8                     	;# 
  4102  0EE9                     	;# 
  4103  0EEA                     	;# 
  4104  0EEB                     	;# 
  4105  0EEC                     	;# 
  4106  0EED                     	;# 
  4107  0EEE                     	;# 
  4108  0EEF                     	;# 
  4109  0F11                     	;# 
  4110  0F12                     	;# 
  4111  0F13                     	;# 
  4112  0F14                     	;# 
  4113  0F15                     	;# 
  4114  0F16                     	;# 
  4115  0F17                     	;# 
  4116  0F18                     	;# 
  4117  0F19                     	;# 
  4118  0F1A                     	;# 
  4119  0F1B                     	;# 
  4120  0F1C                     	;# 
  4121  0F1D                     	;# 
  4122  0F1E                     	;# 
  4123  0F1F                     	;# 
  4124  0F20                     	;# 
  4125  0F21                     	;# 
  4126  0F21                     	;# 
  4127  0F22                     	;# 
  4128  0F23                     	;# 
  4129  0F23                     	;# 
  4130  0F24                     	;# 
  4131  0F25                     	;# 
  4132  0F25                     	;# 
  4133  0F26                     	;# 
  4134  0F27                     	;# 
  4135  0F27                     	;# 
  4136  0F28                     	;# 
  4137  0F29                     	;# 
  4138  0F2A                     	;# 
  4139  0F2B                     	;# 
  4140  0F2C                     	;# 
  4141  0F2D                     	;# 
  4142  0F2E                     	;# 
  4143  0F2F                     	;# 
  4144  0FE4                     	;# 
  4145  0FE5                     	;# 
  4146  0FE6                     	;# 
  4147  0FE7                     	;# 
  4148  0FE8                     	;# 
  4149  0FE9                     	;# 
  4150  0FEA                     	;# 
  4151  0FEB                     	;# 
  4152  0FED                     	;# 
  4153  0FEE                     	;# 
  4154  0FEF                     	;# 
  4155  0000                     	;# 
  4156  0001                     	;# 
  4157  0002                     	;# 
  4158  0003                     	;# 
  4159  0004                     	;# 
  4160  0005                     	;# 
  4161  0006                     	;# 
  4162  0007                     	;# 
  4163  0008                     	;# 
  4164  0009                     	;# 
  4165  000A                     	;# 
  4166  000B                     	;# 
  4167  000C                     	;# 
  4168  000D                     	;# 
  4169  000E                     	;# 
  4170  000F                     	;# 
  4171  0010                     	;# 
  4172  0011                     	;# 
  4173  0012                     	;# 
  4174  0013                     	;# 
  4175  0014                     	;# 
  4176  0015                     	;# 
  4177  0016                     	;# 
  4178  0016                     	;# 
  4179  0017                     	;# 
  4180  0018                     	;# 
  4181  0019                     	;# 
  4182  001A                     	;# 
  4183  001B                     	;# 
  4184  001C                     	;# 
  4185  008C                     	;# 
  4186  008D                     	;# 
  4187  008E                     	;# 
  4188  008F                     	;# 
  4189  0090                     	;# 
  4190  0091                     	;# 
  4191  0092                     	;# 
  4192  0093                     	;# 
  4193  0094                     	;# 
  4194  0095                     	;# 
  4195  0096                     	;# 
  4196  0097                     	;# 
  4197  0098                     	;# 
  4198  0099                     	;# 
  4199  009A                     	;# 
  4200  009B                     	;# 
  4201  009B                     	;# 
  4202  009C                     	;# 
  4203  009D                     	;# 
  4204  009E                     	;# 
  4205  009F                     	;# 
  4206  010C                     	;# 
  4207  010D                     	;# 
  4208  010E                     	;# 
  4209  010F                     	;# 
  4210  0110                     	;# 
  4211  0111                     	;# 
  4212  0112                     	;# 
  4213  0113                     	;# 
  4214  0114                     	;# 
  4215  0115                     	;# 
  4216  0116                     	;# 
  4217  0117                     	;# 
  4218  0118                     	;# 
  4219  0119                     	;# 
  4220  011A                     	;# 
  4221  011B                     	;# 
  4222  011C                     	;# 
  4223  011D                     	;# 
  4224  011D                     	;# 
  4225  011D                     	;# 
  4226  011E                     	;# 
  4227  011F                     	;# 
  4228  018C                     	;# 
  4229  018D                     	;# 
  4230  018E                     	;# 
  4231  018F                     	;# 
  4232  0190                     	;# 
  4233  0191                     	;# 
  4234  0191                     	;# 
  4235  0192                     	;# 
  4236  0193                     	;# 
  4237  0193                     	;# 
  4238  0193                     	;# 
  4239  0194                     	;# 
  4240  0195                     	;# 
  4241  0196                     	;# 
  4242  0197                     	;# 
  4243  0199                     	;# 
  4244  0199                     	;# 
  4245  0199                     	;# 
  4246  019A                     	;# 
  4247  019A                     	;# 
  4248  019A                     	;# 
  4249  019B                     	;# 
  4250  019B                     	;# 
  4251  019B                     	;# 
  4252  019B                     	;# 
  4253  019B                     	;# 
  4254  019C                     	;# 
  4255  019C                     	;# 
  4256  019C                     	;# 
  4257  019D                     	;# 
  4258  019D                     	;# 
  4259  019D                     	;# 
  4260  019E                     	;# 
  4261  019E                     	;# 
  4262  019E                     	;# 
  4263  019F                     	;# 
  4264  019F                     	;# 
  4265  019F                     	;# 
  4266  019F                     	;# 
  4267  019F                     	;# 
  4268  020C                     	;# 
  4269  020D                     	;# 
  4270  020E                     	;# 
  4271  020F                     	;# 
  4272  0210                     	;# 
  4273  0211                     	;# 
  4274  0211                     	;# 
  4275  0212                     	;# 
  4276  0212                     	;# 
  4277  0213                     	;# 
  4278  0213                     	;# 
  4279  0214                     	;# 
  4280  0214                     	;# 
  4281  0215                     	;# 
  4282  0215                     	;# 
  4283  0215                     	;# 
  4284  0215                     	;# 
  4285  0216                     	;# 
  4286  0216                     	;# 
  4287  0217                     	;# 
  4288  0217                     	;# 
  4289  028C                     	;# 
  4290  028D                     	;# 
  4291  028E                     	;# 
  4292  028F                     	;# 
  4293  0290                     	;# 
  4294  0291                     	;# 
  4295  0291                     	;# 
  4296  0292                     	;# 
  4297  0293                     	;# 
  4298  0298                     	;# 
  4299  0298                     	;# 
  4300  0299                     	;# 
  4301  029A                     	;# 
  4302  030C                     	;# 
  4303  030D                     	;# 
  4304  030E                     	;# 
  4305  030F                     	;# 
  4306  0310                     	;# 
  4307  0311                     	;# 
  4308  0311                     	;# 
  4309  0312                     	;# 
  4310  0313                     	;# 
  4311  038C                     	;# 
  4312  038D                     	;# 
  4313  038E                     	;# 
  4314  038F                     	;# 
  4315  0390                     	;# 
  4316  0391                     	;# 
  4317  0392                     	;# 
  4318  0393                     	;# 
  4319  0394                     	;# 
  4320  0395                     	;# 
  4321  0396                     	;# 
  4322  0397                     	;# 
  4323  0398                     	;# 
  4324  0399                     	;# 
  4325  039D                     	;# 
  4326  039E                     	;# 
  4327  039F                     	;# 
  4328  0511                     	;# 
  4329  0513                     	;# 
  4330  0515                     	;# 
  4331  051A                     	;# 
  4332  0591                     	;# 
  4333  0592                     	;# 
  4334  0592                     	;# 
  4335  0593                     	;# 
  4336  0594                     	;# 
  4337  0594                     	;# 
  4338  0595                     	;# 
  4339  0596                     	;# 
  4340  0596                     	;# 
  4341  0E91                     	;# 
  4342  0E92                     	;# 
  4343  0E93                     	;# 
  4344  0E94                     	;# 
  4345  0E95                     	;# 
  4346  0E96                     	;# 
  4347  0E97                     	;# 
  4348  0E98                     	;# 
  4349  0E99                     	;# 
  4350  0E9A                     	;# 
  4351  0E9B                     	;# 
  4352  0E9C                     	;# 
  4353  0E9D                     	;# 
  4354  0E9E                     	;# 
  4355  0E9F                     	;# 
  4356  0EA0                     	;# 
  4357  0EA1                     	;# 
  4358  0EA1                     	;# 
  4359  0EA2                     	;# 
  4360  0EA3                     	;# 
  4361  0EA3                     	;# 
  4362  0EA4                     	;# 
  4363  0EA5                     	;# 
  4364  0EA5                     	;# 
  4365  0EA6                     	;# 
  4366  0EA7                     	;# 
  4367  0EA7                     	;# 
  4368  0EA8                     	;# 
  4369  0EA9                     	;# 
  4370  0EAA                     	;# 
  4371  0EAB                     	;# 
  4372  0EAC                     	;# 
  4373  0EAD                     	;# 
  4374  0EAE                     	;# 
  4375  0EAF                     	;# 
  4376  0EB1                     	;# 
  4377  0EB2                     	;# 
  4378  0EB3                     	;# 
  4379  0EB4                     	;# 
  4380  0EB5                     	;# 
  4381  0EB6                     	;# 
  4382  0EB7                     	;# 
  4383  0EB8                     	;# 
  4384  0EB9                     	;# 
  4385  0EBA                     	;# 
  4386  0EBB                     	;# 
  4387  0EBC                     	;# 
  4388  0EBD                     	;# 
  4389  0EBE                     	;# 
  4390  0EBF                     	;# 
  4391  0EC0                     	;# 
  4392  0EC1                     	;# 
  4393  0EC1                     	;# 
  4394  0EC2                     	;# 
  4395  0EC3                     	;# 
  4396  0EC3                     	;# 
  4397  0EC4                     	;# 
  4398  0EC5                     	;# 
  4399  0EC5                     	;# 
  4400  0EC6                     	;# 
  4401  0EC7                     	;# 
  4402  0EC7                     	;# 
  4403  0EC8                     	;# 
  4404  0EC9                     	;# 
  4405  0ECA                     	;# 
  4406  0ECB                     	;# 
  4407  0ECC                     	;# 
  4408  0ECD                     	;# 
  4409  0ECE                     	;# 
  4410  0ECF                     	;# 
  4411  0ED1                     	;# 
  4412  0ED2                     	;# 
  4413  0ED3                     	;# 
  4414  0ED4                     	;# 
  4415  0ED5                     	;# 
  4416  0ED6                     	;# 
  4417  0ED7                     	;# 
  4418  0ED8                     	;# 
  4419  0ED9                     	;# 
  4420  0EDA                     	;# 
  4421  0EDB                     	;# 
  4422  0EDC                     	;# 
  4423  0EDD                     	;# 
  4424  0EDE                     	;# 
  4425  0EDF                     	;# 
  4426  0EE0                     	;# 
  4427  0EE1                     	;# 
  4428  0EE1                     	;# 
  4429  0EE2                     	;# 
  4430  0EE3                     	;# 
  4431  0EE3                     	;# 
  4432  0EE4                     	;# 
  4433  0EE5                     	;# 
  4434  0EE5                     	;# 
  4435  0EE6                     	;# 
  4436  0EE7                     	;# 
  4437  0EE7                     	;# 
  4438  0EE8                     	;# 
  4439  0EE9                     	;# 
  4440  0EEA                     	;# 
  4441  0EEB                     	;# 
  4442  0EEC                     	;# 
  4443  0EED                     	;# 
  4444  0EEE                     	;# 
  4445  0EEF                     	;# 
  4446  0F11                     	;# 
  4447  0F12                     	;# 
  4448  0F13                     	;# 
  4449  0F14                     	;# 
  4450  0F15                     	;# 
  4451  0F16                     	;# 
  4452  0F17                     	;# 
  4453  0F18                     	;# 
  4454  0F19                     	;# 
  4455  0F1A                     	;# 
  4456  0F1B                     	;# 
  4457  0F1C                     	;# 
  4458  0F1D                     	;# 
  4459  0F1E                     	;# 
  4460  0F1F                     	;# 
  4461  0F20                     	;# 
  4462  0F21                     	;# 
  4463  0F21                     	;# 
  4464  0F22                     	;# 
  4465  0F23                     	;# 
  4466  0F23                     	;# 
  4467  0F24                     	;# 
  4468  0F25                     	;# 
  4469  0F25                     	;# 
  4470  0F26                     	;# 
  4471  0F27                     	;# 
  4472  0F27                     	;# 
  4473  0F28                     	;# 
  4474  0F29                     	;# 
  4475  0F2A                     	;# 
  4476  0F2B                     	;# 
  4477  0F2C                     	;# 
  4478  0F2D                     	;# 
  4479  0F2E                     	;# 
  4480  0F2F                     	;# 
  4481  0FE4                     	;# 
  4482  0FE5                     	;# 
  4483  0FE6                     	;# 
  4484  0FE7                     	;# 
  4485  0FE8                     	;# 
  4486  0FE9                     	;# 
  4487  0FEA                     	;# 
  4488  0FEB                     	;# 
  4489  0FED                     	;# 
  4490  0FEE                     	;# 
  4491  0FEF                     	;# 
  4492  0000                     	;# 
  4493  0001                     	;# 
  4494  0002                     	;# 
  4495  0003                     	;# 
  4496  0004                     	;# 
  4497  0005                     	;# 
  4498  0006                     	;# 
  4499  0007                     	;# 
  4500  0008                     	;# 
  4501  0009                     	;# 
  4502  000A                     	;# 
  4503  000B                     	;# 
  4504  000C                     	;# 
  4505  000D                     	;# 
  4506  000E                     	;# 
  4507  000F                     	;# 
  4508  0010                     	;# 
  4509  0011                     	;# 
  4510  0012                     	;# 
  4511  0013                     	;# 
  4512  0014                     	;# 
  4513  0015                     	;# 
  4514  0016                     	;# 
  4515  0016                     	;# 
  4516  0017                     	;# 
  4517  0018                     	;# 
  4518  0019                     	;# 
  4519  001A                     	;# 
  4520  001B                     	;# 
  4521  001C                     	;# 
  4522  008C                     	;# 
  4523  008D                     	;# 
  4524  008E                     	;# 
  4525  008F                     	;# 
  4526  0090                     	;# 
  4527  0091                     	;# 
  4528  0092                     	;# 
  4529  0093                     	;# 
  4530  0094                     	;# 
  4531  0095                     	;# 
  4532  0096                     	;# 
  4533  0097                     	;# 
  4534  0098                     	;# 
  4535  0099                     	;# 
  4536  009A                     	;# 
  4537  009B                     	;# 
  4538  009B                     	;# 
  4539  009C                     	;# 
  4540  009D                     	;# 
  4541  009E                     	;# 
  4542  009F                     	;# 
  4543  010C                     	;# 
  4544  010D                     	;# 
  4545  010E                     	;# 
  4546  010F                     	;# 
  4547  0110                     	;# 
  4548  0111                     	;# 
  4549  0112                     	;# 
  4550  0113                     	;# 
  4551  0114                     	;# 
  4552  0115                     	;# 
  4553  0116                     	;# 
  4554  0117                     	;# 
  4555  0118                     	;# 
  4556  0119                     	;# 
  4557  011A                     	;# 
  4558  011B                     	;# 
  4559  011C                     	;# 
  4560  011D                     	;# 
  4561  011D                     	;# 
  4562  011D                     	;# 
  4563  011E                     	;# 
  4564  011F                     	;# 
  4565  018C                     	;# 
  4566  018D                     	;# 
  4567  018E                     	;# 
  4568  018F                     	;# 
  4569  0190                     	;# 
  4570  0191                     	;# 
  4571  0191                     	;# 
  4572  0192                     	;# 
  4573  0193                     	;# 
  4574  0193                     	;# 
  4575  0193                     	;# 
  4576  0194                     	;# 
  4577  0195                     	;# 
  4578  0196                     	;# 
  4579  0197                     	;# 
  4580  0199                     	;# 
  4581  0199                     	;# 
  4582  0199                     	;# 
  4583  019A                     	;# 
  4584  019A                     	;# 
  4585  019A                     	;# 
  4586  019B                     	;# 
  4587  019B                     	;# 
  4588  019B                     	;# 
  4589  019B                     	;# 
  4590  019B                     	;# 
  4591  019C                     	;# 
  4592  019C                     	;# 
  4593  019C                     	;# 
  4594  019D                     	;# 
  4595  019D                     	;# 
  4596  019D                     	;# 
  4597  019E                     	;# 
  4598  019E                     	;# 
  4599  019E                     	;# 
  4600  019F                     	;# 
  4601  019F                     	;# 
  4602  019F                     	;# 
  4603  019F                     	;# 
  4604  019F                     	;# 
  4605  020C                     	;# 
  4606  020D                     	;# 
  4607  020E                     	;# 
  4608  020F                     	;# 
  4609  0210                     	;# 
  4610  0211                     	;# 
  4611  0211                     	;# 
  4612  0212                     	;# 
  4613  0212                     	;# 
  4614  0213                     	;# 
  4615  0213                     	;# 
  4616  0214                     	;# 
  4617  0214                     	;# 
  4618  0215                     	;# 
  4619  0215                     	;# 
  4620  0215                     	;# 
  4621  0215                     	;# 
  4622  0216                     	;# 
  4623  0216                     	;# 
  4624  0217                     	;# 
  4625  0217                     	;# 
  4626  028C                     	;# 
  4627  028D                     	;# 
  4628  028E                     	;# 
  4629  028F                     	;# 
  4630  0290                     	;# 
  4631  0291                     	;# 
  4632  0291                     	;# 
  4633  0292                     	;# 
  4634  0293                     	;# 
  4635  0298                     	;# 
  4636  0298                     	;# 
  4637  0299                     	;# 
  4638  029A                     	;# 
  4639  030C                     	;# 
  4640  030D                     	;# 
  4641  030E                     	;# 
  4642  030F                     	;# 
  4643  0310                     	;# 
  4644  0311                     	;# 
  4645  0311                     	;# 
  4646  0312                     	;# 
  4647  0313                     	;# 
  4648  038C                     	;# 
  4649  038D                     	;# 
  4650  038E                     	;# 
  4651  038F                     	;# 
  4652  0390                     	;# 
  4653  0391                     	;# 
  4654  0392                     	;# 
  4655  0393                     	;# 
  4656  0394                     	;# 
  4657  0395                     	;# 
  4658  0396                     	;# 
  4659  0397                     	;# 
  4660  0398                     	;# 
  4661  0399                     	;# 
  4662  039D                     	;# 
  4663  039E                     	;# 
  4664  039F                     	;# 
  4665  0511                     	;# 
  4666  0513                     	;# 
  4667  0515                     	;# 
  4668  051A                     	;# 
  4669  0591                     	;# 
  4670  0592                     	;# 
  4671  0592                     	;# 
  4672  0593                     	;# 
  4673  0594                     	;# 
  4674  0594                     	;# 
  4675  0595                     	;# 
  4676  0596                     	;# 
  4677  0596                     	;# 
  4678  0E91                     	;# 
  4679  0E92                     	;# 
  4680  0E93                     	;# 
  4681  0E94                     	;# 
  4682  0E95                     	;# 
  4683  0E96                     	;# 
  4684  0E97                     	;# 
  4685  0E98                     	;# 
  4686  0E99                     	;# 
  4687  0E9A                     	;# 
  4688  0E9B                     	;# 
  4689  0E9C                     	;# 
  4690  0E9D                     	;# 
  4691  0E9E                     	;# 
  4692  0E9F                     	;# 
  4693  0EA0                     	;# 
  4694  0EA1                     	;# 
  4695  0EA1                     	;# 
  4696  0EA2                     	;# 
  4697  0EA3                     	;# 
  4698  0EA3                     	;# 
  4699  0EA4                     	;# 
  4700  0EA5                     	;# 
  4701  0EA5                     	;# 
  4702  0EA6                     	;# 
  4703  0EA7                     	;# 
  4704  0EA7                     	;# 
  4705  0EA8                     	;# 
  4706  0EA9                     	;# 
  4707  0EAA                     	;# 
  4708  0EAB                     	;# 
  4709  0EAC                     	;# 
  4710  0EAD                     	;# 
  4711  0EAE                     	;# 
  4712  0EAF                     	;# 
  4713  0EB1                     	;# 
  4714  0EB2                     	;# 
  4715  0EB3                     	;# 
  4716  0EB4                     	;# 
  4717  0EB5                     	;# 
  4718  0EB6                     	;# 
  4719  0EB7                     	;# 
  4720  0EB8                     	;# 
  4721  0EB9                     	;# 
  4722  0EBA                     	;# 
  4723  0EBB                     	;# 
  4724  0EBC                     	;# 
  4725  0EBD                     	;# 
  4726  0EBE                     	;# 
  4727  0EBF                     	;# 
  4728  0EC0                     	;# 
  4729  0EC1                     	;# 
  4730  0EC1                     	;# 
  4731  0EC2                     	;# 
  4732  0EC3                     	;# 
  4733  0EC3                     	;# 
  4734  0EC4                     	;# 
  4735  0EC5                     	;# 
  4736  0EC5                     	;# 
  4737  0EC6                     	;# 
  4738  0EC7                     	;# 
  4739  0EC7                     	;# 
  4740  0EC8                     	;# 
  4741  0EC9                     	;# 
  4742  0ECA                     	;# 
  4743  0ECB                     	;# 
  4744  0ECC                     	;# 
  4745  0ECD                     	;# 
  4746  0ECE                     	;# 
  4747  0ECF                     	;# 
  4748  0ED1                     	;# 
  4749  0ED2                     	;# 
  4750  0ED3                     	;# 
  4751  0ED4                     	;# 
  4752  0ED5                     	;# 
  4753  0ED6                     	;# 
  4754  0ED7                     	;# 
  4755  0ED8                     	;# 
  4756  0ED9                     	;# 
  4757  0EDA                     	;# 
  4758  0EDB                     	;# 
  4759  0EDC                     	;# 
  4760  0EDD                     	;# 
  4761  0EDE                     	;# 
  4762  0EDF                     	;# 
  4763  0EE0                     	;# 
  4764  0EE1                     	;# 
  4765  0EE1                     	;# 
  4766  0EE2                     	;# 
  4767  0EE3                     	;# 
  4768  0EE3                     	;# 
  4769  0EE4                     	;# 
  4770  0EE5                     	;# 
  4771  0EE5                     	;# 
  4772  0EE6                     	;# 
  4773  0EE7                     	;# 
  4774  0EE7                     	;# 
  4775  0EE8                     	;# 
  4776  0EE9                     	;# 
  4777  0EEA                     	;# 
  4778  0EEB                     	;# 
  4779  0EEC                     	;# 
  4780  0EED                     	;# 
  4781  0EEE                     	;# 
  4782  0EEF                     	;# 
  4783  0F11                     	;# 
  4784  0F12                     	;# 
  4785  0F13                     	;# 
  4786  0F14                     	;# 
  4787  0F15                     	;# 
  4788  0F16                     	;# 
  4789  0F17                     	;# 
  4790  0F18                     	;# 
  4791  0F19                     	;# 
  4792  0F1A                     	;# 
  4793  0F1B                     	;# 
  4794  0F1C                     	;# 
  4795  0F1D                     	;# 
  4796  0F1E                     	;# 
  4797  0F1F                     	;# 
  4798  0F20                     	;# 
  4799  0F21                     	;# 
  4800  0F21                     	;# 
  4801  0F22                     	;# 
  4802  0F23                     	;# 
  4803  0F23                     	;# 
  4804  0F24                     	;# 
  4805  0F25                     	;# 
  4806  0F25                     	;# 
  4807  0F26                     	;# 
  4808  0F27                     	;# 
  4809  0F27                     	;# 
  4810  0F28                     	;# 
  4811  0F29                     	;# 
  4812  0F2A                     	;# 
  4813  0F2B                     	;# 
  4814  0F2C                     	;# 
  4815  0F2D                     	;# 
  4816  0F2E                     	;# 
  4817  0F2F                     	;# 
  4818  0FE4                     	;# 
  4819  0FE5                     	;# 
  4820  0FE6                     	;# 
  4821  0FE7                     	;# 
  4822  0FE8                     	;# 
  4823  0FE9                     	;# 
  4824  0FEA                     	;# 
  4825  0FEB                     	;# 
  4826  0FED                     	;# 
  4827  0FEE                     	;# 
  4828  0FEF                     	;# 
  4829                           
  4830                           	psect	idataBANK1
  4831  0003                     __pidataBANK1:	
  4832                           
  4833                           ;initializer for _exINT_Mode
  4834  0003  3480               	retlw	128
  4835                           
  4836                           	psect	idataBANK2
  4837  1949                     __pidataBANK2:	
  4838                           
  4839                           ;initializer for _NUL_SecCount
  4840  1949  342C               	retlw	44
  4841  194A  3401               	retlw	1
  4842  194B  3400               	retlw	0
  4843  194C  3400               	retlw	0
  4844                           
  4845                           ;initializer for _NUL_SecCount_offset
  4846  194D  342C               	retlw	44
  4847  194E  3401               	retlw	1
  4848  194F  3400               	retlw	0
  4849  1950  3400               	retlw	0
  4850                           
  4851                           ;initializer for _ADC_CH
  4852  1951  340C               	retlw	12
  4853  1952  340B               	retlw	11
  4854  1953  3400               	retlw	0
  4855                           
  4856                           	psect	idataBANK3
  4857  1AE6                     __pidataBANK3:	
  4858                           
  4859                           ;initializer for I2C_TEST_02@F8059
  4860  1AE6  3408               	retlw	8
  4861  1AE7  3409               	retlw	9
  4862  1AE8  340A               	retlw	10
  4863  1AE9  340B               	retlw	11
  4864  1AEA  340C               	retlw	12
  4865  1AEB  340D               	retlw	13
  4866  1AEC  340E               	retlw	14
  4867  1AED  340F               	retlw	15
  4868  1AEE  3400               	retlw	0
  4869  1AEF  3401               	retlw	1
  4870  1AF0  3402               	retlw	2
  4871  1AF1  3403               	retlw	3
  4872  1AF2  3404               	retlw	4
  4873  1AF3  3405               	retlw	5
  4874  1AF4  3406               	retlw	6
  4875  1AF5  3407               	retlw	7
  4876                           
  4877                           ;initializer for RUN_MESURE@F7902
  4878  1AF6  3400               	retlw	0
  4879  1AF7  3401               	retlw	1
  4880  1AF8  3400               	retlw	0
  4881  1AF9  3400               	retlw	0
  4882  1AFA  3400               	retlw	0
  4883  1AFB  3401               	retlw	1
  4884  1AFC  3400               	retlw	0
  4885  1AFD  3400               	retlw	0
  4886  1AFE  3400               	retlw	0
  4887  1AFF  3401               	retlw	1
  4888  1B00  3400               	retlw	0
  4889  1B01  3400               	retlw	0
  4890  1B02  3401               	retlw	1
  4891  1B03  3401               	retlw	1
  4892  1B04  3400               	retlw	0
  4893                           
  4894                           	psect	idataBANK4
  4895  1C83                     __pidataBANK4:	
  4896                           
  4897                           ;initializer for Convert_YMD@F7967
  4898  1C83  341F               	retlw	31
  4899  1C84  3400               	retlw	0
  4900  1C85  341C               	retlw	28
  4901  1C86  3400               	retlw	0
  4902  1C87  341F               	retlw	31
  4903  1C88  3400               	retlw	0
  4904  1C89  341E               	retlw	30
  4905  1C8A  3400               	retlw	0
  4906  1C8B  341F               	retlw	31
  4907  1C8C  3400               	retlw	0
  4908  1C8D  341E               	retlw	30
  4909  1C8E  3400               	retlw	0
  4910  1C8F  341F               	retlw	31
  4911  1C90  3400               	retlw	0
  4912  1C91  341F               	retlw	31
  4913  1C92  3400               	retlw	0
  4914  1C93  341E               	retlw	30
  4915  1C94  3400               	retlw	0
  4916  1C95  341F               	retlw	31
  4917  1C96  3400               	retlw	0
  4918  1C97  341E               	retlw	30
  4919  1C98  3400               	retlw	0
  4920  1C99  341F               	retlw	31
  4921  1C9A  3400               	retlw	0
  4922                           
  4923                           ;initializer for Covert_Month_2_Day@F7991
  4924  1C9B  341F               	retlw	31
  4925  1C9C  3400               	retlw	0
  4926  1C9D  341C               	retlw	28
  4927  1C9E  3400               	retlw	0
  4928  1C9F  341F               	retlw	31
  4929  1CA0  3400               	retlw	0
  4930  1CA1  341E               	retlw	30
  4931  1CA2  3400               	retlw	0
  4932  1CA3  341F               	retlw	31
  4933  1CA4  3400               	retlw	0
  4934  1CA5  341E               	retlw	30
  4935  1CA6  3400               	retlw	0
  4936  1CA7  341F               	retlw	31
  4937  1CA8  3400               	retlw	0
  4938  1CA9  341F               	retlw	31
  4939  1CAA  3400               	retlw	0
  4940  1CAB  341E               	retlw	30
  4941  1CAC  3400               	retlw	0
  4942  1CAD  341F               	retlw	31
  4943  1CAE  3400               	retlw	0
  4944  1CAF  341E               	retlw	30
  4945  1CB0  3400               	retlw	0
  4946  1CB1  341F               	retlw	31
  4947  1CB2  3400               	retlw	0
  4948                           
  4949                           	psect	idataBANK5
  4950  1A21                     __pidataBANK5:	
  4951                           
  4952                           ;initializer for UPLOAD_MESURE_REC@F7910
  4953  1A21  3401               	retlw	1
  4954  1A22  3460               	retlw	96
  4955  1A23  3417               	retlw	23
  4956  1A24  3420               	retlw	32
  4957  1A25  3416               	retlw	22
  4958  1A26  3401               	retlw	1
  4959  1A27  3426               	retlw	38
  4960  1A28  3412               	retlw	18
  4961  1A29  3434               	retlw	52
  4962  1A2A  3456               	retlw	86
  4963  1A2B  3401               	retlw	1
  4964  1A2C  3411               	retlw	17
  4965  1A2D  3402               	retlw	2
  4966  1A2E  3422               	retlw	34
  4967  1A2F  3403               	retlw	3
  4968  1A30  3433               	retlw	51
  4969  1A31  3404               	retlw	4
  4970  1A32  3444               	retlw	68
  4971  1A33  3405               	retlw	5
  4972  1A34  3455               	retlw	85
  4973  1A35  3406               	retlw	6
  4974  1A36  3466               	retlw	102
  4975  1A37  3407               	retlw	7
  4976  1A38  3477               	retlw	119
  4977  1A39  3408               	retlw	8
  4978  1A3A  3488               	retlw	136
  4979                           
  4980                           	psect	idataBANK6
  4981  12FA                     __pidataBANK6:	
  4982                           
  4983                           ;initializer for RUN_MESURE@F7899
  4984  12FA  3401               	retlw	1
  4985  12FB  3401               	retlw	1
  4986  12FC  3400               	retlw	0
  4987  12FD  3400               	retlw	0
  4988  12FE  3400               	retlw	0
  4989  12FF  3400               	retlw	0
  4990  1300  3400               	retlw	0
  4991  1301  3400               	retlw	0
  4992  1302  3401               	retlw	1
  4993  1303  3401               	retlw	1
  4994  1304  3400               	retlw	0
  4995  1305  3401               	retlw	1
  4996  1306  3400               	retlw	0
  4997  1307  3400               	retlw	0
  4998  1308  3400               	retlw	0
  4999  1309  3400               	retlw	0
  5000  130A  3400               	retlw	0
  5001  130B  3401               	retlw	1
  5002  130C  3401               	retlw	1
  5003  130D  3400               	retlw	0
  5004  130E  3400               	retlw	0
  5005  130F  3401               	retlw	1
  5006  1310  3400               	retlw	0
  5007  1311  3400               	retlw	0
  5008  1312  3400               	retlw	0
  5009  1313  3400               	retlw	0
  5010  1314  3401               	retlw	1
  5011  1315  3401               	retlw	1
  5012  1316  3400               	retlw	0
  5013  1317  3400               	retlw	0
  5014  1318  3400               	retlw	0
  5015  1319  3401               	retlw	1
  5016  131A  3400               	retlw	0
  5017  131B  3400               	retlw	0
  5018  131C  3400               	retlw	0
  5019  131D  3401               	retlw	1
  5020  131E  3401               	retlw	1
  5021  131F  3400               	retlw	0
  5022  1320  3400               	retlw	0
  5023  1321  3400               	retlw	0
  5024  1322  3400               	retlw	0
  5025  1323  3401               	retlw	1
  5026  1324  3400               	retlw	0
  5027  1325  3400               	retlw	0
  5028  1326  3401               	retlw	1
  5029  1327  3400               	retlw	0
  5030  1328  3400               	retlw	0
  5031  1329  3400               	retlw	0
  5032  132A  3400               	retlw	0
  5033  132B  3400               	retlw	0
  5034  132C  3400               	retlw	0
  5035  132D  3401               	retlw	1
  5036  132E  3400               	retlw	0
  5037  132F  3400               	retlw	0
  5038  1330  3400               	retlw	0
  5039  1331  3400               	retlw	0
  5040  1332  3400               	retlw	0
  5041  1333  3400               	retlw	0
  5042  1334  3400               	retlw	0
  5043  1335  3400               	retlw	0
  5044  1336  3400               	retlw	0
  5045  1337  3401               	retlw	1
  5046  1338  3400               	retlw	0
  5047                           
  5048                           	psect	nvBANK2
  5049  016E                     __pnvBANK2:	
  5050  016E                     _eusartTxBufferRemaining:	
  5051  016E                     	ds	1
  5052  016F                     _timer0ReloadVal:	
  5053  016F                     	ds	1
  5054  000B                     _INTCONbits	set	11
  5055  0011                     _PIR1bits	set	17
  5056  001B                     _PR2	set	27
  5057  001C                     _T2CON	set	28
  5058  001C                     _T2CONbits	set	28
  5059  0015                     _TMR0	set	21
  5060  001A                     _TMR2	set	26
  5061  0073                     _RC3	set	115
  5062  0074                     _RC4	set	116
  5063  007C                     _RD4	set	124
  5064  007D                     _RD5	set	125
  5065  009D                     _ADCON0	set	157
  5066  009D                     _ADCON0bits	set	157
  5067  009E                     _ADCON1	set	158
  5068  009F                     _ADCON2	set	159
  5069  009C                     _ADRESH	set	156
  5070  009B                     _ADRESL	set	155
  5071  0095                     _OPTION_REG	set	149
  5072  0095                     _OPTION_REGbits	set	149
  5073  0099                     _OSCCON	set	153
  5074  009A                     _OSCSTAT	set	154
  5075  0098                     _OSCTUNE	set	152
  5076  0091                     _PIE1bits	set	145
  5077  008C                     _TRISA	set	140
  5078  008D                     _TRISB	set	141
  5079  008E                     _TRISC	set	142
  5080  008F                     _TRISD	set	143
  5081  0090                     _TRISE	set	144
  5082  0473                     _TRISC3	set	1139
  5083  0474                     _TRISC4	set	1140
  5084  047C                     _TRISD4	set	1148
  5085  011D                     _APFCON1	set	285
  5086  011C                     _APFCON2	set	284
  5087  0118                     _DAC1CON0	set	280
  5088  0119                     _DAC1CON1	set	281
  5089  0117                     _FVRCON	set	279
  5090  0117                     _FVRCONbits	set	279
  5091  010C                     _LATA	set	268
  5092  010D                     _LATB	set	269
  5093  010E                     _LATC	set	270
  5094  010F                     _LATD	set	271
  5095  0110                     _LATE	set	272
  5096  0862                     _LATA2	set	2146
  5097  0864                     _LATA4	set	2148
  5098  0866                     _LATA6	set	2150
  5099  0867                     _LATA7	set	2151
  5100  086D                     _LATB5	set	2157
  5101  0870                     _LATC0	set	2160
  5102  0871                     _LATC1	set	2161
  5103  0872                     _LATC2	set	2162
  5104  0873                     _LATC3	set	2163
  5105  0874                     _LATC4	set	2164
  5106  0875                     _LATC5	set	2165
  5107  087B                     _LATD3	set	2171
  5108  087C                     _LATD4	set	2172
  5109  087E                     _LATD6	set	2174
  5110  087F                     _LATD7	set	2175
  5111  0880                     _LATE0	set	2176
  5112  0881                     _LATE1	set	2177
  5113  0882                     _LATE2	set	2178
  5114  018C                     _ANSELA	set	396
  5115  018D                     _ANSELB	set	397
  5116  018E                     _ANSELC	set	398
  5117  018F                     _ANSELD	set	399
  5118  0190                     _ANSELE	set	400
  5119  019F                     _BAUD1CON	set	415
  5120  0192                     _EEADRH	set	402
  5121  0191                     _EEADRL	set	401
  5122  0195                     _EECON1bits	set	405
  5123  0196                     _EECON2	set	406
  5124  0194                     _EEDATH	set	404
  5125  0193                     _EEDATL	set	403
  5126  0199                     _RC1REG	set	409
  5127  019D                     _RC1STA	set	413
  5128  019D                     _RC1STAbits	set	413
  5129  019C                     _SP1BRGH	set	412
  5130  019B                     _SP1BRGL	set	411
  5131  019A                     _TX1REG	set	410
  5132  019E                     _TX1STA	set	414
  5133  0C68                     _ANSB0	set	3176
  5134  020C                     _WPUA	set	524
  5135  020D                     _WPUB	set	525
  5136  020E                     _WPUC	set	526
  5137  020F                     _WPUD	set	527
  5138  0210                     _WPUE	set	528
  5139  0511                     _OPA1CON	set	1297
  5140  0513                     _OPA2CON	set	1299
  5141  0515                     _OPA3CON	set	1301
  5142                           
  5143                           	psect	stringtext
  5144  1000                     __pstringtext:	
  5145  1000                     STR_20:	
  5146  1000  3443               	retlw	67	;'C'
  5147  1001  3448               	retlw	72	;'H'
  5148  1002  3445               	retlw	69	;'E'
  5149  1003  3443               	retlw	67	;'C'
  5150  1004  344B               	retlw	75	;'K'
  5151  1005  3420               	retlw	32	;' '
  5152  1006  3441               	retlw	65	;'A'
  5153  1007  3450               	retlw	80	;'P'
  5154  1008  342C               	retlw	44	;','
  5155  1009  3420               	retlw	32	;' '
  5156  100A  346E               	retlw	110	;'n'
  5157  100B  3465               	retlw	101	;'e'
  5158  100C  3465               	retlw	101	;'e'
  5159  100D  3464               	retlw	100	;'d'
  5160  100E  3420               	retlw	32	;' '
  5161  100F  3477               	retlw	119	;'w'
  5162  1010  3461               	retlw	97	;'a'
  5163  1011  3469               	retlw	105	;'i'
  5164  1012  3474               	retlw	116	;'t'
  5165  1013  3469               	retlw	105	;'i'
  5166  1014  346E               	retlw	110	;'n'
  5167  1015  3467               	retlw	103	;'g'
  5168  1016  3420               	retlw	32	;' '
  5169  1017  3466               	retlw	102	;'f'
  5170  1018  3465               	retlw	101	;'e'
  5171  1019  3465               	retlw	101	;'e'
  5172  101A  3464               	retlw	100	;'d'
  5173  101B  3462               	retlw	98	;'b'
  5174  101C  3461               	retlw	97	;'a'
  5175  101D  3463               	retlw	99	;'c'
  5176  101E  346B               	retlw	107	;'k'
  5177  101F  342E               	retlw	46	;'.'
  5178  1020  342E               	retlw	46	;'.'
  5179  1021  342E               	retlw	46	;'.'
  5180  1022  3424               	retlw	36	;'$'
  5181  1023  3400               	retlw	0
  5182  1024                     STR_23:	
  5183  1024  3452               	retlw	82	;'R'
  5184  1025  3445               	retlw	69	;'E'
  5185  1026  3447               	retlw	71	;'G'
  5186  1027  3449               	retlw	73	;'I'
  5187  1028  3453               	retlw	83	;'S'
  5188  1029  3454               	retlw	84	;'T'
  5189  102A  3445               	retlw	69	;'E'
  5190  102B  3452               	retlw	82	;'R'
  5191  102C  342C               	retlw	44	;','
  5192  102D  3420               	retlw	32	;' '
  5193  102E  346E               	retlw	110	;'n'
  5194  102F  3465               	retlw	101	;'e'
  5195  1030  3465               	retlw	101	;'e'
  5196  1031  3464               	retlw	100	;'d'
  5197  1032  3420               	retlw	32	;' '
  5198  1033  3477               	retlw	119	;'w'
  5199  1034  3461               	retlw	97	;'a'
  5200  1035  3469               	retlw	105	;'i'
  5201  1036  3474               	retlw	116	;'t'
  5202  1037  3469               	retlw	105	;'i'
  5203  1038  346E               	retlw	110	;'n'
  5204  1039  3467               	retlw	103	;'g'
  5205  103A  3420               	retlw	32	;' '
  5206  103B  3466               	retlw	102	;'f'
  5207  103C  3465               	retlw	101	;'e'
  5208  103D  3465               	retlw	101	;'e'
  5209  103E  3464               	retlw	100	;'d'
  5210  103F  3462               	retlw	98	;'b'
  5211  1040  3461               	retlw	97	;'a'
  5212  1041  3463               	retlw	99	;'c'
  5213  1042  346B               	retlw	107	;'k'
  5214  1043  342E               	retlw	46	;'.'
  5215  1044  342E               	retlw	46	;'.'
  5216  1045  342E               	retlw	46	;'.'
  5217  1046  3424               	retlw	36	;'$'
  5218  1047  3400               	retlw	0
  5219  1048                     STR_21:	
  5220  1048  3453               	retlw	83	;'S'
  5221  1049  3445               	retlw	69	;'E'
  5222  104A  3454               	retlw	84	;'T'
  5223  104B  3420               	retlw	32	;' '
  5224  104C  3443               	retlw	67	;'C'
  5225  104D  344E               	retlw	78	;'N'
  5226  104E  3443               	retlw	67	;'C'
  5227  104F  3454               	retlw	84	;'T'
  5228  1050  342C               	retlw	44	;','
  5229  1051  3420               	retlw	32	;' '
  5230  1052  346E               	retlw	110	;'n'
  5231  1053  3465               	retlw	101	;'e'
  5232  1054  3465               	retlw	101	;'e'
  5233  1055  3464               	retlw	100	;'d'
  5234  1056  3420               	retlw	32	;' '
  5235  1057  3477               	retlw	119	;'w'
  5236  1058  3461               	retlw	97	;'a'
  5237  1059  3469               	retlw	105	;'i'
  5238  105A  3474               	retlw	116	;'t'
  5239  105B  3469               	retlw	105	;'i'
  5240  105C  346E               	retlw	110	;'n'
  5241  105D  3467               	retlw	103	;'g'
  5242  105E  3420               	retlw	32	;' '
  5243  105F  3466               	retlw	102	;'f'
  5244  1060  3465               	retlw	101	;'e'
  5245  1061  3465               	retlw	101	;'e'
  5246  1062  3464               	retlw	100	;'d'
  5247  1063  3462               	retlw	98	;'b'
  5248  1064  3461               	retlw	97	;'a'
  5249  1065  3463               	retlw	99	;'c'
  5250  1066  346B               	retlw	107	;'k'
  5251  1067  342E               	retlw	46	;'.'
  5252  1068  342E               	retlw	46	;'.'
  5253  1069  342E               	retlw	46	;'.'
  5254  106A  3424               	retlw	36	;'$'
  5255  106B  3400               	retlw	0
  5256  106C                     STR_24:	
  5257  106C  3441               	retlw	65	;'A'
  5258  106D  3464               	retlw	100	;'d'
  5259  106E  346A               	retlw	106	;'j'
  5260  106F  3475               	retlw	117	;'u'
  5261  1070  3473               	retlw	115	;'s'
  5262  1071  3474               	retlw	116	;'t'
  5263  1072  342C               	retlw	44	;','
  5264  1073  3420               	retlw	32	;' '
  5265  1074  346E               	retlw	110	;'n'
  5266  1075  3465               	retlw	101	;'e'
  5267  1076  3465               	retlw	101	;'e'
  5268  1077  3464               	retlw	100	;'d'
  5269  1078  3420               	retlw	32	;' '
  5270  1079  3477               	retlw	119	;'w'
  5271  107A  3461               	retlw	97	;'a'
  5272  107B  3469               	retlw	105	;'i'
  5273  107C  3474               	retlw	116	;'t'
  5274  107D  3469               	retlw	105	;'i'
  5275  107E  346E               	retlw	110	;'n'
  5276  107F  3467               	retlw	103	;'g'
  5277  1080  3420               	retlw	32	;' '
  5278  1081  3466               	retlw	102	;'f'
  5279  1082  3465               	retlw	101	;'e'
  5280  1083  3465               	retlw	101	;'e'
  5281  1084  3464               	retlw	100	;'d'
  5282  1085  3462               	retlw	98	;'b'
  5283  1086  3461               	retlw	97	;'a'
  5284  1087  3463               	retlw	99	;'c'
  5285  1088  346B               	retlw	107	;'k'
  5286  1089  342E               	retlw	46	;'.'
  5287  108A  342E               	retlw	46	;'.'
  5288  108B  342E               	retlw	46	;'.'
  5289  108C  3424               	retlw	36	;'$'
  5290  108D  3400               	retlw	0
  5291  108E                     STR_29:	
  5292  108E  3454               	retlw	84	;'T'
  5293  108F  3465               	retlw	101	;'e'
  5294  1090  3473               	retlw	115	;'s'
  5295  1091  3474               	retlw	116	;'t'
  5296  1092  3420               	retlw	32	;' '
  5297  1093  3449               	retlw	73	;'I'
  5298  1094  3432               	retlw	50	;'2'
  5299  1095  3443               	retlw	67	;'C'
  5300  1096  3420               	retlw	32	;' '
  5301  1097  3445               	retlw	69	;'E'
  5302  1098  3445               	retlw	69	;'E'
  5303  1099  3450               	retlw	80	;'P'
  5304  109A  3452               	retlw	82	;'R'
  5305  109B  344F               	retlw	79	;'O'
  5306  109C  344D               	retlw	77	;'M'
  5307  109D  3420               	retlw	32	;' '
  5308  109E  3457               	retlw	87	;'W'
  5309  109F  3472               	retlw	114	;'r'
  5310  10A0  3469               	retlw	105	;'i'
  5311  10A1  3474               	retlw	116	;'t'
  5312  10A2  3465               	retlw	101	;'e'
  5313  10A3  3420               	retlw	32	;' '
  5314  10A4  3452               	retlw	82	;'R'
  5315  10A5  3465               	retlw	101	;'e'
  5316  10A6  3461               	retlw	97	;'a'
  5317  10A7  3464               	retlw	100	;'d'
  5318  10A8  342E               	retlw	46	;'.'
  5319  10A9  342E               	retlw	46	;'.'
  5320  10AA  342E               	retlw	46	;'.'
  5321  10AB  3420               	retlw	32	;' '
  5322  10AC  3424               	retlw	36	;'$'
  5323  10AD  3400               	retlw	0
  5324  10AE                     STR_40:	
  5325  10AE  3441               	retlw	65	;'A'
  5326  10AF  346B               	retlw	107	;'k'
  5327  10B0  3475               	retlw	117	;'u'
  5328  10B1  3462               	retlw	98	;'b'
  5329  10B2  3469               	retlw	105	;'i'
  5330  10B3  3463               	retlw	99	;'c'
  5331  10B4  3420               	retlw	32	;' '
  5332  10B5  3453               	retlw	83	;'S'
  5333  10B6  3479               	retlw	121	;'y'
  5334  10B7  3473               	retlw	115	;'s'
  5335  10B8  3474               	retlw	116	;'t'
  5336  10B9  3465               	retlw	101	;'e'
  5337  10BA  346D               	retlw	109	;'m'
  5338  10BB  3420               	retlw	32	;' '
  5339  10BC  3456               	retlw	86	;'V'
  5340  10BD  3465               	retlw	101	;'e'
  5341  10BE  3472               	retlw	114	;'r'
  5342  10BF  3473               	retlw	115	;'s'
  5343  10C0  3469               	retlw	105	;'i'
  5344  10C1  346F               	retlw	111	;'o'
  5345  10C2  346E               	retlw	110	;'n'
  5346  10C3  343A               	retlw	58	;':'
  5347  10C4  3420               	retlw	32	;' '
  5348  10C5  3431               	retlw	49	;'1'
  5349  10C6  342E               	retlw	46	;'.'
  5350  10C7  3431               	retlw	49	;'1'
  5351  10C8  3430               	retlw	48	;'0'
  5352  10C9  3424               	retlw	36	;'$'
  5353  10CA  3400               	retlw	0
  5354  10CB                     STR_5:	
  5355  10CB  3443               	retlw	67	;'C'
  5356  10CC  3468               	retlw	104	;'h'
  5357  10CD  3465               	retlw	101	;'e'
  5358  10CE  3463               	retlw	99	;'c'
  5359  10CF  346B               	retlw	107	;'k'
  5360  10D0  3420               	retlw	32	;' '
  5361  10D1  3446               	retlw	70	;'F'
  5362  10D2  3469               	retlw	105	;'i'
  5363  10D3  3472               	retlw	114	;'r'
  5364  10D4  3473               	retlw	115	;'s'
  5365  10D5  3474               	retlw	116	;'t'
  5366  10D6  3420               	retlw	32	;' '
  5367  10D7  3474               	retlw	116	;'t'
  5368  10D8  3469               	retlw	105	;'i'
  5369  10D9  346D               	retlw	109	;'m'
  5370  10DA  3465               	retlw	101	;'e'
  5371  10DB  3420               	retlw	32	;' '
  5372  10DC  3441               	retlw	65	;'A'
  5373  10DD  3444               	retlw	68	;'D'
  5374  10DE  344F               	retlw	79	;'O'
  5375  10DF  3420               	retlw	32	;' '
  5376  10E0  3454               	retlw	84	;'T'
  5377  10E1  3445               	retlw	69	;'E'
  5378  10E2  3453               	retlw	83	;'S'
  5379  10E3  3454               	retlw	84	;'T'
  5380  10E4  3424               	retlw	36	;'$'
  5381  10E5  3400               	retlw	0
  5382  10E6                     STR_28:	
  5383  10E6  3454               	retlw	84	;'T'
  5384  10E7  3465               	retlw	101	;'e'
  5385  10E8  3473               	retlw	115	;'s'
  5386  10E9  3474               	retlw	116	;'t'
  5387  10EA  3420               	retlw	32	;' '
  5388  10EB  3449               	retlw	73	;'I'
  5389  10EC  3432               	retlw	50	;'2'
  5390  10ED  3443               	retlw	67	;'C'
  5391  10EE  3420               	retlw	32	;' '
  5392  10EF  3457               	retlw	87	;'W'
  5393  10F0  3472               	retlw	114	;'r'
  5394  10F1  3469               	retlw	105	;'i'
  5395  10F2  3474               	retlw	116	;'t'
  5396  10F3  3465               	retlw	101	;'e'
  5397  10F4  3420               	retlw	32	;' '
  5398  10F5  3441               	retlw	65	;'A'
  5399  10F6  3464               	retlw	100	;'d'
  5400  10F7  3472               	retlw	114	;'r'
  5401  10F8  3475               	retlw	117	;'u'
  5402  10F9  3469               	retlw	105	;'i'
  5403  10FA  346E               	retlw	110	;'n'
  5404  10FB  346F               	retlw	111	;'o'
  5405  10FC  3420               	retlw	32	;' '
  5406  10FD  3424               	retlw	36	;'$'
  5407  10FE  3400               	retlw	0
  5408  10FF                     STR_10:	
  5409  10FF  344E               	retlw	78	;'N'
  5410  1100  3445               	retlw	69	;'E'
  5411  1101  3445               	retlw	69	;'E'
  5412  1102  3444               	retlw	68	;'D'
  5413  1103  3420               	retlw	32	;' '
  5414  1104  3443               	retlw	67	;'C'
  5415  1105  3448               	retlw	72	;'H'
  5416  1106  3441               	retlw	65	;'A'
  5417  1107  344E               	retlw	78	;'N'
  5418  1108  3447               	retlw	71	;'G'
  5419  1109  3445               	retlw	69	;'E'
  5420  110A  3420               	retlw	32	;' '
  5421  110B  3453               	retlw	83	;'S'
  5422  110C  3441               	retlw	65	;'A'
  5423  110D  344D               	retlw	77	;'M'
  5424  110E  3450               	retlw	80	;'P'
  5425  110F  344C               	retlw	76	;'L'
  5426  1110  3445               	retlw	69	;'E'
  5427  1111  3420               	retlw	32	;' '
  5428  1112  3452               	retlw	82	;'R'
  5429  1113  3441               	retlw	65	;'A'
  5430  1114  3454               	retlw	84	;'T'
  5431  1115  3445               	retlw	69	;'E'
  5432  1116  3424               	retlw	36	;'$'
  5433  1117  3400               	retlw	0
  5434  1118                     STR_4:	
  5435  1118  3453               	retlw	83	;'S'
  5436  1119  3452               	retlw	82	;'R'
  5437  111A  345F               	retlw	95	;'_'
  5438  111B  3430               	retlw	48	;'0'
  5439  111C  3478               	retlw	120	;'x'
  5440  111D  3441               	retlw	65	;'A'
  5441  111E  3431               	retlw	49	;'1'
  5442  111F  345F               	retlw	95	;'_'
  5443  1120  3441               	retlw	65	;'A'
  5444  1121  3444               	retlw	68	;'D'
  5445  1122  344F               	retlw	79	;'O'
  5446  1123  345F               	retlw	95	;'_'
  5447  1124  3452               	retlw	82	;'R'
  5448  1125  3465               	retlw	101	;'e'
  5449  1126  3471               	retlw	113	;'q'
  5450  1127  3475               	retlw	117	;'u'
  5451  1128  3465               	retlw	101	;'e'
  5452  1129  3473               	retlw	115	;'s'
  5453  112A  3474               	retlw	116	;'t'
  5454  112B  3420               	retlw	32	;' '
  5455  112C  343D               	retlw	61	;'='
  5456  112D  3430               	retlw	48	;'0'
  5457  112E  3478               	retlw	120	;'x'
  5458  112F  3424               	retlw	36	;'$'
  5459  1130  3400               	retlw	0
  5460  1131                     STR_12:	
  5461  1131  3466               	retlw	102	;'f'
  5462  1132  346F               	retlw	111	;'o'
  5463  1133  3472               	retlw	114	;'r'
  5464  1134  3420               	retlw	32	;' '
  5465  1135  3454               	retlw	84	;'T'
  5466  1136  3465               	retlw	101	;'e'
  5467  1137  3473               	retlw	115	;'s'
  5468  1138  3474               	retlw	116	;'t'
  5469  1139  343A               	retlw	58	;':'
  5470  113A  3420               	retlw	32	;' '
  5471  113B  3475               	retlw	117	;'u'
  5472  113C  3470               	retlw	112	;'p'
  5473  113D  346C               	retlw	108	;'l'
  5474  113E  346F               	retlw	111	;'o'
  5475  113F  3461               	retlw	97	;'a'
  5476  1140  3464               	retlw	100	;'d'
  5477  1141  3420               	retlw	32	;' '
  5478  1142  3464               	retlw	100	;'d'
  5479  1143  3461               	retlw	97	;'a'
  5480  1144  3474               	retlw	116	;'t'
  5481  1145  3461               	retlw	97	;'a'
  5482  1146  3421               	retlw	33	;'!'
  5483  1147  3424               	retlw	36	;'$'
  5484  1148  3400               	retlw	0
  5485  1149                     STR_17:	
  5486  1149  3449               	retlw	73	;'I'
  5487  114A  3432               	retlw	50	;'2'
  5488  114B  3443               	retlw	67	;'C'
  5489  114C  3420               	retlw	32	;' '
  5490  114D  3453               	retlw	83	;'S'
  5491  114E  3474               	retlw	116	;'t'
  5492  114F  3472               	retlw	114	;'r'
  5493  1150  3469               	retlw	105	;'i'
  5494  1151  346E               	retlw	110	;'n'
  5495  1152  3467               	retlw	103	;'g'
  5496  1153  3420               	retlw	32	;' '
  5497  1154  3474               	retlw	116	;'t'
  5498  1155  346F               	retlw	111	;'o'
  5499  1156  3420               	retlw	32	;' '
  5500  1157  3441               	retlw	65	;'A'
  5501  1158  3472               	retlw	114	;'r'
  5502  1159  3464               	retlw	100	;'d'
  5503  115A  3475               	retlw	117	;'u'
  5504  115B  3469               	retlw	105	;'i'
  5505  115C  346E               	retlw	110	;'n'
  5506  115D  346F               	retlw	111	;'o'
  5507  115E  3424               	retlw	36	;'$'
  5508  115F  3400               	retlw	0
  5509  1160                     STR_8:	
  5510  1160  3452               	retlw	82	;'R'
  5511  1161  3445               	retlw	69	;'E'
  5512  1162  3453               	retlw	83	;'S'
  5513  1163  3455               	retlw	85	;'U'
  5514  1164  344C               	retlw	76	;'L'
  5515  1165  3454               	retlw	84	;'T'
  5516  1166  3420               	retlw	32	;' '
  5517  1167  344E               	retlw	78	;'N'
  5518  1168  3447               	retlw	71	;'G'
  5519  1169  342C               	retlw	44	;','
  5520  116A  3420               	retlw	32	;' '
  5521  116B  3445               	retlw	69	;'E'
  5522  116C  3472               	retlw	114	;'r'
  5523  116D  3472               	retlw	114	;'r'
  5524  116E  346F               	retlw	111	;'o'
  5525  116F  3472               	retlw	114	;'r'
  5526  1170  3420               	retlw	32	;' '
  5527  1171  343D               	retlw	61	;'='
  5528  1172  3420               	retlw	32	;' '
  5529  1173  3430               	retlw	48	;'0'
  5530  1174  3478               	retlw	120	;'x'
  5531  1175  3424               	retlw	36	;'$'
  5532  1176  3400               	retlw	0
  5533  1177                     STR_3:	
  5534  1177  3453               	retlw	83	;'S'
  5535  1178  3452               	retlw	82	;'R'
  5536  1179  345F               	retlw	95	;'_'
  5537  117A  3430               	retlw	48	;'0'
  5538  117B  3478               	retlw	120	;'x'
  5539  117C  3441               	retlw	65	;'A'
  5540  117D  3430               	retlw	48	;'0'
  5541  117E  345F               	retlw	95	;'_'
  5542  117F  3441               	retlw	65	;'A'
  5543  1180  3444               	retlw	68	;'D'
  5544  1181  344F               	retlw	79	;'O'
  5545  1182  345F               	retlw	95	;'_'
  5546  1183  3445               	retlw	69	;'E'
  5547  1184  3472               	retlw	114	;'r'
  5548  1185  3472               	retlw	114	;'r'
  5549  1186  346F               	retlw	111	;'o'
  5550  1187  3472               	retlw	114	;'r'
  5551  1188  3420               	retlw	32	;' '
  5552  1189  343D               	retlw	61	;'='
  5553  118A  3430               	retlw	48	;'0'
  5554  118B  3478               	retlw	120	;'x'
  5555  118C  3424               	retlw	36	;'$'
  5556  118D  3400               	retlw	0
  5557  118E                     STR_53:	
  5558  118E  3453               	retlw	83	;'S'
  5559  118F  3465               	retlw	101	;'e'
  5560  1190  3474               	retlw	116	;'t'
  5561  1191  3420               	retlw	32	;' '
  5562  1192  3445               	retlw	69	;'E'
  5563  1193  3472               	retlw	114	;'r'
  5564  1194  3472               	retlw	114	;'r'
  5565  1195  346F               	retlw	111	;'o'
  5566  1196  3472               	retlw	114	;'r'
  5567  1197  3420               	retlw	32	;' '
  5568  1198  3446               	retlw	70	;'F'
  5569  1199  346C               	retlw	108	;'l'
  5570  119A  3461               	retlw	97	;'a'
  5571  119B  3467               	retlw	103	;'g'
  5572  119C  3420               	retlw	32	;' '
  5573  119D  343D               	retlw	61	;'='
  5574  119E  3420               	retlw	32	;' '
  5575  119F  3449               	retlw	73	;'I'
  5576  11A0  3432               	retlw	50	;'2'
  5577  11A1  3443               	retlw	67	;'C'
  5578  11A2  3424               	retlw	36	;'$'
  5579  11A3  3400               	retlw	0
  5580  11A4                     STR_37:	
  5581  11A4  344D               	retlw	77	;'M'
  5582  11A5  3465               	retlw	101	;'e'
  5583  11A6  3473               	retlw	115	;'s'
  5584  11A7  3475               	retlw	117	;'u'
  5585  11A8  3472               	retlw	114	;'r'
  5586  11A9  3465               	retlw	101	;'e'
  5587  11AA  3420               	retlw	32	;' '
  5588  11AB  3454               	retlw	84	;'T'
  5589  11AC  3465               	retlw	101	;'e'
  5590  11AD  346D               	retlw	109	;'m'
  5591  11AE  3470               	retlw	112	;'p'
  5592  11AF  3420               	retlw	32	;' '
  5593  11B0  3444               	retlw	68	;'D'
  5594  11B1  3441               	retlw	65	;'A'
  5595  11B2  3454               	retlw	84	;'T'
  5596  11B3  3441               	retlw	65	;'A'
  5597  11B4  3420               	retlw	32	;' '
  5598  11B5  343D               	retlw	61	;'='
  5599  11B6  3420               	retlw	32	;' '
  5600  11B7  3424               	retlw	36	;'$'
  5601  11B8  3400               	retlw	0
  5602  11B9                     STR_6:	
  5603  11B9  344E               	retlw	78	;'N'
  5604  11BA  3445               	retlw	69	;'E'
  5605  11BB  3445               	retlw	69	;'E'
  5606  11BC  3444               	retlw	68	;'D'
  5607  11BD  3420               	retlw	32	;' '
  5608  11BE  3441               	retlw	65	;'A'
  5609  11BF  3444               	retlw	68	;'D'
  5610  11C0  344A               	retlw	74	;'J'
  5611  11C1  3420               	retlw	32	;' '
  5612  11C2  3452               	retlw	82	;'R'
  5613  11C3  3454               	retlw	84	;'T'
  5614  11C4  3443               	retlw	67	;'C'
  5615  11C5  3420               	retlw	32	;' '
  5616  11C6  3443               	retlw	67	;'C'
  5617  11C7  344C               	retlw	76	;'L'
  5618  11C8  344F               	retlw	79	;'O'
  5619  11C9  3443               	retlw	67	;'C'
  5620  11CA  344B               	retlw	75	;'K'
  5621  11CB  3424               	retlw	36	;'$'
  5622  11CC  3400               	retlw	0
  5623  11CD                     STR_41:	
  5624  11CD  3441               	retlw	65	;'A'
  5625  11CE  3475               	retlw	117	;'u'
  5626  11CF  3474               	retlw	116	;'t'
  5627  11D0  346F               	retlw	111	;'o'
  5628  11D1  3420               	retlw	32	;' '
  5629  11D2  3472               	retlw	114	;'r'
  5630  11D3  3475               	retlw	117	;'u'
  5631  11D4  346E               	retlw	110	;'n'
  5632  11D5  3420               	retlw	32	;' '
  5633  11D6  3473               	retlw	115	;'s'
  5634  11D7  3465               	retlw	101	;'e'
  5635  11D8  346C               	retlw	108	;'l'
  5636  11D9  3466               	retlw	102	;'f'
  5637  11DA  3420               	retlw	32	;' '
  5638  11DB  3474               	retlw	116	;'t'
  5639  11DC  3465               	retlw	101	;'e'
  5640  11DD  3473               	retlw	115	;'s'
  5641  11DE  3474               	retlw	116	;'t'
  5642  11DF  3424               	retlw	36	;'$'
  5643  11E0  3400               	retlw	0
  5644  11E1                     STR_13:	
  5645  11E1  3457               	retlw	87	;'W'
  5646  11E2  3472               	retlw	114	;'r'
  5647  11E3  3469               	retlw	105	;'i'
  5648  11E4  3474               	retlw	116	;'t'
  5649  11E5  3465               	retlw	101	;'e'
  5650  11E6  3420               	retlw	32	;' '
  5651  11E7  3445               	retlw	69	;'E'
  5652  11E8  3445               	retlw	69	;'E'
  5653  11E9  3450               	retlw	80	;'P'
  5654  11EA  3452               	retlw	82	;'R'
  5655  11EB  344F               	retlw	79	;'O'
  5656  11EC  344D               	retlw	77	;'M'
  5657  11ED  3420               	retlw	32	;' '
  5658  11EE  3441               	retlw	65	;'A'
  5659  11EF  3464               	retlw	100	;'d'
  5660  11F0  3472               	retlw	114	;'r'
  5661  11F1  343A               	retlw	58	;':'
  5662  11F2  3424               	retlw	36	;'$'
  5663  11F3  3400               	retlw	0
  5664  11F4                     STR_44:	
  5665  11F4  3445               	retlw	69	;'E'
  5666  11F5  3472               	retlw	114	;'r'
  5667  11F6  3472               	retlw	114	;'r'
  5668  11F7  346F               	retlw	111	;'o'
  5669  11F8  3472               	retlw	114	;'r'
  5670  11F9  3420               	retlw	32	;' '
  5671  11FA  3441               	retlw	65	;'A'
  5672  11FB  3464               	retlw	100	;'d'
  5673  11FC  3464               	retlw	100	;'d'
  5674  11FD  3472               	retlw	114	;'r'
  5675  11FE  3465               	retlw	101	;'e'
  5676  11FF  3473               	retlw	115	;'s'
  5677  1200  3473               	retlw	115	;'s'
  5678  1201  3420               	retlw	32	;' '
  5679  1202  343D               	retlw	61	;'='
  5680  1203  3430               	retlw	48	;'0'
  5681  1204  3478               	retlw	120	;'x'
  5682  1205  3424               	retlw	36	;'$'
  5683  1206  3400               	retlw	0
  5684  1207                     STR_15:	
  5685  1207  3452               	retlw	82	;'R'
  5686  1208  3465               	retlw	101	;'e'
  5687  1209  3461               	retlw	97	;'a'
  5688  120A  3464               	retlw	100	;'d'
  5689  120B  3420               	retlw	32	;' '
  5690  120C  3445               	retlw	69	;'E'
  5691  120D  3445               	retlw	69	;'E'
  5692  120E  3450               	retlw	80	;'P'
  5693  120F  3452               	retlw	82	;'R'
  5694  1210  344F               	retlw	79	;'O'
  5695  1211  344D               	retlw	77	;'M'
  5696  1212  3420               	retlw	32	;' '
  5697  1213  3441               	retlw	65	;'A'
  5698  1214  3464               	retlw	100	;'d'
  5699  1215  3472               	retlw	114	;'r'
  5700  1216  343A               	retlw	58	;':'
  5701  1217  3424               	retlw	36	;'$'
  5702  1218  3400               	retlw	0
  5703  1219                     STR_45:	
  5704  1219  3452               	retlw	82	;'R'
  5705  121A  3465               	retlw	101	;'e'
  5706  121B  3461               	retlw	97	;'a'
  5707  121C  3464               	retlw	100	;'d'
  5708  121D  3420               	retlw	32	;' '
  5709  121E  3441               	retlw	65	;'A'
  5710  121F  3464               	retlw	100	;'d'
  5711  1220  3464               	retlw	100	;'d'
  5712  1221  3472               	retlw	114	;'r'
  5713  1222  3465               	retlw	101	;'e'
  5714  1223  3473               	retlw	115	;'s'
  5715  1224  3473               	retlw	115	;'s'
  5716  1225  3420               	retlw	32	;' '
  5717  1226  343D               	retlw	61	;'='
  5718  1227  3430               	retlw	48	;'0'
  5719  1228  3478               	retlw	120	;'x'
  5720  1229  3424               	retlw	36	;'$'
  5721  122A  3400               	retlw	0
  5722  122B                     STR_19:	
  5723  122B  3453               	retlw	83	;'S'
  5724  122C  3445               	retlw	69	;'E'
  5725  122D  3454               	retlw	84	;'T'
  5726  122E  3420               	retlw	32	;' '
  5727  122F  3450               	retlw	80	;'P'
  5728  1230  3461               	retlw	97	;'a'
  5729  1231  3473               	retlw	115	;'s'
  5730  1232  3473               	retlw	115	;'s'
  5731  1233  3477               	retlw	119	;'w'
  5732  1234  346F               	retlw	111	;'o'
  5733  1235  3472               	retlw	114	;'r'
  5734  1236  3464               	retlw	100	;'d'
  5735  1237  3420               	retlw	32	;' '
  5736  1238  344F               	retlw	79	;'O'
  5737  1239  344B               	retlw	75	;'K'
  5738  123A  3424               	retlw	36	;'$'
  5739  123B  3400               	retlw	0
  5740  123C                     STR_48:	
  5741  123C  3443               	retlw	67	;'C'
  5742  123D  3468               	retlw	104	;'h'
  5743  123E  3465               	retlw	101	;'e'
  5744  123F  3463               	retlw	99	;'c'
  5745  1240  346B               	retlw	107	;'k'
  5746  1241  3420               	retlw	32	;' '
  5747  1242  3430               	retlw	48	;'0'
  5748  1243  3478               	retlw	120	;'x'
  5749  1244  3443               	retlw	67	;'C'
  5750  1245  3430               	retlw	48	;'0'
  5751  1246  3420               	retlw	32	;' '
  5752  1247  343D               	retlw	61	;'='
  5753  1248  3430               	retlw	48	;'0'
  5754  1249  3478               	retlw	120	;'x'
  5755  124A  3424               	retlw	36	;'$'
  5756  124B  3400               	retlw	0
  5757  124C                     STR_49:	
  5758  124C  3443               	retlw	67	;'C'
  5759  124D  3468               	retlw	104	;'h'
  5760  124E  3465               	retlw	101	;'e'
  5761  124F  3463               	retlw	99	;'c'
  5762  1250  346B               	retlw	107	;'k'
  5763  1251  3420               	retlw	32	;' '
  5764  1252  3430               	retlw	48	;'0'
  5765  1253  3478               	retlw	120	;'x'
  5766  1254  3443               	retlw	67	;'C'
  5767  1255  3431               	retlw	49	;'1'
  5768  1256  3420               	retlw	32	;' '
  5769  1257  343D               	retlw	61	;'='
  5770  1258  3430               	retlw	48	;'0'
  5771  1259  3478               	retlw	120	;'x'
  5772  125A  3424               	retlw	36	;'$'
  5773  125B  3400               	retlw	0
  5774  125C                     STR_27:	
  5775  125C  3454               	retlw	84	;'T'
  5776  125D  3465               	retlw	101	;'e'
  5777  125E  3473               	retlw	115	;'s'
  5778  125F  3474               	retlw	116	;'t'
  5779  1260  3420               	retlw	32	;' '
  5780  1261  3452               	retlw	82	;'R'
  5781  1262  3465               	retlw	101	;'e'
  5782  1263  3461               	retlw	97	;'a'
  5783  1264  3464               	retlw	100	;'d'
  5784  1265  3420               	retlw	32	;' '
  5785  1266  3450               	retlw	80	;'P'
  5786  1267  3448               	retlw	72	;'H'
  5787  1268  3420               	retlw	32	;' '
  5788  1269  3424               	retlw	36	;'$'
  5789  126A  3400               	retlw	0
  5790  126B                     STR_43:	
  5791  126B  3443               	retlw	67	;'C'
  5792  126C  3468               	retlw	104	;'h'
  5793  126D  3465               	retlw	101	;'e'
  5794  126E  3463               	retlw	99	;'c'
  5795  126F  346B               	retlw	107	;'k'
  5796  1270  3420               	retlw	32	;' '
  5797  1271  3452               	retlw	82	;'R'
  5798  1272  3454               	retlw	84	;'T'
  5799  1273  3443               	retlw	67	;'C'
  5800  1274  3420               	retlw	32	;' '
  5801  1275  343D               	retlw	61	;'='
  5802  1276  3420               	retlw	32	;' '
  5803  1277  3424               	retlw	36	;'$'
  5804  1278  3400               	retlw	0
  5805  1279                     STR_2:	
  5806  1279  3465               	retlw	101	;'e'
  5807  127A  3478               	retlw	120	;'x'
  5808  127B  3449               	retlw	73	;'I'
  5809  127C  344E               	retlw	78	;'N'
  5810  127D  3454               	retlw	84	;'T'
  5811  127E  3420               	retlw	32	;' '
  5812  127F  3465               	retlw	101	;'e'
  5813  1280  346E               	retlw	110	;'n'
  5814  1281  3461               	retlw	97	;'a'
  5815  1282  3462               	retlw	98	;'b'
  5816  1283  346C               	retlw	108	;'l'
  5817  1284  3465               	retlw	101	;'e'
  5818  1285  3424               	retlw	36	;'$'
  5819  1286  3400               	retlw	0
  5820  1287                     STR_42:	
  5821  1287  3443               	retlw	67	;'C'
  5822  1288  3468               	retlw	104	;'h'
  5823  1289  3465               	retlw	101	;'e'
  5824  128A  3463               	retlw	99	;'c'
  5825  128B  346B               	retlw	107	;'k'
  5826  128C  3420               	retlw	32	;' '
  5827  128D  3446               	retlw	70	;'F'
  5828  128E  3469               	retlw	105	;'i'
  5829  128F  346E               	retlw	110	;'n'
  5830  1290  3469               	retlw	105	;'i'
  5831  1291  3473               	retlw	115	;'s'
  5832  1292  3468               	retlw	104	;'h'
  5833  1293  3424               	retlw	36	;'$'
  5834  1294  3400               	retlw	0
  5835  1295                     STR_18:	
  5836  1295  3453               	retlw	83	;'S'
  5837  1296  3445               	retlw	69	;'E'
  5838  1297  3454               	retlw	84	;'T'
  5839  1298  3420               	retlw	32	;' '
  5840  1299  3453               	retlw	83	;'S'
  5841  129A  3453               	retlw	83	;'S'
  5842  129B  3449               	retlw	73	;'I'
  5843  129C  3444               	retlw	68	;'D'
  5844  129D  3420               	retlw	32	;' '
  5845  129E  344F               	retlw	79	;'O'
  5846  129F  344B               	retlw	75	;'K'
  5847  12A0  3424               	retlw	36	;'$'
  5848  12A1  3400               	retlw	0
  5849  12A2                     STR_26:	
  5850  12A2  342C               	retlw	44	;','
  5851  12A3  3420               	retlw	32	;' '
  5852  12A4  3454               	retlw	84	;'T'
  5853  12A5  3469               	retlw	105	;'i'
  5854  12A6  346D               	retlw	109	;'m'
  5855  12A7  3465               	retlw	101	;'e'
  5856  12A8  3420               	retlw	32	;' '
  5857  12A9  343D               	retlw	61	;'='
  5858  12AA  3420               	retlw	32	;' '
  5859  12AB  3420               	retlw	32	;' '
  5860  12AC  3424               	retlw	36	;'$'
  5861  12AD  3400               	retlw	0
  5862  12AE                     STR_22:	
  5863  12AE  3453               	retlw	83	;'S'
  5864  12AF  3445               	retlw	69	;'E'
  5865  12B0  3454               	retlw	84	;'T'
  5866  12B1  3420               	retlw	32	;' '
  5867  12B2  3446               	retlw	70	;'F'
  5868  12B3  3449               	retlw	73	;'I'
  5869  12B4  3444               	retlw	68	;'D'
  5870  12B5  3420               	retlw	32	;' '
  5871  12B6  344F               	retlw	79	;'O'
  5872  12B7  344B               	retlw	75	;'K'
  5873  12B8  3424               	retlw	36	;'$'
  5874  12B9  3400               	retlw	0
  5875  12BA                     STR_11:	
  5876  12BA  3453               	retlw	83	;'S'
  5877  12BB  3465               	retlw	101	;'e'
  5878  12BC  3474               	retlw	116	;'t'
  5879  12BD  3420               	retlw	32	;' '
  5880  12BE  3444               	retlw	68	;'D'
  5881  12BF  3441               	retlw	65	;'A'
  5882  12C0  3443               	retlw	67	;'C'
  5883  12C1  3420               	retlw	32	;' '
  5884  12C2  343D               	retlw	61	;'='
  5885  12C3  3424               	retlw	36	;'$'
  5886  12C4  3400               	retlw	0
  5887  12C5                     STR_7:	
  5888  12C5  3452               	retlw	82	;'R'
  5889  12C6  3445               	retlw	69	;'E'
  5890  12C7  3453               	retlw	83	;'S'
  5891  12C8  3455               	retlw	85	;'U'
  5892  12C9  344C               	retlw	76	;'L'
  5893  12CA  3454               	retlw	84	;'T'
  5894  12CB  3420               	retlw	32	;' '
  5895  12CC  344F               	retlw	79	;'O'
  5896  12CD  344B               	retlw	75	;'K'
  5897  12CE  3424               	retlw	36	;'$'
  5898  12CF  3400               	retlw	0
  5899  12D0                     STR_25:	
  5900  12D0  344C               	retlw	76	;'L'
  5901  12D1  346F               	retlw	111	;'o'
  5902  12D2  346F               	retlw	111	;'o'
  5903  12D3  3470               	retlw	112	;'p'
  5904  12D4  3420               	retlw	32	;' '
  5905  12D5  343D               	retlw	61	;'='
  5906  12D6  3420               	retlw	32	;' '
  5907  12D7  3420               	retlw	32	;' '
  5908  12D8  3424               	retlw	36	;'$'
  5909  12D9  3400               	retlw	0
  5910  12DA                     STR_1:	
  5911  12DA  3454               	retlw	84	;'T'
  5912  12DB  3444               	retlw	68	;'D'
  5913  12DC  3453               	retlw	83	;'S'
  5914  12DD  3420               	retlw	32	;' '
  5915  12DE  343D               	retlw	61	;'='
  5916  12DF  3420               	retlw	32	;' '
  5917  12E0  3424               	retlw	36	;'$'
  5918  12E1  3400               	retlw	0
  5919  12E2                     STR_36:	
  5920  12E2  3444               	retlw	68	;'D'
  5921  12E3  344F               	retlw	79	;'O'
  5922  12E4  3420               	retlw	32	;' '
  5923  12E5  343D               	retlw	61	;'='
  5924  12E6  3420               	retlw	32	;' '
  5925  12E7  3424               	retlw	36	;'$'
  5926  12E8  3400               	retlw	0
  5927  12E9                     STR_14:	
  5928  12E9  3444               	retlw	68	;'D'
  5929  12EA  3461               	retlw	97	;'a'
  5930  12EB  3474               	retlw	116	;'t'
  5931  12EC  3461               	retlw	97	;'a'
  5932  12ED  343A               	retlw	58	;':'
  5933  12EE  3424               	retlw	36	;'$'
  5934  12EF  3400               	retlw	0
  5935  12F0                     STR_39:	
  5936  12F0  342C               	retlw	44	;','
  5937  12F1  3420               	retlw	32	;' '
  5938  12F2  3430               	retlw	48	;'0'
  5939  12F3  3478               	retlw	120	;'x'
  5940  12F4  3424               	retlw	36	;'$'
  5941  12F5  3400               	retlw	0
  5942  12F6                     STR_30:	
  5943  12F6  342C               	retlw	44	;','
  5944  12F7  3424               	retlw	36	;'$'
  5945  12F8  3400               	retlw	0
  5946  12DA                     
  5947                           ; #config settings
  5948  0000                     
  5949                           	psect	cinit
  5950  0033                     start_initialization:	
  5951  0033                     __initialization:	
  5952                           
  5953                           ; Clear objects allocated to COMMON
  5954  0033  01FA               	clrf	__pbssCOMMON& (0+127)
  5955  0034  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  5956                           
  5957                           ; Clear objects allocated to BANK1
  5958  0035  30DF               	movlw	low __pbssBANK1
  5959  0036  0084               	movwf	4
  5960  0037  3000               	movlw	high __pbssBANK1
  5961  0038  0085               	movwf	5
  5962  0039  3010               	movlw	16
  5963  003A  3199  2116  3180   	fcall	clear_ram0
  5964                           
  5965                           ; Clear objects allocated to BANK2
  5966  003D  3020               	movlw	low __pbssBANK2
  5967  003E  0084               	movwf	4
  5968  003F  3001               	movlw	high __pbssBANK2
  5969  0040  0085               	movwf	5
  5970  0041  303F               	movlw	63
  5971  0042  3199  2116  3180   	fcall	clear_ram0
  5972                           
  5973                           ; Clear objects allocated to BANK3
  5974  0045  30A0               	movlw	low __pbssBANK3
  5975  0046  0084               	movwf	4
  5976  0047  3001               	movlw	high __pbssBANK3
  5977  0048  0085               	movwf	5
  5978  0049  3028               	movlw	40
  5979  004A  3199  2116  3180   	fcall	clear_ram0
  5980                           
  5981                           ; Clear objects allocated to BANK4
  5982  004D  3050               	movlw	low __pbssBANK4
  5983  004E  0084               	movwf	4
  5984  004F  3002               	movlw	high __pbssBANK4
  5985  0050  0085               	movwf	5
  5986  0051  3020               	movlw	32
  5987  0052  3199  2116  3180   	fcall	clear_ram0
  5988                           
  5989                           ; Initialize objects allocated to BANK1
  5990  0055  0021               	movlb	1	; select bank1
  5991  0056  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  5992  0059  00EF               	movwf	__pdataBANK1& (0+127)
  5993                           
  5994                           ; Initialize objects allocated to BANK2
  5995  005A  3049               	movlw	low __pidataBANK2
  5996  005B  0084               	movwf	4
  5997  005C  3099               	movlw	(high __pidataBANK2)| (0+128)
  5998  005D  0085               	movwf	5
  5999  005E  305F               	movlw	low __pdataBANK2
  6000  005F  0086               	movwf	6
  6001  0060  3001               	movlw	high __pdataBANK2
  6002  0061  0087               	movwf	7
  6003  0062  300B               	movlw	11
  6004  0063  3199  2110  3180   	fcall	init_ram
  6005                           
  6006                           ; Initialize objects allocated to BANK3
  6007  0066  30E6               	movlw	low __pidataBANK3
  6008  0067  0084               	movwf	4
  6009  0068  309A               	movlw	(high __pidataBANK3)| (0+128)
  6010  0069  0085               	movwf	5
  6011  006A  30C8               	movlw	low __pdataBANK3
  6012  006B  0086               	movwf	6
  6013  006C  3001               	movlw	high __pdataBANK3
  6014  006D  0087               	movwf	7
  6015  006E  301F               	movlw	31
  6016  006F  3199  2110  3180   	fcall	init_ram
  6017                           
  6018                           ; Initialize objects allocated to BANK4
  6019  0072  3083               	movlw	low __pidataBANK4
  6020  0073  0084               	movwf	4
  6021  0074  309C               	movlw	(high __pidataBANK4)| (0+128)
  6022  0075  0085               	movwf	5
  6023  0076  3020               	movlw	low __pdataBANK4
  6024  0077  0086               	movwf	6
  6025  0078  3002               	movlw	high __pdataBANK4
  6026  0079  0087               	movwf	7
  6027  007A  3030               	movlw	48
  6028  007B  3199  2110  3180   	fcall	init_ram
  6029                           
  6030                           ; Initialize objects allocated to BANK5
  6031  007E  3021               	movlw	low __pidataBANK5
  6032  007F  0084               	movwf	4
  6033  0080  309A               	movlw	(high __pidataBANK5)| (0+128)
  6034  0081  0085               	movwf	5
  6035  0082  30A0               	movlw	low __pdataBANK5
  6036  0083  0086               	movwf	6
  6037  0084  3002               	movlw	high __pdataBANK5
  6038  0085  0087               	movwf	7
  6039  0086  301A               	movlw	26
  6040  0087  3199  2110  3180   	fcall	init_ram
  6041                           
  6042                           ; Initialize objects allocated to BANK6
  6043  008A  30FA               	movlw	low __pidataBANK6
  6044  008B  0084               	movwf	4
  6045  008C  3092               	movlw	(high __pidataBANK6)| (0+128)
  6046  008D  0085               	movwf	5
  6047  008E  3020               	movlw	low __pdataBANK6
  6048  008F  0086               	movwf	6
  6049  0090  3003               	movlw	high __pdataBANK6
  6050  0091  0087               	movwf	7
  6051  0092  303F               	movlw	63
  6052  0093  3199  2110         	fcall	init_ram
  6053  0095                     end_of_initialization:	
  6054                           ;End of C runtime variable initialization code
  6055                           
  6056  0095                     __end_of__initialization:	
  6057  0095  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6058  0096  0020               	movlb	0
  6059  0097  318C  2CA5         	ljmp	_main	;jump to C main() function
  6060                           
  6061                           	psect	bssCOMMON
  6062  007A                     __pbssCOMMON:	
  6063  007A                     _ADC_Vol:	
  6064  007A                     	ds	2
  6065                           
  6066                           	psect	bssBANK1
  6067  00DF                     __pbssBANK1:	
  6068  00DF                     _RTC_SecCount:	
  6069  00DF                     	ds	4
  6070  00E3                     _Flag_Mesure_Test:	
  6071  00E3                     	ds	1
  6072  00E4                     _LoopA:	
  6073  00E4                     	ds	1
  6074  00E5                     _PWM_1MS_COUNT:	
  6075  00E5                     	ds	1
  6076  00E6                     _RUN_PWM_FLAG:	
  6077  00E6                     	ds	1
  6078  00E7                     _SR_0xA0_ADO_Error:	
  6079  00E7                     	ds	1
  6080  00E8                     _SR_0xA1_ADO_Request:	
  6081  00E8                     	ds	1
  6082  00E9                     _eusartRxCount:	
  6083  00E9                     	ds	1
  6084  00EA                     _eusartRxHead:	
  6085  00EA                     	ds	1
  6086  00EB                     _eusartRxTail:	
  6087  00EB                     	ds	1
  6088  00EC                     _eusartTxHead:	
  6089  00EC                     	ds	1
  6090  00ED                     _eusartTxTail:	
  6091  00ED                     	ds	1
  6092  00EE                     _MT_LoopTime:	
  6093  00EE                     	ds	1
  6094                           
  6095                           	psect	dataBANK1
  6096  00EF                     __pdataBANK1:	
  6097  00EF                     _exINT_Mode:	
  6098  00EF                     	ds	1
  6099                           
  6100                           	psect	bssBANK2
  6101  0120                     __pbssBANK2:	
  6102  0120                     _REC_METER_VAL:	
  6103  0120                     	ds	16
  6104  0130                     _eusartTxBuffer:	
  6105  0130                     	ds	8
  6106  0138                     _ADC_Vol_cal:	
  6107  0138                     	ds	4
  6108  013C                     TMR0_ISR@CountCallBack:	
  6109  013C                     	ds	2
  6110  013E                     TMR2_ISR@CountCallBack:	
  6111  013E                     	ds	2
  6112  0140                     _ADC_Volm:	
  6113  0140                     	ds	2
  6114  0142                     _MT_SecTime:	
  6115  0142                     	ds	2
  6116  0144                     _NUL_DayCount:	
  6117  0144                     	ds	2
  6118  0146                     _OneCount_MT:	
  6119  0146                     	ds	2
  6120  0148                     _RTC_DayCount:	
  6121  0148                     	ds	2
  6122  014A                     _BufferLenght:	
  6123  014A                     	ds	1
  6124  014B                     _ErrorFlag:	
  6125  014B                     	ds	1
  6126  014C                     _FirstTimeSetup:	
  6127  014C                     	ds	1
  6128  014D                     _FlagOneSec:	
  6129  014D                     	ds	1
  6130  014E                     _FlagRxByte:	
  6131  014E                     	ds	1
  6132  014F                     _Flag_1MS:	
  6133  014F                     	ds	1
  6134  0150                     _Flag_RxStr:	
  6135  0150                     	ds	1
  6136  0151                     _Loop_Mesure_Test:	
  6137  0151                     	ds	1
  6138  0152                     _MES_DO_FLAG:	
  6139  0152                     	ds	1
  6140  0153                     _MES_TDS_FLAG:	
  6141  0153                     	ds	1
  6142  0154                     _Rec_Error_Event:	
  6143  0154                     	ds	1
  6144  0155                     _What_Strip_Error:	
  6145  0155                     	ds	1
  6146  0156                     _exINT_Flag:	
  6147  0156                     	ds	1
  6148  0157                     _RTC_Clock:	
  6149  0157                     	ds	6
  6150  015D                     _BufferGetTemp:	
  6151  015D                     	ds	2
  6152                           
  6153                           	psect	dataBANK2
  6154  015F                     __pdataBANK2:	
  6155  015F                     _NUL_SecCount:	
  6156  015F                     	ds	4
  6157  0163                     _NUL_SecCount_offset:	
  6158  0163                     	ds	4
  6159  0167                     _ADC_CH:	
  6160  0167                     	ds	3
  6161                           
  6162                           	psect	bssBANK3
  6163  01A0                     __pbssBANK3:	
  6164  01A0                     _eusartRxBuffer:	
  6165  01A0                     	ds	8
  6166  01A8                     _BufferRec:	
  6167  01A8                     	ds	32
  6168                           
  6169                           	psect	dataBANK3
  6170  01C8                     __pdataBANK3:	
  6171  01C8                     I2C_TEST_02@F8059:	
  6172  01C8                     	ds	16
  6173  01D8                     RUN_MESURE@F7902:	
  6174  01D8                     	ds	15
  6175                           
  6176                           	psect	bssBANK4
  6177  0250                     __pbssBANK4:	
  6178  0250                     _BufferStr:	
  6179  0250                     	ds	32
  6180                           
  6181                           	psect	dataBANK4
  6182  0220                     __pdataBANK4:	
  6183  0220                     Convert_YMD@F7967:	
  6184  0220                     	ds	24
  6185  0238                     Covert_Month_2_Day@F7991:	
  6186  0238                     	ds	24
  6187                           
  6188                           	psect	dataBANK5
  6189  02A0                     __pdataBANK5:	
  6190  02A0                     UPLOAD_MESURE_REC@F7910:	
  6191  02A0                     	ds	26
  6192                           
  6193                           	psect	dataBANK6
  6194  0320                     __pdataBANK6:	
  6195  0320                     RUN_MESURE@F7899:	
  6196  0320                     	ds	63
  6197                           
  6198                           	psect	clrtext
  6199  1916                     clear_ram0:	
  6200                           ;	Called with FSR0 containing the base address, and
  6201                           ;	WREG with the size to clear
  6202                           
  6203  1916  0064               	clrwdt	;clear the watchdog before getting into this loop
  6204  1917                     clrloop0:	
  6205  1917  0180               	clrf	0	;clear RAM location pointed to by FSR
  6206  1918  3101               	addfsr 0,1
  6207  1919  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6208  191A  2917               	goto	clrloop0	;have we reached the end yet?
  6209  191B  3400               	retlw	0	;all done for this memory range, return
  6210                           
  6211                           	psect	inittext
  6212  1910                     init_ram:	
  6213  1910  00FE               	movwf	126
  6214  1911                     initloop:	
  6215  1911  0012               	moviw fsr0++
  6216  1912  001E               	movwi fsr1++
  6217  1913  0BFE               	decfsz	126,f
  6218  1914  2911               	goto	initloop
  6219  1915  3400               	retlw	0
  6220                           
  6221                           	psect	cstackBANK2
  6222  016A                     __pcstackBANK2:	
  6223  016A                     ??_main:	
  6224                           
  6225                           ; 0 bytes @ 0x0
  6226  016A                     	ds	4
  6227                           
  6228                           	psect	cstackBANK1
  6229  00A0                     __pcstackBANK1:	
  6230  00A0                     RUN_MESURE@setup_table:	
  6231                           
  6232                           ; 63 bytes @ 0x0
  6233  00A0                     	ds	63
  6234                           
  6235                           	psect	cstackCOMMON
  6236  0070                     __pcstackCOMMON:	
  6237  0070                     ?_OSCILLATOR_Initialize:	
  6238  0070                     ?_EUSART_Initialize:	
  6239                           ; 0 bytes @ 0x0
  6240                           
  6241  0070                     ?_ADC_Initialize:	
  6242                           ; 0 bytes @ 0x0
  6243                           
  6244  0070                     ?_DAC1_Initialize:	
  6245                           ; 0 bytes @ 0x0
  6246                           
  6247  0070                     ?_FVR_Initialize:	
  6248                           ; 0 bytes @ 0x0
  6249                           
  6250  0070                     ?_TMR2_Initialize:	
  6251                           ; 0 bytes @ 0x0
  6252                           
  6253  0070                     ?_TMR0_Initialize:	
  6254                           ; 0 bytes @ 0x0
  6255                           
  6256  0070                     ?_OPA1_Initialize:	
  6257                           ; 0 bytes @ 0x0
  6258                           
  6259  0070                     ?_OPA2_Initialize:	
  6260                           ; 0 bytes @ 0x0
  6261                           
  6262  0070                     ?_OPA3_Initialize:	
  6263                           ; 0 bytes @ 0x0
  6264                           
  6265  0070                     ?_TMR2_ISR:	
  6266                           ; 0 bytes @ 0x0
  6267                           
  6268  0070                     ??_TMR2_ISR:	
  6269                           ; 0 bytes @ 0x0
  6270                           
  6271  0070                     ?_TMR0_ISR:	
  6272                           ; 0 bytes @ 0x0
  6273                           
  6274  0070                     ??_TMR0_ISR:	
  6275                           ; 0 bytes @ 0x0
  6276                           
  6277  0070                     ?_TMR0_CallBack:	
  6278                           ; 0 bytes @ 0x0
  6279                           
  6280  0070                     ??_TMR0_CallBack:	
  6281                           ; 0 bytes @ 0x0
  6282                           
  6283  0070                     ?_TMR2_StartTimer:	
  6284                           ; 0 bytes @ 0x0
  6285                           
  6286  0070                     ?_TMR2_CallBack:	
  6287                           ; 0 bytes @ 0x0
  6288                           
  6289  0070                     ??_TMR2_CallBack:	
  6290                           ; 0 bytes @ 0x0
  6291                           
  6292  0070                     ?_UPLOAD_MESURE_REC:	
  6293                           ; 0 bytes @ 0x0
  6294                           
  6295  0070                     ?_TEST_PIC_ALL:	
  6296                           ; 0 bytes @ 0x0
  6297                           
  6298  0070                     ?_RUN_MESURE:	
  6299                           ; 0 bytes @ 0x0
  6300                           
  6301  0070                     ?_PIC_SYNC_ADO_RTC:	
  6302                           ; 0 bytes @ 0x0
  6303                           
  6304  0070                     ?_Print_CHLN:	
  6305                           ; 0 bytes @ 0x0
  6306                           
  6307  0070                     ?_PIC_SYNC_ADO_ULSR:	
  6308                           ; 0 bytes @ 0x0
  6309                           
  6310  0070                     ?_DS18B20_GetTemp:	
  6311                           ; 0 bytes @ 0x0
  6312                           
  6313  0070                     ?_print_RTC:	
  6314                           ; 0 bytes @ 0x0
  6315                           
  6316  0070                     ?_I2C_TEST_10:	
  6317                           ; 0 bytes @ 0x0
  6318                           
  6319  0070                     ?_I2C_TEST_02:	
  6320                           ; 0 bytes @ 0x0
  6321                           
  6322  0070                     ?_Delay480us:	
  6323                           ; 0 bytes @ 0x0
  6324                           
  6325  0070                     ?_Delay5us:	
  6326                           ; 0 bytes @ 0x0
  6327                           
  6328  0070                     ?_Delay100us:	
  6329                           ; 0 bytes @ 0x0
  6330                           
  6331  0070                     ?_check_ADO_I2C:	
  6332                           ; 0 bytes @ 0x0
  6333                           
  6334  0070                     ?_PIN_MANAGER_Initialize:	
  6335                           ; 0 bytes @ 0x0
  6336                           
  6337  0070                     ?_SYSTEM_Initialize:	
  6338                           ; 0 bytes @ 0x0
  6339                           
  6340  0070                     ?_EUSART_Write:	
  6341                           ; 0 bytes @ 0x0
  6342                           
  6343  0070                     ?_EUSART_Transmit_ISR:	
  6344                           ; 0 bytes @ 0x0
  6345                           
  6346  0070                     ??_EUSART_Transmit_ISR:	
  6347                           ; 0 bytes @ 0x0
  6348                           
  6349  0070                     ?_EUSART_Receive_ISR:	
  6350                           ; 0 bytes @ 0x0
  6351                           
  6352  0070                     ??_EUSART_Receive_ISR:	
  6353                           ; 0 bytes @ 0x0
  6354                           
  6355  0070                     ?_INTERRUPT_InterruptManager:	
  6356                           ; 0 bytes @ 0x0
  6357                           
  6358  0070                     ?_DAC1_SetOutput:	
  6359                           ; 0 bytes @ 0x0
  6360                           
  6361  0070                     ?_main:	
  6362                           ; 0 bytes @ 0x0
  6363                           
  6364  0070                     ?_Print_BreakLine:	
  6365                           ; 0 bytes @ 0x0
  6366                           
  6367  0070                     ?_DS18B20_Write:	
  6368                           ; 0 bytes @ 0x0
  6369                           
  6370  0070                     ?_I2C_Dealy_1:	
  6371                           ; 0 bytes @ 0x0
  6372                           
  6373  0070                     ?_I2C_Dealy_2:	
  6374                           ; 0 bytes @ 0x0
  6375                           
  6376  0070                     ?_I2C_START_BIT:	
  6377                           ; 0 bytes @ 0x0
  6378                           
  6379  0070                     ?_I2C_STOP_BIT:	
  6380                           ; 0 bytes @ 0x0
  6381                           
  6382  0070                     ?_ASCII_OCT2HEX:	
  6383                           ; 0 bytes @ 0x0
  6384                           
  6385  0070                     ?_Convert_2HB:	
  6386                           ; 1 bytes @ 0x0
  6387                           
  6388  0070                     ?_Covert_BDC_2_OCT:	
  6389                           ; 1 bytes @ 0x0
  6390                           
  6391  0070                     ?_CheckRxOneByteFlag:	
  6392                           ; 1 bytes @ 0x0
  6393                           
  6394  0070                     ?_Check_1MSFlag:	
  6395                           ; 1 bytes @ 0x0
  6396                           
  6397  0070                     ?_CheckOneSecFlag:	
  6398                           ; 1 bytes @ 0x0
  6399                           
  6400  0070                     ?_DATAEE_ReadByte:	
  6401                           ; 1 bytes @ 0x0
  6402                           
  6403  0070                     ?_DS18B20_Reset:	
  6404                           ; 1 bytes @ 0x0
  6405                           
  6406  0070                     ?_DS18B20_Read:	
  6407                           ; 1 bytes @ 0x0
  6408                           
  6409  0070                     ?_I2C_WRITE_8BIT:	
  6410                           ; 1 bytes @ 0x0
  6411                           
  6412  0070                     ?_I2C_READ_8BIT:	
  6413                           ; 1 bytes @ 0x0
  6414                           
  6415                           
  6416                           ; 1 bytes @ 0x0
  6417  0070                     	ds	1
  6418  0071                     ??_INTERRUPT_InterruptManager:	
  6419                           
  6420                           ; 0 bytes @ 0x1
  6421  0071                     	ds	1
  6422  0072                     ??_OSCILLATOR_Initialize:	
  6423  0072                     ??_EUSART_Initialize:	
  6424                           ; 0 bytes @ 0x2
  6425                           
  6426  0072                     ??_ADC_Initialize:	
  6427                           ; 0 bytes @ 0x2
  6428                           
  6429  0072                     ??_DAC1_Initialize:	
  6430                           ; 0 bytes @ 0x2
  6431                           
  6432  0072                     ??_FVR_Initialize:	
  6433                           ; 0 bytes @ 0x2
  6434                           
  6435  0072                     ??_TMR2_Initialize:	
  6436                           ; 0 bytes @ 0x2
  6437                           
  6438  0072                     ??_TMR0_Initialize:	
  6439                           ; 0 bytes @ 0x2
  6440                           
  6441  0072                     ??_OPA1_Initialize:	
  6442                           ; 0 bytes @ 0x2
  6443                           
  6444  0072                     ??_OPA2_Initialize:	
  6445                           ; 0 bytes @ 0x2
  6446                           
  6447  0072                     ??_OPA3_Initialize:	
  6448                           ; 0 bytes @ 0x2
  6449                           
  6450  0072                     ??_TMR2_StartTimer:	
  6451                           ; 0 bytes @ 0x2
  6452                           
  6453  0072                     ??_ASCII_OCT2HEX:	
  6454                           ; 0 bytes @ 0x2
  6455                           
  6456  0072                     ??_Delay480us:	
  6457                           ; 0 bytes @ 0x2
  6458                           
  6459  0072                     ??_Delay5us:	
  6460                           ; 0 bytes @ 0x2
  6461                           
  6462  0072                     ??_Delay100us:	
  6463                           ; 0 bytes @ 0x2
  6464                           
  6465  0072                     ??_PIN_MANAGER_Initialize:	
  6466                           ; 0 bytes @ 0x2
  6467                           
  6468  0072                     ??_EUSART_Write:	
  6469                           ; 0 bytes @ 0x2
  6470                           
  6471  0072                     ??_CheckRxOneByteFlag:	
  6472                           ; 0 bytes @ 0x2
  6473                           
  6474  0072                     ??_Check_1MSFlag:	
  6475                           ; 0 bytes @ 0x2
  6476                           
  6477  0072                     ??_CheckOneSecFlag:	
  6478                           ; 0 bytes @ 0x2
  6479                           
  6480  0072                     ??_DAC1_SetOutput:	
  6481                           ; 0 bytes @ 0x2
  6482                           
  6483  0072                     ?_DATAEE_WriteByte:	
  6484                           ; 0 bytes @ 0x2
  6485                           
  6486  0072                     ??_DATAEE_ReadByte:	
  6487                           ; 0 bytes @ 0x2
  6488                           
  6489  0072                     ??_I2C_Dealy_1:	
  6490                           ; 0 bytes @ 0x2
  6491                           
  6492  0072                     ??_I2C_Dealy_2:	
  6493                           ; 0 bytes @ 0x2
  6494                           
  6495  0072                     ??_I2C_START_BIT:	
  6496                           ; 0 bytes @ 0x2
  6497                           
  6498  0072                     ??_I2C_STOP_BIT:	
  6499                           ; 0 bytes @ 0x2
  6500                           
  6501  0072                     ??_I2C_WRITE_8BIT:	
  6502                           ; 0 bytes @ 0x2
  6503                           
  6504  0072                     ??_I2C_READ_8BIT:	
  6505                           ; 0 bytes @ 0x2
  6506                           
  6507  0072                     ?_Covert_Month_2_Day:	
  6508                           ; 0 bytes @ 0x2
  6509                           
  6510  0072                     ?_ADC_GetConversion:	
  6511                           ; 2 bytes @ 0x2
  6512                           
  6513  0072                     ?___wmul:	
  6514                           ; 2 bytes @ 0x2
  6515                           
  6516  0072                     ?___awdiv:	
  6517                           ; 2 bytes @ 0x2
  6518                           
  6519  0072                     ?___awmod:	
  6520                           ; 2 bytes @ 0x2
  6521                           
  6522  0072                     ?___lwdiv:	
  6523                           ; 2 bytes @ 0x2
  6524                           
  6525  0072                     ?___lwmod:	
  6526                           ; 2 bytes @ 0x2
  6527                           
  6528  0072                     ?___lmul:	
  6529                           ; 2 bytes @ 0x2
  6530                           
  6531  0072                     ?___lldiv:	
  6532                           ; 4 bytes @ 0x2
  6533                           
  6534  0072                     ?___llmod:	
  6535                           ; 4 bytes @ 0x2
  6536                           
  6537  0072                     DAC1_SetOutput@inputData:	
  6538                           ; 4 bytes @ 0x2
  6539                           
  6540  0072                     DATAEE_WriteByte@bData:	
  6541                           ; 1 bytes @ 0x2
  6542                           
  6543  0072                     DATAEE_ReadByte@bAdd:	
  6544                           ; 1 bytes @ 0x2
  6545                           
  6546  0072                     Covert_Month_2_Day@iMonth:	
  6547                           ; 1 bytes @ 0x2
  6548                           
  6549  0072                     ___wmul@multiplier:	
  6550                           ; 2 bytes @ 0x2
  6551                           
  6552  0072                     ___awdiv@divisor:	
  6553                           ; 2 bytes @ 0x2
  6554                           
  6555  0072                     ___awmod@divisor:	
  6556                           ; 2 bytes @ 0x2
  6557                           
  6558  0072                     ___lwdiv@divisor:	
  6559                           ; 2 bytes @ 0x2
  6560                           
  6561  0072                     ___lwmod@divisor:	
  6562                           ; 2 bytes @ 0x2
  6563                           
  6564  0072                     ___lmul@multiplier:	
  6565                           ; 2 bytes @ 0x2
  6566                           
  6567  0072                     ___lldiv@divisor:	
  6568                           ; 4 bytes @ 0x2
  6569                           
  6570  0072                     ___llmod@divisor:	
  6571                           ; 4 bytes @ 0x2
  6572                           
  6573                           
  6574                           ; 4 bytes @ 0x2
  6575  0072                     	ds	1
  6576  0073                     ??_SYSTEM_Initialize:	
  6577  0073                     ??_DATAEE_WriteByte:	
  6578                           ; 0 bytes @ 0x3
  6579                           
  6580  0073                     EUSART_Write@txData:	
  6581                           ; 0 bytes @ 0x3
  6582                           
  6583  0073                     DATAEE_WriteByte@bAdd:	
  6584                           ; 1 bytes @ 0x3
  6585                           
  6586  0073                     ASCII_OCT2HEX@ASCII_OCT:	
  6587                           ; 1 bytes @ 0x3
  6588                           
  6589  0073                     Delay480us@s:	
  6590                           ; 1 bytes @ 0x3
  6591                           
  6592  0073                     Delay100us@s:	
  6593                           ; 1 bytes @ 0x3
  6594                           
  6595  0073                     I2C_WRITE_8BIT@value:	
  6596                           ; 1 bytes @ 0x3
  6597                           
  6598  0073                     I2C_READ_8BIT@acknowledge:	
  6599                           ; 1 bytes @ 0x3
  6600                           
  6601                           
  6602                           ; 1 bytes @ 0x3
  6603  0073                     	ds	1
  6604  0074                     ?_Print_String:	
  6605  0074                     ??_Print_CHLN:	
  6606                           ; 0 bytes @ 0x4
  6607                           
  6608  0074                     ??_Covert_Month_2_Day:	
  6609                           ; 0 bytes @ 0x4
  6610                           
  6611  0074                     ??_ADC_GetConversion:	
  6612                           ; 0 bytes @ 0x4
  6613                           
  6614  0074                     ??_Print_BreakLine:	
  6615                           ; 0 bytes @ 0x4
  6616                           
  6617  0074                     ?_STR2HEX:	
  6618                           ; 0 bytes @ 0x4
  6619                           
  6620  0074                     DATAEE_WriteByte@GIEBitValue:	
  6621                           ; 1 bytes @ 0x4
  6622                           
  6623  0074                     STR2HEX@NumPoint:	
  6624                           ; 1 bytes @ 0x4
  6625                           
  6626  0074                     Delay480us@i:	
  6627                           ; 1 bytes @ 0x4
  6628                           
  6629  0074                     Delay100us@i:	
  6630                           ; 1 bytes @ 0x4
  6631                           
  6632  0074                     I2C_WRITE_8BIT@i:	
  6633                           ; 1 bytes @ 0x4
  6634                           
  6635  0074                     I2C_READ_8BIT@i:	
  6636                           ; 1 bytes @ 0x4
  6637                           
  6638  0074                     Print_BreakLine@loopA:	
  6639                           ; 1 bytes @ 0x4
  6640                           
  6641  0074                     Print_String@BStr:	
  6642                           ; 2 bytes @ 0x4
  6643                           
  6644  0074                     ___wmul@multiplicand:	
  6645                           ; 2 bytes @ 0x4
  6646                           
  6647  0074                     ___awdiv@dividend:	
  6648                           ; 2 bytes @ 0x4
  6649                           
  6650  0074                     ___awmod@dividend:	
  6651                           ; 2 bytes @ 0x4
  6652                           
  6653  0074                     ___lwdiv@dividend:	
  6654                           ; 2 bytes @ 0x4
  6655                           
  6656  0074                     ___lwmod@dividend:	
  6657                           ; 2 bytes @ 0x4
  6658                           
  6659                           
  6660                           ; 2 bytes @ 0x4
  6661  0074                     	ds	1
  6662  0075                     ??_STR2HEX:	
  6663  0075                     ??_DS18B20_Reset:	
  6664                           ; 0 bytes @ 0x5
  6665                           
  6666  0075                     ??_DS18B20_Write:	
  6667                           ; 0 bytes @ 0x5
  6668                           
  6669  0075                     ??_DS18B20_Read:	
  6670                           ; 0 bytes @ 0x5
  6671                           
  6672  0075                     ADC_GetConversion@channel:	
  6673                           ; 0 bytes @ 0x5
  6674                           
  6675  0075                     DS18B20_Reset@vByte:	
  6676                           ; 1 bytes @ 0x5
  6677                           
  6678  0075                     I2C_WRITE_8BIT@ack:	
  6679                           ; 1 bytes @ 0x5
  6680                           
  6681  0075                     I2C_READ_8BIT@rSCL:	
  6682                           ; 1 bytes @ 0x5
  6683                           
  6684                           
  6685                           ; 1 bytes @ 0x5
  6686  0075                     	ds	1
  6687  0076                     ??___wmul:	
  6688  0076                     ??___awdiv:	
  6689                           ; 0 bytes @ 0x6
  6690                           
  6691  0076                     ??___awmod:	
  6692                           ; 0 bytes @ 0x6
  6693                           
  6694  0076                     ??___lwdiv:	
  6695                           ; 0 bytes @ 0x6
  6696                           
  6697  0076                     ??___lwmod:	
  6698                           ; 0 bytes @ 0x6
  6699                           
  6700  0076                     ?_I2C_mWrite:	
  6701                           ; 0 bytes @ 0x6
  6702                           
  6703  0076                     Print_String@chln:	
  6704                           ; 1 bytes @ 0x6
  6705                           
  6706  0076                     DS18B20_Write@vByte:	
  6707                           ; 1 bytes @ 0x6
  6708                           
  6709  0076                     DS18B20_Read@vByte:	
  6710                           ; 1 bytes @ 0x6
  6711                           
  6712  0076                     I2C_READ_8BIT@value:	
  6713                           ; 1 bytes @ 0x6
  6714                           
  6715  0076                     I2C_mWrite@value:	
  6716                           ; 1 bytes @ 0x6
  6717                           
  6718  0076                     ___wmul@product:	
  6719                           ; 2 bytes @ 0x6
  6720                           
  6721  0076                     ___lmul@multiplicand:	
  6722                           ; 2 bytes @ 0x6
  6723                           
  6724  0076                     ___lldiv@dividend:	
  6725                           ; 4 bytes @ 0x6
  6726                           
  6727  0076                     ___llmod@dividend:	
  6728                           ; 4 bytes @ 0x6
  6729                           
  6730                           
  6731                           ; 4 bytes @ 0x6
  6732  0076                     	ds	1
  6733  0077                     ??_Print_String:	
  6734  0077                     ?_I2C_mREAD:	
  6735                           ; 0 bytes @ 0x7
  6736                           
  6737  0077                     ?_Print_HEX2Str:	
  6738                           ; 0 bytes @ 0x7
  6739                           
  6740  0077                     ??_Print_HMS:	
  6741                           ; 0 bytes @ 0x7
  6742                           
  6743  0077                     ??_Print_YMD:	
  6744                           ; 0 bytes @ 0x7
  6745                           
  6746  0077                     ?___bmul:	
  6747                           ; 0 bytes @ 0x7
  6748                           
  6749  0077                     Print_HEX2Str@Chgln:	
  6750                           ; 1 bytes @ 0x7
  6751                           
  6752  0077                     DS18B20_Write@i:	
  6753                           ; 1 bytes @ 0x7
  6754                           
  6755  0077                     DS18B20_Read@i:	
  6756                           ; 1 bytes @ 0x7
  6757                           
  6758  0077                     I2C_mREAD@Size:	
  6759                           ; 1 bytes @ 0x7
  6760                           
  6761  0077                     ___bmul@multiplicand:	
  6762                           ; 1 bytes @ 0x7
  6763                           
  6764  0077                     ___awmod@counter:	
  6765                           ; 1 bytes @ 0x7
  6766                           
  6767  0077                     ___lwmod@counter:	
  6768                           ; 1 bytes @ 0x7
  6769                           
  6770  0077                     ___lwdiv@quotient:	
  6771                           ; 1 bytes @ 0x7
  6772                           
  6773                           
  6774                           ; 2 bytes @ 0x7
  6775  0077                     	ds	1
  6776  0078                     ??_Print_HEX2Str:	
  6777  0078                     ??___bmul:	
  6778                           ; 0 bytes @ 0x8
  6779                           
  6780  0078                     STR2HEX@BStr:	
  6781                           ; 0 bytes @ 0x8
  6782                           
  6783  0078                     I2C_mWrite@Size:	
  6784                           ; 1 bytes @ 0x8
  6785                           
  6786  0078                     I2C_mREAD@slave_addr:	
  6787                           ; 1 bytes @ 0x8
  6788                           
  6789  0078                     ___awmod@sign:	
  6790                           ; 1 bytes @ 0x8
  6791                           
  6792                           
  6793                           ; 1 bytes @ 0x8
  6794  0078                     	ds	1
  6795  0079                     Covert_BDC_2_OCT@iBDC:	
  6796  0079                     I2C_mWrite@slave_addr:	
  6797                           ; 1 bytes @ 0x9
  6798                           
  6799  0079                     ___lwdiv@counter:	
  6800                           ; 1 bytes @ 0x9
  6801                           
  6802                           
  6803                           ; 1 bytes @ 0x9
  6804  0079                     	ds	1
  6805  007A                     ??_TEST_PIC_ALL:	
  6806  007A                     ??___lmul:	
  6807                           ; 0 bytes @ 0xA
  6808                           
  6809                           
  6810                           	psect	cstackBANK0
  6811  0020                     __pcstackBANK0:	
  6812                           ; 0 bytes @ 0xA
  6813                           
  6814  0020                     ?_Print_uint16Str:	
  6815  0020                     ??_I2C_mWrite:	
  6816                           ; 0 bytes @ 0x0
  6817                           
  6818  0020                     ??_I2C_mREAD:	
  6819                           ; 0 bytes @ 0x0
  6820                           
  6821  0020                     ??___lldiv:	
  6822                           ; 0 bytes @ 0x0
  6823                           
  6824  0020                     ??___llmod:	
  6825                           ; 0 bytes @ 0x0
  6826                           
  6827  0020                     ___awdiv@counter:	
  6828                           ; 0 bytes @ 0x0
  6829                           
  6830  0020                     Print_String@loopA:	
  6831                           ; 1 bytes @ 0x0
  6832                           
  6833  0020                     Print_uint16Str@InputVol:	
  6834                           ; 2 bytes @ 0x0
  6835                           
  6836  0020                     ___lmul@product:	
  6837                           ; 2 bytes @ 0x0
  6838                           
  6839  0020                     Covert_Month_2_Day@MonthTable:	
  6840                           ; 4 bytes @ 0x0
  6841                           
  6842                           
  6843                           ; 24 bytes @ 0x0
  6844  0020                     	ds	1
  6845  0021                     ___awdiv@sign:	
  6846  0021                     ___llmod@counter:	
  6847                           ; 1 bytes @ 0x1
  6848                           
  6849  0021                     ___lldiv@quotient:	
  6850                           ; 1 bytes @ 0x1
  6851                           
  6852                           
  6853                           ; 4 bytes @ 0x1
  6854  0021                     	ds	1
  6855  0022                     Print_String@Data:	
  6856  0022                     Print_uint16Str@Chgln:	
  6857                           ; 1 bytes @ 0x2
  6858                           
  6859  0022                     I2C_mREAD@rSCL:	
  6860                           ; 1 bytes @ 0x2
  6861                           
  6862  0022                     ___awdiv@quotient:	
  6863                           ; 1 bytes @ 0x2
  6864                           
  6865                           
  6866                           ; 2 bytes @ 0x2
  6867  0022                     	ds	1
  6868  0023                     ??_Print_uint16Str:	
  6869  0023                     I2C_mWrite@i:	
  6870                           ; 0 bytes @ 0x3
  6871                           
  6872  0023                     I2C_mREAD@i:	
  6873                           ; 1 bytes @ 0x3
  6874                           
  6875                           
  6876                           ; 1 bytes @ 0x3
  6877  0023                     	ds	1
  6878  0024                     ??_Convert_2HB:	
  6879  0024                     ?_Print_HMS:	
  6880                           ; 0 bytes @ 0x4
  6881                           
  6882  0024                     ?_Print_YMD:	
  6883                           ; 0 bytes @ 0x4
  6884                           
  6885  0024                     Print_uint16Str@Chk19:	
  6886                           ; 0 bytes @ 0x4
  6887                           
  6888  0024                     Print_HEX2Str@InputVol:	
  6889                           ; 1 bytes @ 0x4
  6890                           
  6891  0024                     I2C_mWrite@j:	
  6892                           ; 1 bytes @ 0x4
  6893                           
  6894  0024                     I2C_mREAD@ack:	
  6895                           ; 1 bytes @ 0x4
  6896                           
  6897  0024                     ___bmul@product:	
  6898                           ; 1 bytes @ 0x4
  6899                           
  6900  0024                     Print_HMS@rClock:	
  6901                           ; 1 bytes @ 0x4
  6902                           
  6903  0024                     Print_YMD@rClock:	
  6904                           ; 6 bytes @ 0x4
  6905                           
  6906                           
  6907                           ; 6 bytes @ 0x4
  6908  0024                     	ds	1
  6909  0025                     Print_HEX2Str@wOneByte:	
  6910  0025                     I2C_mWrite@Check_Error:	
  6911                           ; 1 bytes @ 0x5
  6912                           
  6913  0025                     I2C_mREAD@value:	
  6914                           ; 1 bytes @ 0x5
  6915                           
  6916  0025                     ___bmul@multiplier:	
  6917                           ; 1 bytes @ 0x5
  6918                           
  6919  0025                     ___lldiv@counter:	
  6920                           ; 1 bytes @ 0x5
  6921                           
  6922  0025                     Print_uint16Str@loopA:	
  6923                           ; 1 bytes @ 0x5
  6924                           
  6925                           
  6926                           ; 2 bytes @ 0x5
  6927  0025                     	ds	1
  6928  0026                     ??_Covert_BDC_2_OCT:	
  6929  0026                     I2C_mREAD@j:	
  6930                           ; 0 bytes @ 0x6
  6931                           
  6932  0026                     Print_HEX2Str@HexCal:	
  6933                           ; 1 bytes @ 0x6
  6934                           
  6935                           
  6936                           ; 2 bytes @ 0x6
  6937  0026                     	ds	1
  6938  0027                     Convert_2HB@hNib:	
  6939  0027                     Print_uint16Str@CalVol:	
  6940                           ; 1 bytes @ 0x7
  6941                           
  6942                           
  6943                           ; 2 bytes @ 0x7
  6944  0027                     	ds	1
  6945  0028                     ??_I2C_TEST_10:	
  6946  0028                     ??_check_ADO_I2C:	
  6947                           ; 0 bytes @ 0x8
  6948                           
  6949  0028                     ?_I2C_Sequential_READ:	
  6950                           ; 0 bytes @ 0x8
  6951                           
  6952  0028                     ?_I2C_PAGE_WRITE:	
  6953                           ; 0 bytes @ 0x8
  6954                           
  6955  0028                     Convert_2HB@lNib:	
  6956                           ; 1 bytes @ 0x8
  6957                           
  6958  0028                     I2C_PAGE_WRITE@reg_addr_h:	
  6959                           ; 1 bytes @ 0x8
  6960                           
  6961  0028                     I2C_Sequential_READ@reg_addr_h:	
  6962                           ; 1 bytes @ 0x8
  6963                           
  6964                           
  6965                           ; 1 bytes @ 0x8
  6966  0028                     	ds	1
  6967  0029                     Convert_2HB@iCount:	
  6968  0029                     I2C_PAGE_WRITE@reg_addr_l:	
  6969                           ; 1 bytes @ 0x9
  6970                           
  6971  0029                     I2C_Sequential_READ@reg_addr_l:	
  6972                           ; 1 bytes @ 0x9
  6973                           
  6974  0029                     Print_uint16Str@DIVA:	
  6975                           ; 1 bytes @ 0x9
  6976                           
  6977                           
  6978                           ; 2 bytes @ 0x9
  6979  0029                     	ds	1
  6980  002A                     ?_Convert_HMS:	
  6981  002A                     ?_Convert_YMD:	
  6982                           ; 0 bytes @ 0xA
  6983                           
  6984  002A                     I2C_PAGE_WRITE@Size:	
  6985                           ; 0 bytes @ 0xA
  6986                           
  6987  002A                     I2C_Sequential_READ@Size:	
  6988                           ; 1 bytes @ 0xA
  6989                           
  6990  002A                     Convert_YMD@iCount:	
  6991                           ; 1 bytes @ 0xA
  6992                           
  6993  002A                     Convert_HMS@iCount:	
  6994                           ; 2 bytes @ 0xA
  6995                           
  6996                           
  6997                           ; 4 bytes @ 0xA
  6998  002A                     	ds	1
  6999  002B                     Print_uint16Str@wOneByte:	
  7000  002B                     I2C_PAGE_WRITE@value:	
  7001                           ; 1 bytes @ 0xB
  7002                           
  7003  002B                     I2C_Sequential_READ@value:	
  7004                           ; 1 bytes @ 0xB
  7005                           
  7006                           
  7007                           ; 1 bytes @ 0xB
  7008  002B                     	ds	1
  7009  002C                     ??_RUN_MESURE:	
  7010  002C                     ??_PIC_SYNC_ADO_ULSR:	
  7011                           ; 0 bytes @ 0xC
  7012                           
  7013  002C                     ??_DS18B20_GetTemp:	
  7014                           ; 0 bytes @ 0xC
  7015                           
  7016  002C                     ??_I2C_PAGE_WRITE:	
  7017                           ; 0 bytes @ 0xC
  7018                           
  7019  002C                     ??_I2C_Sequential_READ:	
  7020                           ; 0 bytes @ 0xC
  7021                           
  7022  002C                     Convert_YMD@rClock:	
  7023                           ; 0 bytes @ 0xC
  7024                           
  7025                           
  7026                           ; 1 bytes @ 0xC
  7027  002C                     	ds	1
  7028  002D                     ??_Convert_YMD:	
  7029                           
  7030                           ; 0 bytes @ 0xD
  7031  002D                     	ds	1
  7032  002E                     DS18B20_GetTemp@ack:	
  7033  002E                     Convert_HMS@rClock:	
  7034                           ; 1 bytes @ 0xE
  7035                           
  7036  002E                     I2C_PAGE_WRITE@slave_addr:	
  7037                           ; 1 bytes @ 0xE
  7038                           
  7039  002E                     I2C_Sequential_READ@ack:	
  7040                           ; 1 bytes @ 0xE
  7041                           
  7042  002E                     RUN_MESURE@setup_3t8:	
  7043                           ; 1 bytes @ 0xE
  7044                           
  7045                           
  7046                           ; 15 bytes @ 0xE
  7047  002E                     	ds	1
  7048  002F                     ??_Convert_HMS:	
  7049  002F                     DS18B20_GetTemp@rTwoByte:	
  7050                           ; 0 bytes @ 0xF
  7051                           
  7052  002F                     I2C_PAGE_WRITE@i:	
  7053                           ; 1 bytes @ 0xF
  7054                           
  7055  002F                     I2C_Sequential_READ@slave_addr:	
  7056                           ; 1 bytes @ 0xF
  7057                           
  7058  002F                     Convert_YMD@MonthTable:	
  7059                           ; 1 bytes @ 0xF
  7060                           
  7061                           
  7062                           ; 24 bytes @ 0xF
  7063  002F                     	ds	1
  7064  0030                     PIC_SYNC_ADO_ULSR@i:	
  7065  0030                     I2C_PAGE_WRITE@j:	
  7066                           ; 1 bytes @ 0x10
  7067                           
  7068  0030                     I2C_Sequential_READ@i:	
  7069                           ; 1 bytes @ 0x10
  7070                           
  7071  0030                     DS18B20_GetTemp@xTemp:	
  7072                           ; 1 bytes @ 0x10
  7073                           
  7074                           
  7075                           ; 2 bytes @ 0x10
  7076  0030                     	ds	1
  7077  0031                     I2C_PAGE_WRITE@Check_Error:	
  7078  0031                     I2C_Sequential_READ@j:	
  7079                           ; 1 bytes @ 0x11
  7080                           
  7081                           
  7082                           ; 1 bytes @ 0x11
  7083  0031                     	ds	1
  7084  0032                     ??_I2C_TEST_02:	
  7085  0032                     DS18B20_GetTemp@vByteLow:	
  7086                           ; 0 bytes @ 0x12
  7087                           
  7088                           
  7089                           ; 1 bytes @ 0x12
  7090  0032                     	ds	1
  7091  0033                     DS18B20_GetTemp@vByteHi:	
  7092                           
  7093                           ; 1 bytes @ 0x13
  7094  0033                     	ds	4
  7095  0037                     I2C_TEST_02@i2cData:	
  7096                           
  7097                           ; 16 bytes @ 0x17
  7098  0037                     	ds	1
  7099  0038                     Covert_Month_2_Day@CalResult:	
  7100                           
  7101                           ; 2 bytes @ 0x18
  7102  0038                     	ds	2
  7103  003A                     Covert_Month_2_Day@loopi:	
  7104                           
  7105                           ; 1 bytes @ 0x1A
  7106  003A                     	ds	1
  7107  003B                     ??_PIC_SYNC_ADO_RTC:	
  7108                           
  7109                           ; 0 bytes @ 0x1B
  7110  003B                     	ds	2
  7111  003D                     RUN_MESURE@tpWhatADC:	
  7112                           
  7113                           ; 1 bytes @ 0x1D
  7114  003D                     	ds	1
  7115  003E                     RUN_MESURE@AVG100:	
  7116                           
  7117                           ; 4 bytes @ 0x1E
  7118  003E                     	ds	4
  7119  0042                     RUN_MESURE@lpi:	
  7120                           
  7121                           ; 2 bytes @ 0x22
  7122  0042                     	ds	2
  7123  0044                     RUN_MESURE@WhatStrip:	
  7124                           
  7125                           ; 1 bytes @ 0x24
  7126  0044                     	ds	3
  7127  0047                     Convert_YMD@cDay:	
  7128  0047                     PIC_SYNC_ADO_RTC@cSec:	
  7129                           ; 1 bytes @ 0x27
  7130                           
  7131  0047                     I2C_TEST_02@i2cReadBuffer:	
  7132                           ; 2 bytes @ 0x27
  7133                           
  7134                           
  7135                           ; 16 bytes @ 0x27
  7136  0047                     	ds	1
  7137  0048                     Convert_YMD@cMonth:	
  7138                           
  7139                           ; 1 bytes @ 0x28
  7140  0048                     	ds	1
  7141  0049                     Convert_YMD@cYear:	
  7142  0049                     PIC_SYNC_ADO_RTC@cDay:	
  7143                           ; 1 bytes @ 0x29
  7144                           
  7145                           
  7146                           ; 2 bytes @ 0x29
  7147  0049                     	ds	1
  7148  004A                     Convert_YMD@i:	
  7149                           
  7150                           ; 1 bytes @ 0x2A
  7151  004A                     	ds	1
  7152  004B                     ??_UPLOAD_MESURE_REC:	
  7153  004B                     ??_print_RTC:	
  7154                           ; 0 bytes @ 0x2B
  7155                           
  7156  004B                     PIC_SYNC_ADO_RTC@cHour:	
  7157                           ; 0 bytes @ 0x2B
  7158                           
  7159                           
  7160                           ; 4 bytes @ 0x2B
  7161  004B                     	ds	2
  7162  004D                     UPLOAD_MESURE_REC@LoopA:	
  7163                           
  7164                           ; 1 bytes @ 0x2D
  7165  004D                     	ds	1
  7166  004E                     UPLOAD_MESURE_REC@BufferString:	
  7167                           
  7168                           ; 26 bytes @ 0x2E
  7169  004E                     	ds	1
  7170  004F                     PIC_SYNC_ADO_RTC@cMin:	
  7171                           
  7172                           ; 2 bytes @ 0x2F
  7173  004F                     	ds	2
  7174  0051                     PIC_SYNC_ADO_RTC@cYear:	
  7175                           
  7176                           ; 2 bytes @ 0x31
  7177  0051                     	ds	2
  7178  0053                     PIC_SYNC_ADO_RTC@cMonth:	
  7179                           
  7180                           ; 2 bytes @ 0x33
  7181  0053                     	ds	2
  7182  0055                     PIC_SYNC_ADO_RTC@i:	
  7183                           
  7184                           ; 1 bytes @ 0x35
  7185  0055                     	ds	2
  7186  0057                     I2C_TEST_02@SID:	
  7187                           
  7188                           ; 1 bytes @ 0x37
  7189  0057                     	ds	1
  7190  0058                     I2C_TEST_02@Check_Error:	
  7191                           
  7192                           ; 1 bytes @ 0x38
  7193  0058                     	ds	1
  7194  0059                     I2C_TEST_02@i2cAddr_l:	
  7195                           
  7196                           ; 1 bytes @ 0x39
  7197  0059                     	ds	1
  7198  005A                     I2C_TEST_02@i:	
  7199                           
  7200                           ; 1 bytes @ 0x3A
  7201  005A                     	ds	1
  7202  005B                     I2C_TEST_02@i2cAddr_h:	
  7203                           
  7204                           ; 1 bytes @ 0x3B
  7205  005B                     	ds	13
  7206  0068                     ?_Decode_RS232_CMD:	
  7207  0068                     Decode_RS232_CMD@Strlen:	
  7208                           ; 0 bytes @ 0x48
  7209                           
  7210                           
  7211                           ; 1 bytes @ 0x48
  7212  0068                     	ds	1
  7213  0069                     ??_Decode_RS232_CMD:	
  7214                           
  7215                           ; 0 bytes @ 0x49
  7216  0069                     	ds	2
  7217  006B                     Decode_RS232_CMD@Adr:	
  7218                           
  7219                           ; 1 bytes @ 0x4B
  7220  006B                     	ds	1
  7221  006C                     Decode_RS232_CMD@Data:	
  7222                           
  7223                           ; 1 bytes @ 0x4C
  7224  006C                     	ds	1
  7225  006D                     Decode_RS232_CMD@BStr:	
  7226                           
  7227                           ; 1 bytes @ 0x4D
  7228  006D                     	ds	1
  7229  006E                     main@loop_tds:	
  7230                           
  7231                           ; 2 bytes @ 0x4E
  7232  006E                     	ds	2
  7233                           
  7234                           	psect	maintext
  7235  0CA5                     __pmaintext:	
  7236 ;;
  7237 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  7238 ;;
  7239 ;; *************** function _main *****************
  7240 ;; Defined at:
  7241 ;;		line 331 in file "main.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;		None
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;  loop_tds        2   78[BANK0 ] unsigned int 
  7246 ;; Return value:  Size  Location     Type
  7247 ;;		None               void
  7248 ;; Registers used:
  7249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7250 ;; Tracked objects:
  7251 ;;		On entry : B1F/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7256 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7257 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7258 ;;      Totals:         0       2       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7259 ;;Total ram usage:        6 bytes
  7260 ;; Hardware stack levels required when called:   10
  7261 ;; This function calls:
  7262 ;;		_ADC_GetConversion
  7263 ;;		_CheckOneSecFlag
  7264 ;;		_CheckRxOneByteFlag
  7265 ;;		_Check_1MSFlag
  7266 ;;		_DAC1_SetOutput
  7267 ;;		_Decode_RS232_CMD
  7268 ;;		_I2C_mREAD
  7269 ;;		_I2C_mWrite
  7270 ;;		_PIC_SYNC_ADO_RTC
  7271 ;;		_PIC_SYNC_ADO_ULSR
  7272 ;;		_Print_CHLN
  7273 ;;		_Print_HEX2Str
  7274 ;;		_Print_String
  7275 ;;		_Print_uint16Str
  7276 ;;		_RUN_MESURE
  7277 ;;		_SYSTEM_Initialize
  7278 ;;		_TEST_PIC_ALL
  7279 ;;		_UPLOAD_MESURE_REC
  7280 ;;		___lldiv
  7281 ;;		___wmul
  7282 ;; This function is called by:
  7283 ;;		Startup code after reset
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           
  7288                           ;psect for function _main
  7289  0CA5                     _main:	
  7290                           
  7291                           ;main.c: 333: uint16_t loop_tds = 0;
  7292                           
  7293                           ;incstack = 0
  7294                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7295  0CA5  0020               	movlb	0	; select bank0
  7296  0CA6  01EE               	clrf	main@loop_tds
  7297  0CA7  01EF               	clrf	main@loop_tds+1
  7298                           
  7299                           ;main.c: 337: SYSTEM_Initialize();
  7300  0CA8  319B  2345  318C   	fcall	_SYSTEM_Initialize
  7301                           
  7302                           ;main.c: 343: (INTCONbits.GIE = 1);
  7303  0CAB  178B               	bsf	11,7	;volatile
  7304                           
  7305                           ;main.c: 346: (INTCONbits.PEIE = 1);
  7306  0CAC  170B               	bsf	11,6	;volatile
  7307                           
  7308                           ;main.c: 361: do { LATD3 = 1; } while(0);
  7309  0CAD  0022               	movlb	2	; select bank2
  7310  0CAE  158F               	bsf	15,3	;volatile
  7311                           
  7312                           ;main.c: 363: do { ANSB0 = 1; } while(0);
  7313  0CAF  0023               	movlb	3	; select bank3
  7314  0CB0  140D               	bsf	13,0	;volatile
  7315                           
  7316                           ;main.c: 365: do { TRISC4 = 0; } while(0);
  7317  0CB1  0021               	movlb	1	; select bank1
  7318  0CB2  120E               	bcf	14,4	;volatile
  7319                           
  7320                           ;main.c: 366: do { TRISC3 = 0; } while(0);
  7321  0CB3  118E               	bcf	14,3	;volatile
  7322                           
  7323                           ;main.c: 367: do { LATC4 = 1; } while(0);
  7324  0CB4  0022               	movlb	2	; select bank2
  7325  0CB5  160E               	bsf	14,4	;volatile
  7326                           
  7327                           ;main.c: 368: do { LATC3 = 1; } while(0);
  7328  0CB6  158E               	bsf	14,3	;volatile
  7329                           
  7330                           ;main.c: 377: do { LATD4 = 1; } while(0);
  7331  0CB7  160F               	bsf	15,4	;volatile
  7332                           
  7333                           ;main.c: 379: DAC1_SetOutput(0xC0);
  7334  0CB8  30C0               	movlw	192
  7335  0CB9  3198  20FA  318C   	fcall	_DAC1_SetOutput
  7336                           
  7337                           ;main.c: 381: UPLOAD_MESURE_REC();
  7338  0CBC  3186  26C4  318C   	fcall	_UPLOAD_MESURE_REC
  7339                           
  7340                           ;main.c: 383: do { LATA2 = 1; } while(0);
  7341  0CBF  0022               	movlb	2	; select bank2
  7342  0CC0  150C               	bsf	12,2	;volatile
  7343                           
  7344                           ;main.c: 390: TEST_PIC_ALL();
  7345  0CC1  319C  2426  318C   	fcall	_TEST_PIC_ALL
  7346  0CC4  2EF7               	goto	l7786
  7347  0CC5                     l7788:	
  7348                           
  7349                           ;main.c: 409: {
  7350                           ;main.c: 410: if(RC1REG == '<')
  7351  0CC5  303C               	movlw	60
  7352  0CC6  0023               	movlb	3	; select bank3
  7353  0CC7  0619               	xorwf	25,w	;volatile
  7354  0CC8  1D03               	btfss	3,2
  7355  0CC9  2CCE               	goto	l7792
  7356                           
  7357                           ;main.c: 411: {
  7358                           ;main.c: 412: Flag_RxStr = 1;
  7359  0CCA  0022               	movlb	2	; select bank2
  7360  0CCB  01D0               	clrf	_Flag_RxStr^(0+256)
  7361  0CCC  0AD0               	incf	_Flag_RxStr^(0+256),f
  7362                           
  7363                           ;main.c: 413: }
  7364  0CCD  2EF7               	goto	l7786
  7365  0CCE                     l7792:	
  7366                           
  7367                           ;main.c: 414: else
  7368                           ;main.c: 415: {
  7369                           ;main.c: 416: if(RC1REG == '>')
  7370  0CCE  303E               	movlw	62
  7371  0CCF  0023               	movlb	3	; select bank3
  7372  0CD0  0619               	xorwf	25,w	;volatile
  7373  0CD1  1D03               	btfss	3,2
  7374  0CD2  2CFA               	goto	l7812
  7375                           
  7376                           ;main.c: 417: {
  7377                           ;main.c: 418: Flag_RxStr = 2;
  7378  0CD3  3002               	movlw	2
  7379  0CD4  0022               	movlb	2	; select bank2
  7380  0CD5  00EA               	movwf	??_main^(0+256)
  7381  0CD6  086A               	movf	??_main^(0+256),w
  7382  0CD7  00D0               	movwf	_Flag_RxStr^(0+256)
  7383                           
  7384                           ;main.c: 420: Decode_RS232_CMD(BufferStr,BufferLenght);
  7385  0CD8  084A               	movf	_BufferLenght^(0+256),w
  7386  0CD9  00EA               	movwf	??_main^(0+256)
  7387  0CDA  086A               	movf	??_main^(0+256),w
  7388  0CDB  0020               	movlb	0	; select bank0
  7389  0CDC  00E8               	movwf	Decode_RS232_CMD@Strlen
  7390  0CDD  3050               	movlw	(low (_BufferStr| (0+512)))& (0+255)
  7391  0CDE  3180  2099  318C   	fcall	_Decode_RS232_CMD
  7392                           
  7393                           ;main.c: 422: for(LoopA = 0; LoopA < 32; LoopA++)
  7394  0CE1  0021               	movlb	1	; select bank1
  7395  0CE2  01E4               	clrf	_LoopA^(0+128)
  7396  0CE3  3020               	movlw	32
  7397  0CE4  0264               	subwf	_LoopA^(0+128),w
  7398  0CE5  1803               	btfsc	3,0
  7399  0CE6  2CF7               	goto	l7810
  7400  0CE7                     l7804:	
  7401                           
  7402                           ;main.c: 423: *(BufferStr+LoopA) =0;
  7403  0CE7  0864               	movf	_LoopA^(0+128),w
  7404  0CE8  3E50               	addlw	(low (_BufferStr| (0+512)))& (0+255)
  7405  0CE9  0086               	movwf	6
  7406  0CEA  3002               	movlw	2	; select bank4/5
  7407  0CEB  0087               	movwf	7
  7408  0CEC  0181               	clrf	1
  7409  0CED  3001               	movlw	1
  7410  0CEE  0022               	movlb	2	; select bank2
  7411  0CEF  00EA               	movwf	??_main^(0+256)
  7412  0CF0  086A               	movf	??_main^(0+256),w
  7413  0CF1  0021               	movlb	1	; select bank1
  7414  0CF2  07E4               	addwf	_LoopA^(0+128),f
  7415  0CF3  3020               	movlw	32
  7416  0CF4  0264               	subwf	_LoopA^(0+128),w
  7417  0CF5  1C03               	skipc
  7418  0CF6  2CE7               	goto	l7804
  7419  0CF7                     l7810:	
  7420                           
  7421                           ;main.c: 425: BufferLenght = 0;
  7422  0CF7  0022               	movlb	2	; select bank2
  7423  0CF8  01CA               	clrf	_BufferLenght^(0+256)
  7424                           
  7425                           ;main.c: 426: Flag_RxStr = 0;
  7426  0CF9  01D0               	clrf	_Flag_RxStr^(0+256)
  7427  0CFA                     l7812:	
  7428                           
  7429                           ;main.c: 427: }
  7430                           ;main.c: 429: if(Flag_RxStr == 1)
  7431  0CFA  0022               	movlb	2	; select bank2
  7432  0CFB  0350               	decf	_Flag_RxStr^(0+256),w
  7433  0CFC  1D03               	btfss	3,2
  7434  0CFD  2EF7               	goto	l7786
  7435                           
  7436                           ;main.c: 430: {
  7437                           ;main.c: 431: BufferStr[BufferLenght++] = RC1REG;
  7438  0CFE  0023               	movlb	3	; select bank3
  7439  0CFF  0819               	movf	25,w	;volatile
  7440  0D00  0022               	movlb	2	; select bank2
  7441  0D01  00EA               	movwf	??_main^(0+256)
  7442  0D02  084A               	movf	_BufferLenght^(0+256),w
  7443  0D03  3E50               	addlw	(low (_BufferStr| (0+512)))& (0+255)
  7444  0D04  0086               	movwf	6
  7445  0D05  3002               	movlw	2	; select bank4/5
  7446  0D06  0087               	movwf	7
  7447  0D07  086A               	movf	??_main^(0+256),w
  7448  0D08  0081               	movwf	1
  7449  0D09  3001               	movlw	1
  7450  0D0A  00EA               	movwf	??_main^(0+256)
  7451  0D0B  086A               	movf	??_main^(0+256),w
  7452  0D0C  07CA               	addwf	_BufferLenght^(0+256),f
  7453                           
  7454                           ;main.c: 432: }
  7455                           ;main.c: 433: }
  7456                           ;main.c: 434: }
  7457  0D0D  2EF7               	goto	l7786
  7458  0D0E                     l7820:	
  7459                           
  7460                           ;main.c: 442: {
  7461                           ;main.c: 443: if(Check_1MSFlag() == 1)
  7462  0D0E  3199  2136  318C   	fcall	_Check_1MSFlag
  7463  0D11  3A01               	xorlw	1
  7464  0D12  1D03               	skipz
  7465  0D13  2EF7               	goto	l7786
  7466                           
  7467                           ;main.c: 444: {
  7468                           ;main.c: 445: PWM_1MS_COUNT++;
  7469  0D14  3001               	movlw	1
  7470  0D15  0022               	movlb	2	; select bank2
  7471  0D16  00EA               	movwf	??_main^(0+256)
  7472  0D17  086A               	movf	??_main^(0+256),w
  7473  0D18  0021               	movlb	1	; select bank1
  7474  0D19  07E5               	addwf	_PWM_1MS_COUNT^(0+128),f
  7475                           
  7476                           ;main.c: 447: if(PWM_1MS_COUNT & 0x01 )
  7477  0D1A  1C65               	btfss	_PWM_1MS_COUNT^(0+128),0
  7478  0D1B  2D1F               	goto	l608
  7479                           
  7480                           ;main.c: 448: do { LATA4 = 1; } while(0);
  7481  0D1C  0022               	movlb	2	; select bank2
  7482  0D1D  160C               	bsf	12,4	;volatile
  7483  0D1E  2D21               	goto	l7826
  7484  0D1F                     l608:	
  7485                           ;main.c: 449: else
  7486                           ;main.c: 450: do { LATA4 = 0; } while(0);
  7487                           
  7488  0D1F  0022               	movlb	2	; select bank2
  7489  0D20  120C               	bcf	12,4	;volatile
  7490  0D21                     l7826:	
  7491                           
  7492                           ;main.c: 452: for(loop_tds = 0; loop_tds < 3; loop_tds++)
  7493  0D21  0020               	movlb	0	; select bank0
  7494  0D22  01EE               	clrf	main@loop_tds
  7495  0D23  01EF               	clrf	main@loop_tds+1
  7496  0D24  3000               	movlw	0
  7497  0D25  026F               	subwf	main@loop_tds+1,w
  7498  0D26  3003               	movlw	3
  7499  0D27  1903               	skipnz
  7500  0D28  026E               	subwf	main@loop_tds,w
  7501  0D29  1803               	btfsc	3,0
  7502  0D2A  2D46               	goto	l7834
  7503  0D2B                     l7832:	
  7504                           
  7505                           ;main.c: 453: ADC_Vol_cal = PWM_1MS_COUNT;
  7506  0D2B  0021               	movlb	1	; select bank1
  7507  0D2C  0865               	movf	_PWM_1MS_COUNT^(0+128),w
  7508  0D2D  0022               	movlb	2	; select bank2
  7509  0D2E  00EA               	movwf	??_main^(0+256)
  7510  0D2F  01EB               	clrf	(??_main^(0+256)+1)
  7511  0D30  01EC               	clrf	(??_main^(0+256)+2)
  7512  0D31  01ED               	clrf	(??_main^(0+256)+3)
  7513  0D32  086D               	movf	(??_main+3)^(0+256),w
  7514  0D33  00BB               	movwf	(_ADC_Vol_cal+3)^(0+256)
  7515  0D34  086C               	movf	(??_main+2)^(0+256),w
  7516  0D35  00BA               	movwf	(_ADC_Vol_cal+2)^(0+256)
  7517  0D36  086B               	movf	(??_main+1)^(0+256),w
  7518  0D37  00B9               	movwf	(_ADC_Vol_cal+1)^(0+256)
  7519  0D38  086A               	movf	??_main^(0+256),w
  7520  0D39  00B8               	movwf	_ADC_Vol_cal^(0+256)
  7521  0D3A  3001               	movlw	1
  7522  0D3B  0020               	movlb	0	; select bank0
  7523  0D3C  07EE               	addwf	main@loop_tds,f
  7524  0D3D  3000               	movlw	0
  7525  0D3E  3DEF               	addwfc	main@loop_tds+1,f
  7526  0D3F  3000               	movlw	0
  7527  0D40  026F               	subwf	main@loop_tds+1,w
  7528  0D41  3003               	movlw	3
  7529  0D42  1903               	skipnz
  7530  0D43  026E               	subwf	main@loop_tds,w
  7531  0D44  1C03               	skipc
  7532  0D45  2D2B               	goto	l7832
  7533  0D46                     l7834:	
  7534                           
  7535                           ;main.c: 457: if(MES_TDS_FLAG == 1)
  7536  0D46  0022               	movlb	2	; select bank2
  7537  0D47  0353               	decf	_MES_TDS_FLAG^(0+256),w
  7538  0D48  1D03               	btfss	3,2
  7539  0D49  2EF7               	goto	l7786
  7540                           
  7541                           ;main.c: 458: {
  7542                           ;main.c: 459: if(PWM_1MS_COUNT == 0xFD )
  7543  0D4A  30FD               	movlw	253
  7544  0D4B  0021               	movlb	1	; select bank1
  7545  0D4C  0665               	xorwf	_PWM_1MS_COUNT^(0+128),w
  7546  0D4D  1D03               	btfss	3,2
  7547  0D4E  2D9C               	goto	l7854
  7548                           
  7549                           ;main.c: 460: {
  7550                           ;main.c: 461: ADC_Vol_cal = 0;
  7551  0D4F  3000               	movlw	0
  7552  0D50  0022               	movlb	2	; select bank2
  7553  0D51  00BB               	movwf	(_ADC_Vol_cal+3)^(0+256)
  7554  0D52  3000               	movlw	0
  7555  0D53  00BA               	movwf	(_ADC_Vol_cal+2)^(0+256)
  7556  0D54  3000               	movlw	0
  7557  0D55  00B9               	movwf	(_ADC_Vol_cal+1)^(0+256)
  7558  0D56  3000               	movlw	0
  7559  0D57  00B8               	movwf	_ADC_Vol_cal^(0+256)
  7560                           
  7561                           ;main.c: 462: for(loop_tds = 0; loop_tds < 10; loop_tds++)
  7562  0D58  0020               	movlb	0	; select bank0
  7563  0D59  01EE               	clrf	main@loop_tds
  7564  0D5A  01EF               	clrf	main@loop_tds+1
  7565  0D5B  3000               	movlw	0
  7566  0D5C  026F               	subwf	main@loop_tds+1,w
  7567  0D5D  300A               	movlw	10
  7568  0D5E  1903               	skipnz
  7569  0D5F  026E               	subwf	main@loop_tds,w
  7570  0D60  1803               	btfsc	3,0
  7571  0D61  2D83               	goto	l7852
  7572  0D62                     l7846:	
  7573                           
  7574                           ;main.c: 463: ADC_Vol_cal += (uint32_t)(ADC_GetConversion(MESURE_TDS)/16);
  7575  0D62  300B               	movlw	11
  7576  0D63  319A  2207  318C   	fcall	_ADC_GetConversion
  7577  0D66  0872               	movf	?_ADC_GetConversion,w
  7578  0D67  0022               	movlb	2	; select bank2
  7579  0D68  00EA               	movwf	??_main^(0+256)
  7580  0D69  0873               	movf	?_ADC_GetConversion+1,w
  7581  0D6A  00EB               	movwf	(??_main^(0+256)+1)
  7582  0D6B  3004               	movlw	4
  7583  0D6C                     u9075:	
  7584  0D6C  36EB               	lsrf	(??_main^(0+256)+1),f
  7585  0D6D  0CEA               	rrf	??_main^(0+256),f
  7586  0D6E  0B89               	decfsz	9,f
  7587  0D6F  2D6C               	goto	u9075
  7588  0D70  086A               	movf	??_main^(0+256),w
  7589  0D71  07B8               	addwf	_ADC_Vol_cal^(0+256),f
  7590  0D72  086B               	movf	(??_main+1)^(0+256),w
  7591  0D73  3DB9               	addwfc	(_ADC_Vol_cal+1)^(0+256),f
  7592  0D74  3000               	movlw	0
  7593  0D75  3DBA               	addwfc	(_ADC_Vol_cal+2)^(0+256),f
  7594  0D76  3DBB               	addwfc	(_ADC_Vol_cal+3)^(0+256),f
  7595  0D77  3001               	movlw	1
  7596  0D78  0020               	movlb	0	; select bank0
  7597  0D79  07EE               	addwf	main@loop_tds,f
  7598  0D7A  3000               	movlw	0
  7599  0D7B  3DEF               	addwfc	main@loop_tds+1,f
  7600  0D7C  3000               	movlw	0
  7601  0D7D  026F               	subwf	main@loop_tds+1,w
  7602  0D7E  300A               	movlw	10
  7603  0D7F  1903               	skipnz
  7604  0D80  026E               	subwf	main@loop_tds,w
  7605  0D81  1C03               	skipc
  7606  0D82  2D62               	goto	l7846
  7607  0D83                     l7852:	
  7608                           
  7609                           ;main.c: 465: ADC_Vol = ADC_Vol_cal / 10;
  7610  0D83  3000               	movlw	0
  7611  0D84  00F5               	movwf	___lldiv@divisor+3
  7612  0D85  3000               	movlw	0
  7613  0D86  00F4               	movwf	___lldiv@divisor+2
  7614  0D87  3000               	movlw	0
  7615  0D88  00F3               	movwf	___lldiv@divisor+1
  7616  0D89  300A               	movlw	10
  7617  0D8A  00F2               	movwf	___lldiv@divisor
  7618  0D8B  0022               	movlb	2	; select bank2
  7619  0D8C  083B               	movf	(_ADC_Vol_cal+3)^(0+256),w
  7620  0D8D  00F9               	movwf	___lldiv@dividend+3
  7621  0D8E  083A               	movf	(_ADC_Vol_cal+2)^(0+256),w
  7622  0D8F  00F8               	movwf	___lldiv@dividend+2
  7623  0D90  0839               	movf	(_ADC_Vol_cal+1)^(0+256),w
  7624  0D91  00F7               	movwf	___lldiv@dividend+1
  7625  0D92  0838               	movf	_ADC_Vol_cal^(0+256),w
  7626  0D93  00F6               	movwf	___lldiv@dividend
  7627  0D94  319F  27AD  318C   	fcall	___lldiv
  7628  0D97  0873               	movf	?___lldiv+1,w
  7629  0D98  00FB               	movwf	_ADC_Vol+1
  7630  0D99  0872               	movf	?___lldiv,w
  7631  0D9A  00FA               	movwf	_ADC_Vol
  7632                           
  7633                           ;main.c: 468: }
  7634  0D9B  2EF7               	goto	l7786
  7635  0D9C                     l7854:	
  7636                           
  7637                           ;main.c: 469: else if(PWM_1MS_COUNT == 0xFE)
  7638  0D9C  30FE               	movlw	254
  7639  0D9D  0021               	movlb	1	; select bank1
  7640  0D9E  0665               	xorwf	_PWM_1MS_COUNT^(0+128),w
  7641  0D9F  1D03               	btfss	3,2
  7642  0DA0  2EF7               	goto	l7786
  7643                           
  7644                           ;main.c: 470: {
  7645                           ;main.c: 471: ADC_Vol_cal = 0;
  7646  0DA1  3000               	movlw	0
  7647  0DA2  0022               	movlb	2	; select bank2
  7648  0DA3  00BB               	movwf	(_ADC_Vol_cal+3)^(0+256)
  7649  0DA4  3000               	movlw	0
  7650  0DA5  00BA               	movwf	(_ADC_Vol_cal+2)^(0+256)
  7651  0DA6  3000               	movlw	0
  7652  0DA7  00B9               	movwf	(_ADC_Vol_cal+1)^(0+256)
  7653  0DA8  3000               	movlw	0
  7654  0DA9  00B8               	movwf	_ADC_Vol_cal^(0+256)
  7655                           
  7656                           ;main.c: 472: for(loop_tds = 0; loop_tds < 10; loop_tds++)
  7657  0DAA  0020               	movlb	0	; select bank0
  7658  0DAB  01EE               	clrf	main@loop_tds
  7659  0DAC  01EF               	clrf	main@loop_tds+1
  7660  0DAD  3000               	movlw	0
  7661  0DAE  026F               	subwf	main@loop_tds+1,w
  7662  0DAF  300A               	movlw	10
  7663  0DB0  1903               	skipnz
  7664  0DB1  026E               	subwf	main@loop_tds,w
  7665  0DB2  1803               	btfsc	3,0
  7666  0DB3  2DD5               	goto	l7870
  7667  0DB4                     l7864:	
  7668                           
  7669                           ;main.c: 473: ADC_Vol_cal += (uint32_t)(ADC_GetConversion(MESURE_TDS)/16);
  7670  0DB4  300B               	movlw	11
  7671  0DB5  319A  2207  318C   	fcall	_ADC_GetConversion
  7672  0DB8  0872               	movf	?_ADC_GetConversion,w
  7673  0DB9  0022               	movlb	2	; select bank2
  7674  0DBA  00EA               	movwf	??_main^(0+256)
  7675  0DBB  0873               	movf	?_ADC_GetConversion+1,w
  7676  0DBC  00EB               	movwf	(??_main^(0+256)+1)
  7677  0DBD  3004               	movlw	4
  7678  0DBE                     u9115:	
  7679  0DBE  36EB               	lsrf	(??_main^(0+256)+1),f
  7680  0DBF  0CEA               	rrf	??_main^(0+256),f
  7681  0DC0  0B89               	decfsz	9,f
  7682  0DC1  2DBE               	goto	u9115
  7683  0DC2  086A               	movf	??_main^(0+256),w
  7684  0DC3  07B8               	addwf	_ADC_Vol_cal^(0+256),f
  7685  0DC4  086B               	movf	(??_main+1)^(0+256),w
  7686  0DC5  3DB9               	addwfc	(_ADC_Vol_cal+1)^(0+256),f
  7687  0DC6  3000               	movlw	0
  7688  0DC7  3DBA               	addwfc	(_ADC_Vol_cal+2)^(0+256),f
  7689  0DC8  3DBB               	addwfc	(_ADC_Vol_cal+3)^(0+256),f
  7690  0DC9  3001               	movlw	1
  7691  0DCA  0020               	movlb	0	; select bank0
  7692  0DCB  07EE               	addwf	main@loop_tds,f
  7693  0DCC  3000               	movlw	0
  7694  0DCD  3DEF               	addwfc	main@loop_tds+1,f
  7695  0DCE  3000               	movlw	0
  7696  0DCF  026F               	subwf	main@loop_tds+1,w
  7697  0DD0  300A               	movlw	10
  7698  0DD1  1903               	skipnz
  7699  0DD2  026E               	subwf	main@loop_tds,w
  7700  0DD3  1C03               	skipc
  7701  0DD4  2DB4               	goto	l7864
  7702  0DD5                     l7870:	
  7703                           
  7704                           ;main.c: 475: ADC_Volm = ADC_Vol_cal / 10;
  7705  0DD5  3000               	movlw	0
  7706  0DD6  00F5               	movwf	___lldiv@divisor+3
  7707  0DD7  3000               	movlw	0
  7708  0DD8  00F4               	movwf	___lldiv@divisor+2
  7709  0DD9  3000               	movlw	0
  7710  0DDA  00F3               	movwf	___lldiv@divisor+1
  7711  0DDB  300A               	movlw	10
  7712  0DDC  00F2               	movwf	___lldiv@divisor
  7713  0DDD  0022               	movlb	2	; select bank2
  7714  0DDE  083B               	movf	(_ADC_Vol_cal+3)^(0+256),w
  7715  0DDF  00F9               	movwf	___lldiv@dividend+3
  7716  0DE0  083A               	movf	(_ADC_Vol_cal+2)^(0+256),w
  7717  0DE1  00F8               	movwf	___lldiv@dividend+2
  7718  0DE2  0839               	movf	(_ADC_Vol_cal+1)^(0+256),w
  7719  0DE3  00F7               	movwf	___lldiv@dividend+1
  7720  0DE4  0838               	movf	_ADC_Vol_cal^(0+256),w
  7721  0DE5  00F6               	movwf	___lldiv@dividend
  7722  0DE6  319F  27AD  318C   	fcall	___lldiv
  7723  0DE9  0873               	movf	?___lldiv+1,w
  7724  0DEA  0022               	movlb	2	; select bank2
  7725  0DEB  00C1               	movwf	(_ADC_Volm+1)^(0+256)
  7726  0DEC  0872               	movf	?___lldiv,w
  7727  0DED  00C0               	movwf	_ADC_Volm^(0+256)
  7728                           
  7729                           ;main.c: 477: Print_String("TDS = $", 0);
  7730  0DEE  30DA               	movlw	low (STR_1| (0+32768))
  7731  0DEF  00F4               	movwf	Print_String@BStr
  7732  0DF0  3092               	movlw	high (STR_1| (0+32768))
  7733  0DF1  00F5               	movwf	Print_String@BStr+1
  7734  0DF2  01F6               	clrf	Print_String@chln
  7735  0DF3  319B  238A  318C   	fcall	_Print_String
  7736                           
  7737                           ;main.c: 481: if(ADC_Volm > ADC_Vol)
  7738  0DF6  0022               	movlb	2	; select bank2
  7739  0DF7  0841               	movf	(_ADC_Volm+1)^(0+256),w
  7740  0DF8  027B               	subwf	_ADC_Vol+1,w
  7741  0DF9  1D03               	skipz
  7742  0DFA  2DFD               	goto	u9135
  7743  0DFB  0840               	movf	_ADC_Volm^(0+256),w
  7744  0DFC  027A               	subwf	_ADC_Vol,w
  7745  0DFD                     u9135:	
  7746  0DFD  1803               	skipnc
  7747  0DFE  2E0D               	goto	l7878
  7748                           
  7749                           ;main.c: 482: Print_uint16Str((ADC_Volm-ADC_Vol),1);
  7750  0DFF  097A               	comf	_ADC_Vol,w
  7751  0E00  00EA               	movwf	??_main^(0+256)
  7752  0E01  097B               	comf	_ADC_Vol+1,w
  7753  0E02  00EB               	movwf	(??_main^(0+256)+1)
  7754  0E03  0AEA               	incf	??_main^(0+256),f
  7755  0E04  1903               	skipnz
  7756  0E05  0AEB               	incf	(??_main^(0+256)+1),f
  7757  0E06  0840               	movf	_ADC_Volm^(0+256),w
  7758  0E07  076A               	addwf	??_main^(0+256),w
  7759  0E08  0020               	movlb	0	; select bank0
  7760  0E09  00A0               	movwf	Print_uint16Str@InputVol
  7761  0E0A  0022               	movlb	2	; select bank2
  7762  0E0B  0841               	movf	(_ADC_Volm+1)^(0+256),w
  7763  0E0C  2E1B               	goto	L1
  7764  0E0D                     l7878:	
  7765                           
  7766                           ;main.c: 483: else
  7767                           ;main.c: 484: Print_uint16Str((ADC_Vol-ADC_Volm),1);
  7768  0E0D  0022               	movlb	2	; select bank2
  7769  0E0E  0940               	comf	_ADC_Volm^(0+256),w
  7770  0E0F  00EA               	movwf	??_main^(0+256)
  7771  0E10  0941               	comf	(_ADC_Volm+1)^(0+256),w
  7772  0E11  00EB               	movwf	(??_main^(0+256)+1)
  7773  0E12  0AEA               	incf	??_main^(0+256),f
  7774  0E13  1903               	skipnz
  7775  0E14  0AEB               	incf	(??_main^(0+256)+1),f
  7776  0E15  087A               	movf	_ADC_Vol,w
  7777  0E16  076A               	addwf	??_main^(0+256),w
  7778  0E17  0020               	movlb	0	; select bank0
  7779  0E18  00A0               	movwf	Print_uint16Str@InputVol
  7780  0E19  087B               	movf	_ADC_Vol+1,w
  7781  0E1A  0022               	movlb	2	; select bank2
  7782  0E1B                     L1:	
  7783  0E1B  3D6B               	addwfc	(??_main+1)^(0+256),w
  7784  0E1C  0020               	movlb	0	; select bank0
  7785  0E1D  00A1               	movwf	Print_uint16Str@InputVol+1
  7786  0E1E  01A2               	clrf	Print_uint16Str@Chgln
  7787  0E1F  0AA2               	incf	Print_uint16Str@Chgln,f
  7788  0E20  3196  2655  318C   	fcall	_Print_uint16Str
  7789                           
  7790                           ;main.c: 486: RUN_PWM_FLAG = 0;
  7791  0E23  0021               	movlb	1	; select bank1
  7792  0E24  01E6               	clrf	_RUN_PWM_FLAG^(0+128)
  7793                           
  7794                           ;main.c: 487: MES_TDS_FLAG = 1;
  7795  0E25  0022               	movlb	2	; select bank2
  7796  0E26  01D3               	clrf	_MES_TDS_FLAG^(0+256)
  7797  0E27  0AD3               	incf	_MES_TDS_FLAG^(0+256),f
  7798                           
  7799                           ;main.c: 488: }
  7800                           ;main.c: 489: }
  7801                           ;main.c: 528: }
  7802                           ;main.c: 529: }
  7803  0E28  2EF7               	goto	l7786
  7804  0E29                     l7886:	
  7805                           
  7806                           ;main.c: 537: {
  7807                           ;main.c: 538: RTC_SecCount++;
  7808  0E29  3001               	movlw	1
  7809  0E2A  0021               	movlb	1	; select bank1
  7810  0E2B  07DF               	addwf	_RTC_SecCount^(0+128),f
  7811  0E2C  3000               	movlw	0
  7812  0E2D  3DE0               	addwfc	(_RTC_SecCount+1)^(0+128),f
  7813  0E2E  3000               	movlw	0
  7814  0E2F  3DE1               	addwfc	(_RTC_SecCount+2)^(0+128),f
  7815  0E30  3000               	movlw	0
  7816  0E31  3DE2               	addwfc	(_RTC_SecCount+3)^(0+128),f
  7817                           
  7818                           ;main.c: 539: do { LATD3 = ~LATD3; } while(0);
  7819  0E32  3008               	movlw	8
  7820  0E33  0022               	movlb	2	; select bank2
  7821  0E34  068F               	xorwf	15,f
  7822                           
  7823                           ;main.c: 543: if((ErrorFlag & 0xF0) != 0)
  7824  0E35  084B               	movf	_ErrorFlag^(0+256),w
  7825  0E36  39F0               	andlw	240
  7826  0E37  1903               	btfsc	3,2
  7827  0E38  2E3C               	goto	l7892
  7828                           
  7829                           ;main.c: 544: do { LATD6 = ~LATD6; } while(0);
  7830  0E39  3040               	movlw	64
  7831  0E3A  068F               	xorwf	15,f
  7832  0E3B  2E43               	goto	l7894
  7833  0E3C                     l7892:	
  7834                           
  7835                           ;main.c: 545: else if((ErrorFlag & 0x0F) != 0)
  7836  0E3C  084B               	movf	_ErrorFlag^(0+256),w
  7837  0E3D  390F               	andlw	15
  7838  0E3E  1903               	btfsc	3,2
  7839  0E3F  2E42               	goto	l634
  7840                           
  7841                           ;main.c: 546: do { LATD6 = 1; } while(0);
  7842  0E40  170F               	bsf	15,6	;volatile
  7843  0E41  2E43               	goto	l7894
  7844  0E42                     l634:	
  7845                           ;main.c: 547: else
  7846                           ;main.c: 548: do { LATD6 = 0; } while(0);
  7847                           
  7848  0E42  130F               	bcf	15,6	;volatile
  7849  0E43                     l7894:	
  7850                           
  7851                           ;main.c: 550: if(RTC_SecCount >= (uint32_t)86400)
  7852  0E43  0021               	movlb	1	; select bank1
  7853  0E44  0862               	movf	(_RTC_SecCount+3)^(0+128),w
  7854  0E45  1D03               	btfss	3,2
  7855  0E46  2E4F               	goto	l7896
  7856  0E47  3080               	movlw	128
  7857  0E48  025F               	subwf	_RTC_SecCount^(0+128),w
  7858  0E49  3051               	movlw	81
  7859  0E4A  3B60               	subwfb	(_RTC_SecCount+1)^(0+128),w
  7860  0E4B  3001               	movlw	1
  7861  0E4C  3B61               	subwfb	(_RTC_SecCount+2)^(0+128),w
  7862  0E4D  1C03               	btfss	3,0
  7863  0E4E  2E6E               	goto	l636
  7864  0E4F                     l7896:	
  7865                           
  7866                           ;main.c: 551: {
  7867                           ;main.c: 552: RTC_DayCount++;
  7868  0E4F  3001               	movlw	1
  7869  0E50  0022               	movlb	2	; select bank2
  7870  0E51  07C8               	addwf	_RTC_DayCount^(0+256),f
  7871  0E52  3000               	movlw	0
  7872  0E53  3DC9               	addwfc	(_RTC_DayCount+1)^(0+256),f
  7873                           
  7874                           ;main.c: 553: RTC_SecCount = 0;
  7875  0E54  3000               	movlw	0
  7876  0E55  0021               	movlb	1	; select bank1
  7877  0E56  00E2               	movwf	(_RTC_SecCount+3)^(0+128)
  7878  0E57  3000               	movlw	0
  7879  0E58  00E1               	movwf	(_RTC_SecCount+2)^(0+128)
  7880  0E59  3000               	movlw	0
  7881  0E5A  00E0               	movwf	(_RTC_SecCount+1)^(0+128)
  7882  0E5B  3000               	movlw	0
  7883  0E5C  00DF               	movwf	_RTC_SecCount^(0+128)
  7884                           
  7885                           ;main.c: 554: NUL_SecCount -= (uint32_t)86400;
  7886  0E5D  3080               	movlw	128
  7887  0E5E  0022               	movlb	2	; select bank2
  7888  0E5F  00EA               	movwf	??_main^(0+256)
  7889  0E60  3051               	movlw	81
  7890  0E61  00EB               	movwf	(??_main^(0+256)+1)
  7891  0E62  3001               	movlw	1
  7892  0E63  00EC               	movwf	(??_main^(0+256)+2)
  7893  0E64  3000               	movlw	0
  7894  0E65  00ED               	movwf	(??_main^(0+256)+3)
  7895  0E66  086A               	movf	??_main^(0+256),w
  7896  0E67  02DF               	subwf	_NUL_SecCount^(0+256),f
  7897  0E68  086B               	movf	(??_main+1)^(0+256),w
  7898  0E69  3BE0               	subwfb	(_NUL_SecCount+1)^(0+256),f
  7899  0E6A  086C               	movf	(??_main+2)^(0+256),w
  7900  0E6B  3BE1               	subwfb	(_NUL_SecCount+2)^(0+256),f
  7901  0E6C  086D               	movf	(??_main+3)^(0+256),w
  7902  0E6D  3BE2               	subwfb	(_NUL_SecCount+3)^(0+256),f
  7903  0E6E                     l636:	
  7904                           
  7905                           ;main.c: 555: }
  7906                           ;main.c: 558: if(RTC_SecCount >= NUL_SecCount)
  7907  0E6E  0022               	movlb	2	; select bank2
  7908  0E6F  0862               	movf	(_NUL_SecCount+3)^(0+256),w
  7909  0E70  0021               	movlb	1	; select bank1
  7910  0E71  0262               	subwf	(_RTC_SecCount+3)^(0+128),w
  7911  0E72  1D03               	skipz
  7912  0E73  2E84               	goto	u9185
  7913  0E74  0022               	movlb	2	; select bank2
  7914  0E75  0861               	movf	(_NUL_SecCount+2)^(0+256),w
  7915  0E76  0021               	movlb	1	; select bank1
  7916  0E77  0261               	subwf	(_RTC_SecCount+2)^(0+128),w
  7917  0E78  1D03               	skipz
  7918  0E79  2E84               	goto	u9185
  7919  0E7A  0022               	movlb	2	; select bank2
  7920  0E7B  0860               	movf	(_NUL_SecCount+1)^(0+256),w
  7921  0E7C  0021               	movlb	1	; select bank1
  7922  0E7D  0260               	subwf	(_RTC_SecCount+1)^(0+128),w
  7923  0E7E  1D03               	skipz
  7924  0E7F  2E84               	goto	u9185
  7925  0E80  0022               	movlb	2	; select bank2
  7926  0E81  085F               	movf	_NUL_SecCount^(0+256),w
  7927  0E82  0021               	movlb	1	; select bank1
  7928  0E83  025F               	subwf	_RTC_SecCount^(0+128),w
  7929  0E84                     u9185:	
  7930  0E84  1C03               	skipc
  7931  0E85  2EA5               	goto	l7902
  7932                           
  7933                           ;main.c: 559: {
  7934                           ;main.c: 560: UPLOAD_MESURE_REC();
  7935  0E86  3186  26C4  318C   	fcall	_UPLOAD_MESURE_REC
  7936                           
  7937                           ;main.c: 561: NUL_SecCount = RTC_SecCount + NUL_SecCount_offset;
  7938  0E89  0021               	movlb	1	; select bank1
  7939  0E8A  085F               	movf	_RTC_SecCount^(0+128),w
  7940  0E8B  0022               	movlb	2	; select bank2
  7941  0E8C  0763               	addwf	_NUL_SecCount_offset^(0+256),w
  7942  0E8D  00EA               	movwf	??_main^(0+256)
  7943  0E8E  0021               	movlb	1	; select bank1
  7944  0E8F  0860               	movf	(_RTC_SecCount+1)^(0+128),w
  7945  0E90  0022               	movlb	2	; select bank2
  7946  0E91  3D64               	addwfc	(_NUL_SecCount_offset+1)^(0+256),w
  7947  0E92  00EB               	movwf	(??_main^(0+256)+1)
  7948  0E93  0021               	movlb	1	; select bank1
  7949  0E94  0861               	movf	(_RTC_SecCount+2)^(0+128),w
  7950  0E95  0022               	movlb	2	; select bank2
  7951  0E96  3D65               	addwfc	(_NUL_SecCount_offset+2)^(0+256),w
  7952  0E97  00EC               	movwf	(??_main^(0+256)+2)
  7953  0E98  0021               	movlb	1	; select bank1
  7954  0E99  0862               	movf	(_RTC_SecCount+3)^(0+128),w
  7955  0E9A  0022               	movlb	2	; select bank2
  7956  0E9B  3D66               	addwfc	(_NUL_SecCount_offset+3)^(0+256),w
  7957  0E9C  00ED               	movwf	(??_main^(0+256)+3)
  7958  0E9D  086D               	movf	(??_main+3)^(0+256),w
  7959  0E9E  00E2               	movwf	(_NUL_SecCount+3)^(0+256)
  7960  0E9F  086C               	movf	(??_main+2)^(0+256),w
  7961  0EA0  00E1               	movwf	(_NUL_SecCount+2)^(0+256)
  7962  0EA1  086B               	movf	(??_main+1)^(0+256),w
  7963  0EA2  00E0               	movwf	(_NUL_SecCount+1)^(0+256)
  7964  0EA3  086A               	movf	??_main^(0+256),w
  7965  0EA4  00DF               	movwf	_NUL_SecCount^(0+256)
  7966  0EA5                     l7902:	
  7967                           
  7968                           ;main.c: 562: }
  7969                           ;main.c: 565: if(Flag_Mesure_Test == 1)
  7970  0EA5  0021               	movlb	1	; select bank1
  7971  0EA6  0363               	decf	_Flag_Mesure_Test^(0+128),w
  7972  0EA7  1D03               	btfss	3,2
  7973  0EA8  2EF7               	goto	l7786
  7974                           
  7975                           ;main.c: 566: {
  7976                           ;main.c: 567: if(OneCount_MT < MT_LoopTime*5)
  7977  0EA9  086E               	movf	_MT_LoopTime^(0+128),w
  7978  0EAA  0022               	movlb	2	; select bank2
  7979  0EAB  00EA               	movwf	??_main^(0+256)
  7980  0EAC  01EB               	clrf	(??_main^(0+256)+1)
  7981  0EAD  086A               	movf	??_main^(0+256),w
  7982  0EAE  00F2               	movwf	___wmul@multiplier
  7983  0EAF  086B               	movf	(??_main+1)^(0+256),w
  7984  0EB0  00F3               	movwf	___wmul@multiplier+1
  7985  0EB1  3005               	movlw	5
  7986  0EB2  00F4               	movwf	___wmul@multiplicand
  7987  0EB3  3000               	movlw	0
  7988  0EB4  00F5               	movwf	___wmul@multiplicand+1
  7989  0EB5  319A  223B  318C   	fcall	___wmul
  7990  0EB8  0873               	movf	?___wmul+1,w
  7991  0EB9  0022               	movlb	2	; select bank2
  7992  0EBA  0247               	subwf	(_OneCount_MT+1)^(0+256),w
  7993  0EBB  1D03               	skipz
  7994  0EBC  2EBF               	goto	u9205
  7995  0EBD  0872               	movf	?___wmul,w
  7996  0EBE  0246               	subwf	_OneCount_MT^(0+256),w
  7997  0EBF                     u9205:	
  7998  0EBF  1803               	skipnc
  7999  0EC0  2ED1               	goto	l7914
  8000                           
  8001                           ;main.c: 568: {
  8002                           ;main.c: 569: RUN_MESURE(Loop_Mesure_Test++);
  8003  0EC1  0851               	movf	_Loop_Mesure_Test^(0+256),w
  8004  0EC2  318A  22AB  318C   	fcall	_RUN_MESURE
  8005  0EC5  3001               	movlw	1
  8006  0EC6  0022               	movlb	2	; select bank2
  8007  0EC7  00EA               	movwf	??_main^(0+256)
  8008  0EC8  086A               	movf	??_main^(0+256),w
  8009  0EC9  07D1               	addwf	_Loop_Mesure_Test^(0+256),f
  8010                           
  8011                           ;main.c: 571: if(Loop_Mesure_Test == 5)
  8012  0ECA  3005               	movlw	5
  8013  0ECB  0651               	xorwf	_Loop_Mesure_Test^(0+256),w
  8014  0ECC  1D03               	btfss	3,2
  8015  0ECD  2ED1               	goto	l7914
  8016                           
  8017                           ;main.c: 572: {
  8018                           ;main.c: 573: Loop_Mesure_Test = 0;
  8019  0ECE  01D1               	clrf	_Loop_Mesure_Test^(0+256)
  8020                           
  8021                           ;main.c: 574: Flag_Mesure_Test = 0;
  8022  0ECF  0021               	movlb	1	; select bank1
  8023  0ED0  01E3               	clrf	_Flag_Mesure_Test^(0+128)
  8024  0ED1                     l7914:	
  8025                           
  8026                           ;main.c: 576: }
  8027                           ;main.c: 577: }
  8028                           ;main.c: 579: OneCount_MT++;
  8029  0ED1  3001               	movlw	1
  8030  0ED2  0022               	movlb	2	; select bank2
  8031  0ED3  07C6               	addwf	_OneCount_MT^(0+256),f
  8032  0ED4  3000               	movlw	0
  8033  0ED5  3DC7               	addwfc	(_OneCount_MT+1)^(0+256),f
  8034                           
  8035                           ;main.c: 580: if(OneCount_MT >= (MT_SecTime + MT_LoopTime*5))
  8036  0ED6  0021               	movlb	1	; select bank1
  8037  0ED7  086E               	movf	_MT_LoopTime^(0+128),w
  8038  0ED8  0022               	movlb	2	; select bank2
  8039  0ED9  00EA               	movwf	??_main^(0+256)
  8040  0EDA  01EB               	clrf	(??_main^(0+256)+1)
  8041  0EDB  086A               	movf	??_main^(0+256),w
  8042  0EDC  00F2               	movwf	___wmul@multiplier
  8043  0EDD  086B               	movf	(??_main+1)^(0+256),w
  8044  0EDE  00F3               	movwf	___wmul@multiplier+1
  8045  0EDF  3005               	movlw	5
  8046  0EE0  00F4               	movwf	___wmul@multiplicand
  8047  0EE1  3000               	movlw	0
  8048  0EE2  00F5               	movwf	___wmul@multiplicand+1
  8049  0EE3  319A  223B  318C   	fcall	___wmul
  8050  0EE6  0022               	movlb	2	; select bank2
  8051  0EE7  0842               	movf	_MT_SecTime^(0+256),w
  8052  0EE8  0772               	addwf	?___wmul,w
  8053  0EE9  00EC               	movwf	(??_main+2)^(0+256)
  8054  0EEA  0843               	movf	(_MT_SecTime+1)^(0+256),w
  8055  0EEB  3D73               	addwfc	?___wmul+1,w
  8056  0EEC  00ED               	movwf	(??_main+3)^(0+256)
  8057  0EED  086D               	movf	(??_main+3)^(0+256),w
  8058  0EEE  0247               	subwf	(_OneCount_MT+1)^(0+256),w
  8059  0EEF  1D03               	skipz
  8060  0EF0  2EF3               	goto	u9225
  8061  0EF1  086C               	movf	(??_main+2)^(0+256),w
  8062  0EF2  0246               	subwf	_OneCount_MT^(0+256),w
  8063  0EF3                     u9225:	
  8064  0EF3  1C03               	skipc
  8065  0EF4  2EF7               	goto	l7786
  8066                           
  8067                           ;main.c: 581: OneCount_MT = 0;
  8068  0EF5  01C6               	clrf	_OneCount_MT^(0+256)
  8069  0EF6  01C7               	clrf	(_OneCount_MT+1)^(0+256)
  8070  0EF7                     l7786:	
  8071                           ;main.c: 402: while (1) {
  8072                           
  8073                           ;main.c: 582: }
  8074                           ;main.c: 584: }
  8075                           
  8076                           
  8077                           ;main.c: 408: if(CheckRxOneByteFlag() == 1)
  8078  0EF7  3199  212D  318C   	fcall	_CheckRxOneByteFlag
  8079  0EFA  3A01               	xorlw	1
  8080  0EFB  1903               	btfsc	3,2
  8081  0EFC  2CC5               	goto	l7788
  8082                           
  8083                           ;main.c: 441: else if(RUN_PWM_FLAG == 1)
  8084  0EFD  0021               	movlb	1	; select bank1
  8085  0EFE  0366               	decf	_RUN_PWM_FLAG^(0+128),w
  8086  0EFF  1903               	btfsc	3,2
  8087  0F00  2D0E               	goto	l7820
  8088                           
  8089                           ;main.c: 536: else if(CheckOneSecFlag() == 1)
  8090  0F01  3199  2124  318C   	fcall	_CheckOneSecFlag
  8091  0F04  3A01               	xorlw	1
  8092  0F05  1903               	btfsc	3,2
  8093  0F06  2E29               	goto	l7886
  8094                           
  8095                           ;main.c: 591: else if(RD5 == 0)
  8096  0F07  0020               	movlb	0	; select bank0
  8097  0F08  1A8F               	btfsc	15,5	;volatile
  8098  0F09  2EF7               	goto	l7786
  8099                           
  8100                           ;main.c: 592: {
  8101                           ;main.c: 593: if(exINT_Flag == 0)
  8102  0F0A  0022               	movlb	2	; select bank2
  8103  0F0B  0856               	movf	_exINT_Flag^(0+256),w
  8104  0F0C  1D03               	btfss	3,2
  8105  0F0D  2F17               	goto	l7924
  8106                           
  8107                           ;main.c: 594: {
  8108                           ;main.c: 595: Print_String("exINT enable$", 1);
  8109  0F0E  3079               	movlw	low (STR_2| (0+32768))
  8110  0F0F  00F4               	movwf	Print_String@BStr
  8111  0F10  3092               	movlw	high (STR_2| (0+32768))
  8112  0F11  00F5               	movwf	Print_String@BStr+1
  8113  0F12  01F6               	clrf	Print_String@chln
  8114  0F13  0AF6               	incf	Print_String@chln,f
  8115  0F14  319B  238A  318C   	fcall	_Print_String
  8116  0F17                     l7924:	
  8117                           
  8118                           ;main.c: 596: }
  8119                           ;main.c: 598: exINT_Flag = 1;
  8120  0F17  0022               	movlb	2	; select bank2
  8121  0F18  01D6               	clrf	_exINT_Flag^(0+256)
  8122  0F19  0AD6               	incf	_exINT_Flag^(0+256),f
  8123                           
  8124                           ;main.c: 602: *(BufferRec+0) = 0x00;
  8125  0F1A  0023               	movlb	3	; select bank3
  8126  0F1B  01A8               	clrf	_BufferRec^(0+384)
  8127                           
  8128                           ;main.c: 603: *(BufferRec+1) = 0xA0;
  8129  0F1C  30A0               	movlw	160
  8130  0F1D  0022               	movlb	2	; select bank2
  8131  0F1E  00EA               	movwf	??_main^(0+256)
  8132  0F1F  086A               	movf	??_main^(0+256),w
  8133  0F20  0023               	movlb	3	; select bank3
  8134  0F21  00A9               	movwf	(_BufferRec^(0+384)+1)
  8135                           
  8136                           ;main.c: 604: *(BufferRec+2) = 0x02;
  8137  0F22  3002               	movlw	2
  8138  0F23  0022               	movlb	2	; select bank2
  8139  0F24  00EA               	movwf	??_main^(0+256)
  8140  0F25  086A               	movf	??_main^(0+256),w
  8141  0F26  0023               	movlb	3	; select bank3
  8142  0F27  00AA               	movwf	(_BufferRec^(0+384)+2)
  8143                           
  8144                           ;main.c: 607: I2C_mWrite(BufferRec, 3+1, 0x10);
  8145  0F28  30A8               	movlw	low _BufferRec
  8146  0F29  00F6               	movwf	I2C_mWrite@value
  8147  0F2A  3001               	movlw	high _BufferRec
  8148  0F2B  00F7               	movwf	I2C_mWrite@value+1
  8149  0F2C  3004               	movlw	4
  8150  0F2D  0022               	movlb	2	; select bank2
  8151  0F2E  00EA               	movwf	??_main^(0+256)
  8152  0F2F  086A               	movf	??_main^(0+256),w
  8153  0F30  00F8               	movwf	I2C_mWrite@Size
  8154  0F31  3010               	movlw	16
  8155  0F32  00EB               	movwf	(??_main+1)^(0+256)
  8156  0F33  086B               	movf	(??_main+1)^(0+256),w
  8157  0F34  00F9               	movwf	I2C_mWrite@slave_addr
  8158  0F35  319E  2683  318C   	fcall	_I2C_mWrite
  8159                           
  8160                           ;main.c: 608: I2C_mREAD(BufferRec, 2, 0x10);
  8161  0F38  3002               	movlw	2
  8162  0F39  0022               	movlb	2	; select bank2
  8163  0F3A  00EA               	movwf	??_main^(0+256)
  8164  0F3B  086A               	movf	??_main^(0+256),w
  8165  0F3C  00F7               	movwf	I2C_mREAD@Size
  8166  0F3D  3010               	movlw	16
  8167  0F3E  00EB               	movwf	(??_main+1)^(0+256)
  8168  0F3F  086B               	movf	(??_main+1)^(0+256),w
  8169  0F40  00F8               	movwf	I2C_mREAD@slave_addr
  8170  0F41  30A8               	movlw	(low (_BufferRec| (0+256)))& (0+255)
  8171  0F42  319E  263E  318C   	fcall	_I2C_mREAD
  8172                           
  8173                           ;main.c: 610: SR_0xA0_ADO_Error = *BufferRec;
  8174  0F45  0023               	movlb	3	; select bank3
  8175  0F46  0828               	movf	_BufferRec^(0+384),w
  8176  0F47  0022               	movlb	2	; select bank2
  8177  0F48  00EA               	movwf	??_main^(0+256)
  8178  0F49  086A               	movf	??_main^(0+256),w
  8179  0F4A  0021               	movlb	1	; select bank1
  8180  0F4B  00E7               	movwf	_SR_0xA0_ADO_Error^(0+128)
  8181                           
  8182                           ;main.c: 611: SR_0xA1_ADO_Request = *(BufferRec+1);
  8183  0F4C  0023               	movlb	3	; select bank3
  8184  0F4D  0829               	movf	(_BufferRec^(0+384)+1),w
  8185  0F4E  0022               	movlb	2	; select bank2
  8186  0F4F  00EA               	movwf	??_main^(0+256)
  8187  0F50  086A               	movf	??_main^(0+256),w
  8188  0F51  0021               	movlb	1	; select bank1
  8189  0F52  00E8               	movwf	_SR_0xA1_ADO_Request^(0+128)
  8190                           
  8191                           ;main.c: 614: Print_String("SR_0xA0_ADO_Error =0x$", 0);
  8192  0F53  3077               	movlw	low (STR_3| (0+32768))
  8193  0F54  00F4               	movwf	Print_String@BStr
  8194  0F55  3091               	movlw	high (STR_3| (0+32768))
  8195  0F56  00F5               	movwf	Print_String@BStr+1
  8196  0F57  01F6               	clrf	Print_String@chln
  8197  0F58  319B  238A  318C   	fcall	_Print_String
  8198                           
  8199                           ;main.c: 615: Print_HEX2Str(SR_0xA0_ADO_Error, 1);
  8200  0F5B  01F7               	clrf	Print_HEX2Str@Chgln
  8201  0F5C  0AF7               	incf	Print_HEX2Str@Chgln,f
  8202  0F5D  0021               	movlb	1	; select bank1
  8203  0F5E  0867               	movf	_SR_0xA0_ADO_Error^(0+128),w
  8204  0F5F  319F  270D  318C   	fcall	_Print_HEX2Str
  8205                           
  8206                           ;main.c: 616: Print_String("SR_0xA1_ADO_Request =0x$", 0);
  8207  0F62  3018               	movlw	low (STR_4| (0+32768))
  8208  0F63  00F4               	movwf	Print_String@BStr
  8209  0F64  3091               	movlw	high (STR_4| (0+32768))
  8210  0F65  00F5               	movwf	Print_String@BStr+1
  8211  0F66  01F6               	clrf	Print_String@chln
  8212  0F67  319B  238A  318C   	fcall	_Print_String
  8213                           
  8214                           ;main.c: 617: Print_HEX2Str(SR_0xA1_ADO_Request, 1);
  8215  0F6A  01F7               	clrf	Print_HEX2Str@Chgln
  8216  0F6B  0AF7               	incf	Print_HEX2Str@Chgln,f
  8217  0F6C  0021               	movlb	1	; select bank1
  8218  0F6D  0868               	movf	_SR_0xA1_ADO_Request^(0+128),w
  8219  0F6E  319F  270D  318C   	fcall	_Print_HEX2Str
  8220                           
  8221                           ;main.c: 621: if(exINT_Mode == 0x80)
  8222  0F71  3080               	movlw	128
  8223  0F72  0021               	movlb	1	; select bank1
  8224  0F73  066F               	xorwf	_exINT_Mode^(0+128),w
  8225  0F74  1D03               	btfss	3,2
  8226  0F75  2F80               	goto	l7952
  8227                           
  8228                           ;main.c: 622: {
  8229                           ;main.c: 623: Print_String("Check First time ADO TEST$", 1);
  8230  0F76  30CB               	movlw	low (STR_5| (0+32768))
  8231  0F77  00F4               	movwf	Print_String@BStr
  8232  0F78  3090               	movlw	high (STR_5| (0+32768))
  8233  0F79  00F5               	movwf	Print_String@BStr+1
  8234  0F7A  01F6               	clrf	Print_String@chln
  8235  0F7B  0AF6               	incf	Print_String@chln,f
  8236  0F7C  319B  238A  318C   	fcall	_Print_String
  8237                           
  8238                           ;main.c: 624: }
  8239  0F7F  2FAB               	goto	l7976
  8240  0F80                     l7952:	
  8241                           
  8242                           ;main.c: 626: else if(exINT_Mode == 0x01)
  8243  0F80  0021               	movlb	1	; select bank1
  8244  0F81  036F               	decf	_exINT_Mode^(0+128),w
  8245  0F82  1D03               	btfss	3,2
  8246  0F83  2F8B               	goto	l7958
  8247                           
  8248                           ;main.c: 627: {
  8249                           ;main.c: 628: if(SR_0xA0_ADO_Error == 0)
  8250  0F84  0867               	movf	_SR_0xA0_ADO_Error^(0+128),w
  8251  0F85  1D03               	btfss	3,2
  8252  0F86  2FAB               	goto	l7976
  8253                           
  8254                           ;main.c: 629: FirstTimeSetup = 1;
  8255  0F87  0022               	movlb	2	; select bank2
  8256  0F88  01CC               	clrf	_FirstTimeSetup^(0+256)
  8257  0F89  0ACC               	incf	_FirstTimeSetup^(0+256),f
  8258                           
  8259                           ;main.c: 630: }
  8260  0F8A  2FAB               	goto	l7976
  8261  0F8B                     l7958:	
  8262                           
  8263                           ;main.c: 632: else if(exINT_Mode == 0x02)
  8264  0F8B  3002               	movlw	2
  8265  0F8C  0021               	movlb	1	; select bank1
  8266  0F8D  066F               	xorwf	_exINT_Mode^(0+128),w
  8267  0F8E  1903               	btfsc	3,2
  8268  0F8F  2FAB               	goto	l7976
  8269                           
  8270                           ;main.c: 636: else if(exINT_Mode == 0x04)
  8271                           
  8272                           ;main.c: 633: {
  8273                           ;main.c: 634: }
  8274  0F90  3004               	movlw	4
  8275  0F91  066F               	xorwf	_exINT_Mode^(0+128),w
  8276  0F92  1903               	btfsc	3,2
  8277  0F93  2FAB               	goto	l7976
  8278                           
  8279                           ;main.c: 640: else if(exINT_Mode == 0x08)
  8280                           
  8281                           ;main.c: 637: {
  8282                           ;main.c: 638: }
  8283  0F94  3008               	movlw	8
  8284  0F95  066F               	xorwf	_exINT_Mode^(0+128),w
  8285  0F96  1D03               	btfss	3,2
  8286  0F97  2FAB               	goto	l7976
  8287                           
  8288                           ;main.c: 641: {
  8289                           ;main.c: 642: if(SR_0xA1_ADO_Request == 0X01)
  8290  0F98  0368               	decf	_SR_0xA1_ADO_Request^(0+128),w
  8291  0F99  1D03               	btfss	3,2
  8292  0F9A  2FAB               	goto	l7976
  8293                           
  8294                           ;main.c: 643: {
  8295                           ;main.c: 644: Print_String("NEED ADJ RTC CLOCK$", 1);
  8296  0F9B  30B9               	movlw	low (STR_6| (0+32768))
  8297  0F9C  00F4               	movwf	Print_String@BStr
  8298  0F9D  3091               	movlw	high (STR_6| (0+32768))
  8299  0F9E  00F5               	movwf	Print_String@BStr+1
  8300  0F9F  01F6               	clrf	Print_String@chln
  8301  0FA0  0AF6               	incf	Print_String@chln,f
  8302  0FA1  319B  238A  318C   	fcall	_Print_String
  8303                           
  8304                           ;main.c: 645: PIC_SYNC_ADO_RTC();
  8305  0FA4  3189  2145  318C   	fcall	_PIC_SYNC_ADO_RTC
  8306                           
  8307                           ;main.c: 646: exINT_Mode = 0;
  8308  0FA7  0021               	movlb	1	; select bank1
  8309  0FA8  01EF               	clrf	_exINT_Mode^(0+128)
  8310                           
  8311                           ;main.c: 647: exINT_Flag = 0;
  8312  0FA9  0022               	movlb	2	; select bank2
  8313  0FAA  01D6               	clrf	_exINT_Flag^(0+256)
  8314  0FAB                     l7976:	
  8315                           
  8316                           ;main.c: 648: }
  8317                           ;main.c: 649: }
  8318                           ;main.c: 652: Print_CHLN();
  8319  0FAB  3199  211C  318C   	fcall	_Print_CHLN
  8320                           
  8321                           ;main.c: 653: if(SR_0xA0_ADO_Error == 0)
  8322  0FAE  0021               	movlb	1	; select bank1
  8323  0FAF  0867               	movf	_SR_0xA0_ADO_Error^(0+128),w
  8324  0FB0  1D03               	btfss	3,2
  8325  0FB1  2FBF               	goto	l7984
  8326                           
  8327                           ;main.c: 654: {
  8328                           ;main.c: 655: Print_String("RESULT OK$", 1);
  8329  0FB2  30C5               	movlw	low (STR_7| (0+32768))
  8330  0FB3  00F4               	movwf	Print_String@BStr
  8331  0FB4  3092               	movlw	high (STR_7| (0+32768))
  8332  0FB5  00F5               	movwf	Print_String@BStr+1
  8333  0FB6  01F6               	clrf	Print_String@chln
  8334  0FB7  0AF6               	incf	Print_String@chln,f
  8335  0FB8  319B  238A  318C   	fcall	_Print_String
  8336                           
  8337                           ;main.c: 656: FirstTimeSetup = 1;
  8338  0FBB  0022               	movlb	2	; select bank2
  8339  0FBC  01CC               	clrf	_FirstTimeSetup^(0+256)
  8340  0FBD  0ACC               	incf	_FirstTimeSetup^(0+256),f
  8341                           
  8342                           ;main.c: 657: }
  8343  0FBE  2FCE               	goto	l7988
  8344  0FBF                     l7984:	
  8345                           
  8346                           ;main.c: 658: else
  8347                           ;main.c: 659: {
  8348                           ;main.c: 660: Print_String("RESULT NG, Error = 0x$", 0);
  8349  0FBF  3060               	movlw	low (STR_8| (0+32768))
  8350  0FC0  00F4               	movwf	Print_String@BStr
  8351  0FC1  3091               	movlw	high (STR_8| (0+32768))
  8352  0FC2  00F5               	movwf	Print_String@BStr+1
  8353  0FC3  01F6               	clrf	Print_String@chln
  8354  0FC4  319B  238A  318C   	fcall	_Print_String
  8355                           
  8356                           ;main.c: 661: Print_HEX2Str(SR_0xA0_ADO_Error, 1);
  8357  0FC7  01F7               	clrf	Print_HEX2Str@Chgln
  8358  0FC8  0AF7               	incf	Print_HEX2Str@Chgln,f
  8359  0FC9  0021               	movlb	1	; select bank1
  8360  0FCA  0867               	movf	_SR_0xA0_ADO_Error^(0+128),w
  8361  0FCB  319F  270D  318C   	fcall	_Print_HEX2Str
  8362  0FCE                     l7988:	
  8363                           
  8364                           ;main.c: 662: }
  8365                           ;main.c: 667: if(SR_0xA1_ADO_Request & 0x01)
  8366  0FCE  0021               	movlb	1	; select bank1
  8367  0FCF  1C68               	btfss	_SR_0xA1_ADO_Request^(0+128),0
  8368  0FD0  2FDD               	goto	l7992
  8369                           
  8370                           ;main.c: 668: {
  8371                           ;main.c: 669: Print_String("NEED ADJ RTC CLOCK$", 1);
  8372  0FD1  30B9               	movlw	low (STR_6| (0+32768))
  8373  0FD2  00F4               	movwf	Print_String@BStr
  8374  0FD3  3091               	movlw	high (STR_6| (0+32768))
  8375  0FD4  00F5               	movwf	Print_String@BStr+1
  8376  0FD5  01F6               	clrf	Print_String@chln
  8377  0FD6  0AF6               	incf	Print_String@chln,f
  8378  0FD7  319B  238A  318C   	fcall	_Print_String
  8379                           
  8380                           ;main.c: 670: PIC_SYNC_ADO_RTC();
  8381  0FDA  3189  2145  318C   	fcall	_PIC_SYNC_ADO_RTC
  8382  0FDD                     l7992:	
  8383                           
  8384                           ;main.c: 671: }
  8385                           ;main.c: 673: if(SR_0xA1_ADO_Request & 0X02)
  8386  0FDD  0021               	movlb	1	; select bank1
  8387  0FDE  1CE8               	btfss	_SR_0xA1_ADO_Request^(0+128),1
  8388  0FDF  2FFB               	goto	l8008
  8389                           
  8390                           ;main.c: 674: {
  8391                           ;main.c: 675: Print_String("NEED CHANGE SAMPLE RATE$", 1);
  8392  0FE0  30FF               	movlw	low (STR_10| (0+32768))
  8393  0FE1  00F4               	movwf	Print_String@BStr
  8394  0FE2  3090               	movlw	high (STR_10| (0+32768))
  8395  0FE3  00F5               	movwf	Print_String@BStr+1
  8396  0FE4  01F6               	clrf	Print_String@chln
  8397  0FE5  0AF6               	incf	Print_String@chln,f
  8398  0FE6  319B  238A  318C   	fcall	_Print_String
  8399                           
  8400                           ;main.c: 676: PIC_SYNC_ADO_ULSR();
  8401  0FE9  3197  2762  318C   	fcall	_PIC_SYNC_ADO_ULSR
  8402                           
  8403                           ;main.c: 678: MT_LoopTime = 1;
  8404  0FEC  0021               	movlb	1	; select bank1
  8405  0FED  01EE               	clrf	_MT_LoopTime^(0+128)
  8406  0FEE  0AEE               	incf	_MT_LoopTime^(0+128),f
  8407                           
  8408                           ;main.c: 679: MT_SecTime = 1;
  8409  0FEF  3001               	movlw	1
  8410  0FF0  0022               	movlb	2	; select bank2
  8411  0FF1  00C2               	movwf	_MT_SecTime^(0+256)
  8412  0FF2  3000               	movlw	0
  8413  0FF3  00C3               	movwf	(_MT_SecTime^(0+256)+1)
  8414                           
  8415                           ;main.c: 681: Flag_Mesure_Test = 1;
  8416  0FF4  0021               	movlb	1	; select bank1
  8417  0FF5  01E3               	clrf	_Flag_Mesure_Test^(0+128)
  8418  0FF6  0AE3               	incf	_Flag_Mesure_Test^(0+128),f
  8419                           
  8420                           ;main.c: 682: Loop_Mesure_Test = 0;
  8421  0FF7  0022               	movlb	2	; select bank2
  8422  0FF8  01D1               	clrf	_Loop_Mesure_Test^(0+256)
  8423                           
  8424                           ;main.c: 683: OneCount_MT = 0;
  8425  0FF9  01C6               	clrf	_OneCount_MT^(0+256)
  8426  0FFA  01C7               	clrf	(_OneCount_MT+1)^(0+256)
  8427  0FFB                     l8008:	
  8428                           
  8429                           ;main.c: 684: }
  8430                           ;main.c: 687: exINT_Flag = 0;
  8431  0FFB  0022               	movlb	2	; select bank2
  8432  0FFC  01D6               	clrf	_exINT_Flag^(0+256)
  8433                           
  8434                           ;main.c: 688: exINT_Mode = 0;
  8435  0FFD  0021               	movlb	1	; select bank1
  8436  0FFE  01EF               	clrf	_exINT_Mode^(0+128)
  8437  0FFF  2EF7               	goto	l7786
  8438  1000                     __end_of_main:	
  8439                           
  8440                           	psect	text1
  8441  1B45                     __ptext1:	
  8442 ;; *************** function _SYSTEM_Initialize *****************
  8443 ;; Defined at:
  8444 ;;		line 72 in file "mcc_generated_files/mcc.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;		None
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;		None
  8449 ;; Return value:  Size  Location     Type
  8450 ;;		None               void
  8451 ;; Registers used:
  8452 ;;		wreg, status,2, status,0, pclath, cstack
  8453 ;; Tracked objects:
  8454 ;;		On entry : 0/0
  8455 ;;		On exit  : 0/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8462 ;;Total ram usage:        0 bytes
  8463 ;; Hardware stack levels used:    1
  8464 ;; Hardware stack levels required when called:    5
  8465 ;; This function calls:
  8466 ;;		_ADC_Initialize
  8467 ;;		_DAC1_Initialize
  8468 ;;		_EUSART_Initialize
  8469 ;;		_FVR_Initialize
  8470 ;;		_OPA1_Initialize
  8471 ;;		_OPA2_Initialize
  8472 ;;		_OPA3_Initialize
  8473 ;;		_OSCILLATOR_Initialize
  8474 ;;		_PIN_MANAGER_Initialize
  8475 ;;		_TMR0_Initialize
  8476 ;;		_TMR2_Initialize
  8477 ;; This function is called by:
  8478 ;;		_main
  8479 ;; This function uses a non-reentrant model
  8480 ;;
  8481                           
  8482                           
  8483                           ;psect for function _SYSTEM_Initialize
  8484  1B45                     _SYSTEM_Initialize:	
  8485                           
  8486                           ;mcc.c: 73: OSCILLATOR_Initialize();
  8487                           
  8488                           ;incstack = 0
  8489                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8490  1B45  3199  210A  319B   	fcall	_OSCILLATOR_Initialize
  8491                           
  8492                           ;mcc.c: 74: PIN_MANAGER_Initialize();
  8493  1B48  319D  2585  319B   	fcall	_PIN_MANAGER_Initialize
  8494                           
  8495                           ;mcc.c: 75: EUSART_Initialize();
  8496  1B4B  319A  2256  319B   	fcall	_EUSART_Initialize
  8497                           
  8498                           ;mcc.c: 76: ADC_Initialize();
  8499  1B4E  3199  213F  319B   	fcall	_ADC_Initialize
  8500                           
  8501                           ;mcc.c: 77: DAC1_Initialize();
  8502  1B51  3198  20FF  319B   	fcall	_DAC1_Initialize
  8503                           
  8504                           ;mcc.c: 78: FVR_Initialize();
  8505  1B54  3198  20EA  319B   	fcall	_FVR_Initialize
  8506                           
  8507                           ;mcc.c: 79: TMR2_Initialize();
  8508  1B57  3199  2160  319B   	fcall	_TMR2_Initialize
  8509                           
  8510                           ;mcc.c: 80: TMR0_Initialize();
  8511  1B5A  3199  21A6  319B   	fcall	_TMR0_Initialize
  8512                           
  8513                           ;mcc.c: 81: OPA1_Initialize();
  8514  1B5D  3198  20EE  319B   	fcall	_OPA1_Initialize
  8515                           
  8516                           ;mcc.c: 82: OPA2_Initialize();
  8517  1B60  3198  20F2  319B   	fcall	_OPA2_Initialize
  8518                           
  8519                           ;mcc.c: 83: OPA3_Initialize();
  8520  1B63  3198  20F6         	fcall	_OPA3_Initialize
  8521  1B65  0008               	return
  8522  1B66                     __end_of_SYSTEM_Initialize:	
  8523                           
  8524                           	psect	text2
  8525  1960                     __ptext2:	
  8526 ;; *************** function _TMR2_Initialize *****************
  8527 ;; Defined at:
  8528 ;;		line 58 in file "mcc_generated_files/tmr2.c"
  8529 ;; Parameters:    Size  Location     Type
  8530 ;;		None
  8531 ;; Auto vars:     Size  Location     Type
  8532 ;;		None
  8533 ;; Return value:  Size  Location     Type
  8534 ;;		None               void
  8535 ;; Registers used:
  8536 ;;		wreg, status,2, status,0, pclath, cstack
  8537 ;; Tracked objects:
  8538 ;;		On entry : 0/0
  8539 ;;		On exit  : 0/0
  8540 ;;		Unchanged: 0/0
  8541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8546 ;;Total ram usage:        0 bytes
  8547 ;; Hardware stack levels used:    1
  8548 ;; Hardware stack levels required when called:    4
  8549 ;; This function calls:
  8550 ;;		_TMR2_StartTimer
  8551 ;; This function is called by:
  8552 ;;		_SYSTEM_Initialize
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           
  8557                           ;psect for function _TMR2_Initialize
  8558  1960                     _TMR2_Initialize:	
  8559                           
  8560                           ;tmr2.c: 62: T2CON = 0x7B;
  8561                           
  8562                           ;incstack = 0
  8563                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8564  1960  307B               	movlw	123
  8565  1961  0020               	movlb	0	; select bank0
  8566  1962  009C               	movwf	28	;volatile
  8567                           
  8568                           ;tmr2.c: 65: PR2 = 0x26;
  8569  1963  3026               	movlw	38
  8570  1964  009B               	movwf	27	;volatile
  8571                           
  8572                           ;tmr2.c: 68: TMR2 = 0x00;
  8573  1965  019A               	clrf	26	;volatile
  8574                           
  8575                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  8576  1966  1091               	bcf	17,1	;volatile
  8577                           
  8578                           ;tmr2.c: 74: PIE1bits.TMR2IE = 1;
  8579  1967  0021               	movlb	1	; select bank1
  8580  1968  1491               	bsf	17,1	;volatile
  8581                           
  8582                           ;tmr2.c: 77: TMR2_StartTimer();
  8583  1969  3198  20DF         	fcall	_TMR2_StartTimer
  8584  196B  0008               	return
  8585  196C                     __end_of_TMR2_Initialize:	
  8586                           
  8587                           	psect	text3
  8588  18DF                     __ptext3:	
  8589 ;; *************** function _TMR2_StartTimer *****************
  8590 ;; Defined at:
  8591 ;;		line 80 in file "mcc_generated_files/tmr2.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;		None
  8594 ;; Auto vars:     Size  Location     Type
  8595 ;;		None
  8596 ;; Return value:  Size  Location     Type
  8597 ;;		None               void
  8598 ;; Registers used:
  8599 ;;		None
  8600 ;; Tracked objects:
  8601 ;;		On entry : 0/0
  8602 ;;		On exit  : 0/0
  8603 ;;		Unchanged: 0/0
  8604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8609 ;;Total ram usage:        0 bytes
  8610 ;; Hardware stack levels used:    1
  8611 ;; Hardware stack levels required when called:    3
  8612 ;; This function calls:
  8613 ;;		Nothing
  8614 ;; This function is called by:
  8615 ;;		_TMR2_Initialize
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619                           
  8620                           ;psect for function _TMR2_StartTimer
  8621  18DF                     _TMR2_StartTimer:	
  8622                           
  8623                           ;tmr2.c: 82: T2CONbits.TMR2ON = 1;
  8624                           
  8625                           ;incstack = 0
  8626                           ; Regs used in _TMR2_StartTimer: []
  8627  18DF  0020               	movlb	0	; select bank0
  8628  18E0  151C               	bsf	28,2	;volatile
  8629  18E1  0008               	return
  8630  18E2                     __end_of_TMR2_StartTimer:	
  8631                           
  8632                           	psect	text4
  8633  19A6                     __ptext4:	
  8634 ;; *************** function _TMR0_Initialize *****************
  8635 ;; Defined at:
  8636 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  8637 ;; Parameters:    Size  Location     Type
  8638 ;;		None
  8639 ;; Auto vars:     Size  Location     Type
  8640 ;;		None
  8641 ;; Return value:  Size  Location     Type
  8642 ;;		None               void
  8643 ;; Registers used:
  8644 ;;		wreg, status,2
  8645 ;; Tracked objects:
  8646 ;;		On entry : 0/0
  8647 ;;		On exit  : 0/0
  8648 ;;		Unchanged: 0/0
  8649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8652 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8653 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8654 ;;Total ram usage:        1 bytes
  8655 ;; Hardware stack levels used:    1
  8656 ;; Hardware stack levels required when called:    3
  8657 ;; This function calls:
  8658 ;;		Nothing
  8659 ;; This function is called by:
  8660 ;;		_SYSTEM_Initialize
  8661 ;; This function uses a non-reentrant model
  8662 ;;
  8663                           
  8664                           
  8665                           ;psect for function _TMR0_Initialize
  8666  19A6                     _TMR0_Initialize:	
  8667                           
  8668                           ;tmr0.c: 69: OPTION_REG = (OPTION_REG & 0xC0) | 0xDF & 0x3F;
  8669                           
  8670                           ;incstack = 0
  8671                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  8672  19A6  0021               	movlb	1	; select bank1
  8673  19A7  0815               	movf	21,w	;volatile
  8674  19A8  39C0               	andlw	192
  8675  19A9  381F               	iorlw	31
  8676  19AA  0095               	movwf	21	;volatile
  8677                           
  8678                           ;tmr0.c: 72: TMR0 = 0x7F;
  8679  19AB  307F               	movlw	127
  8680  19AC  0020               	movlb	0	; select bank0
  8681  19AD  0095               	movwf	21	;volatile
  8682                           
  8683                           ;tmr0.c: 75: timer0ReloadVal = 127;
  8684  19AE  307F               	movlw	127
  8685  19AF  00F2               	movwf	??_TMR0_Initialize
  8686  19B0  0872               	movf	??_TMR0_Initialize,w
  8687  19B1  0022               	movlb	2	; select bank2
  8688  19B2  00EF               	movwf	_timer0ReloadVal^(0+256)	;volatile
  8689                           
  8690                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
  8691  19B3  110B               	bcf	11,2	;volatile
  8692                           
  8693                           ;tmr0.c: 81: INTCONbits.TMR0IE = 1;
  8694  19B4  168B               	bsf	11,5	;volatile
  8695  19B5  0008               	return
  8696  19B6                     __end_of_TMR0_Initialize:	
  8697                           
  8698                           	psect	text5
  8699  1D85                     __ptext5:	
  8700 ;; *************** function _PIN_MANAGER_Initialize *****************
  8701 ;; Defined at:
  8702 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;		None
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;		None
  8707 ;; Return value:  Size  Location     Type
  8708 ;;		None               void
  8709 ;; Registers used:
  8710 ;;		wreg, status,2
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8720 ;;Total ram usage:        0 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:    3
  8723 ;; This function calls:
  8724 ;;		Nothing
  8725 ;; This function is called by:
  8726 ;;		_SYSTEM_Initialize
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           
  8731                           ;psect for function _PIN_MANAGER_Initialize
  8732  1D85                     _PIN_MANAGER_Initialize:	
  8733                           
  8734                           ;pin_manager.c: 51: LATA = 0x10;
  8735                           
  8736                           ;incstack = 0
  8737                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8738  1D85  3010               	movlw	16
  8739  1D86  0022               	movlb	2	; select bank2
  8740  1D87  008C               	movwf	12	;volatile
  8741                           
  8742                           ;pin_manager.c: 52: TRISA = 0x29;
  8743  1D88  3029               	movlw	41
  8744  1D89  0021               	movlb	1	; select bank1
  8745  1D8A  008C               	movwf	12	;volatile
  8746                           
  8747                           ;pin_manager.c: 53: ANSELA = 0x2B;
  8748  1D8B  302B               	movlw	43
  8749  1D8C  0023               	movlb	3	; select bank3
  8750  1D8D  008C               	movwf	12	;volatile
  8751                           
  8752                           ;pin_manager.c: 54: WPUA = 0x00;
  8753  1D8E  0024               	movlb	4	; select bank4
  8754  1D8F  018C               	clrf	12	;volatile
  8755                           
  8756                           ;pin_manager.c: 56: LATB = 0x00;
  8757  1D90  0022               	movlb	2	; select bank2
  8758  1D91  018D               	clrf	13	;volatile
  8759                           
  8760                           ;pin_manager.c: 57: TRISB = 0x1D;
  8761  1D92  301D               	movlw	29
  8762  1D93  0021               	movlb	1	; select bank1
  8763  1D94  008D               	movwf	13	;volatile
  8764                           
  8765                           ;pin_manager.c: 58: ANSELB = 0x1F;
  8766  1D95  301F               	movlw	31
  8767  1D96  0023               	movlb	3	; select bank3
  8768  1D97  008D               	movwf	13	;volatile
  8769                           
  8770                           ;pin_manager.c: 59: WPUB = 0x00;
  8771  1D98  0024               	movlb	4	; select bank4
  8772  1D99  018D               	clrf	13	;volatile
  8773                           
  8774                           ;pin_manager.c: 61: LATC = 0x18;
  8775  1D9A  3018               	movlw	24
  8776  1D9B  0022               	movlb	2	; select bank2
  8777  1D9C  008E               	movwf	14	;volatile
  8778                           
  8779                           ;pin_manager.c: 62: TRISC = 0xC0;
  8780  1D9D  30C0               	movlw	192
  8781  1D9E  0021               	movlb	1	; select bank1
  8782  1D9F  008E               	movwf	14	;volatile
  8783                           
  8784                           ;pin_manager.c: 63: ANSELC = 0x00;
  8785  1DA0  0023               	movlb	3	; select bank3
  8786  1DA1  018E               	clrf	14	;volatile
  8787                           
  8788                           ;pin_manager.c: 64: WPUC = 0x00;
  8789  1DA2  0024               	movlb	4	; select bank4
  8790  1DA3  018E               	clrf	14	;volatile
  8791                           
  8792                           ;pin_manager.c: 66: LATD = 0x00;
  8793  1DA4  0022               	movlb	2	; select bank2
  8794  1DA5  018F               	clrf	15	;volatile
  8795                           
  8796                           ;pin_manager.c: 67: TRISD = 0x25;
  8797  1DA6  3025               	movlw	37
  8798  1DA7  0021               	movlb	1	; select bank1
  8799  1DA8  008F               	movwf	15	;volatile
  8800                           
  8801                           ;pin_manager.c: 68: ANSELD = 0x07;
  8802  1DA9  3007               	movlw	7
  8803  1DAA  0023               	movlb	3	; select bank3
  8804  1DAB  008F               	movwf	15	;volatile
  8805                           
  8806                           ;pin_manager.c: 69: WPUD = 0x00;
  8807  1DAC  0024               	movlb	4	; select bank4
  8808  1DAD  018F               	clrf	15	;volatile
  8809                           
  8810                           ;pin_manager.c: 71: LATE = 0x00;
  8811  1DAE  0022               	movlb	2	; select bank2
  8812  1DAF  0190               	clrf	16	;volatile
  8813                           
  8814                           ;pin_manager.c: 72: TRISE = 0x08;
  8815  1DB0  3008               	movlw	8
  8816  1DB1  0021               	movlb	1	; select bank1
  8817  1DB2  0090               	movwf	16	;volatile
  8818                           
  8819                           ;pin_manager.c: 73: ANSELE = 0x00;
  8820  1DB3  0023               	movlb	3	; select bank3
  8821  1DB4  0190               	clrf	16	;volatile
  8822                           
  8823                           ;pin_manager.c: 74: WPUE = 0x00;
  8824  1DB5  0024               	movlb	4	; select bank4
  8825  1DB6  0190               	clrf	16	;volatile
  8826                           
  8827                           ;pin_manager.c: 76: OPTION_REGbits.nWPUEN = 0x01;
  8828  1DB7  0021               	movlb	1	; select bank1
  8829  1DB8  1795               	bsf	21,7	;volatile
  8830                           
  8831                           ;pin_manager.c: 78: APFCON1 = 0x00;
  8832  1DB9  0022               	movlb	2	; select bank2
  8833  1DBA  019D               	clrf	29	;volatile
  8834                           
  8835                           ;pin_manager.c: 80: APFCON2 = 0x00;
  8836  1DBB  019C               	clrf	28	;volatile
  8837  1DBC  0008               	return
  8838  1DBD                     __end_of_PIN_MANAGER_Initialize:	
  8839                           
  8840                           	psect	text6
  8841  190A                     __ptext6:	
  8842 ;; *************** function _OSCILLATOR_Initialize *****************
  8843 ;; Defined at:
  8844 ;;		line 86 in file "mcc_generated_files/mcc.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;		None
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;		None
  8849 ;; Return value:  Size  Location     Type
  8850 ;;		None               void
  8851 ;; Registers used:
  8852 ;;		wreg, status,2
  8853 ;; Tracked objects:
  8854 ;;		On entry : 0/0
  8855 ;;		On exit  : 0/0
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8862 ;;Total ram usage:        0 bytes
  8863 ;; Hardware stack levels used:    1
  8864 ;; Hardware stack levels required when called:    3
  8865 ;; This function calls:
  8866 ;;		Nothing
  8867 ;; This function is called by:
  8868 ;;		_SYSTEM_Initialize
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           
  8873                           ;psect for function _OSCILLATOR_Initialize
  8874  190A                     _OSCILLATOR_Initialize:	
  8875                           
  8876                           ;mcc.c: 88: OSCCON = 0x7A;
  8877                           
  8878                           ;incstack = 0
  8879                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8880  190A  307A               	movlw	122
  8881  190B  0021               	movlb	1	; select bank1
  8882  190C  0099               	movwf	25	;volatile
  8883                           
  8884                           ;mcc.c: 90: OSCSTAT = 0x00;
  8885  190D  019A               	clrf	26	;volatile
  8886                           
  8887                           ;mcc.c: 92: OSCTUNE = 0x00;
  8888  190E  0198               	clrf	24	;volatile
  8889  190F  0008               	return
  8890  1910                     __end_of_OSCILLATOR_Initialize:	
  8891                           
  8892                           	psect	text7
  8893  18F6                     __ptext7:	
  8894 ;; *************** function _OPA3_Initialize *****************
  8895 ;; Defined at:
  8896 ;;		line 58 in file "mcc_generated_files/opa3.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;		None               void
  8903 ;; Registers used:
  8904 ;;		wreg
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8914 ;;Total ram usage:        0 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    3
  8917 ;; This function calls:
  8918 ;;		Nothing
  8919 ;; This function is called by:
  8920 ;;		_SYSTEM_Initialize
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           
  8925                           ;psect for function _OPA3_Initialize
  8926  18F6                     _OPA3_Initialize:	
  8927                           
  8928                           ;opa3.c: 60: OPA3CON = 0x80;
  8929                           
  8930                           ;incstack = 0
  8931                           ; Regs used in _OPA3_Initialize: [wreg]
  8932  18F6  3080               	movlw	128
  8933  18F7  002A               	movlb	10	; select bank10
  8934  18F8  0095               	movwf	21	;volatile
  8935  18F9  0008               	return
  8936  18FA                     __end_of_OPA3_Initialize:	
  8937                           
  8938                           	psect	text8
  8939  18F2                     __ptext8:	
  8940 ;; *************** function _OPA2_Initialize *****************
  8941 ;; Defined at:
  8942 ;;		line 58 in file "mcc_generated_files/opa2.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;		None
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;		None
  8947 ;; Return value:  Size  Location     Type
  8948 ;;		None               void
  8949 ;; Registers used:
  8950 ;;		wreg
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8960 ;;Total ram usage:        0 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    3
  8963 ;; This function calls:
  8964 ;;		Nothing
  8965 ;; This function is called by:
  8966 ;;		_SYSTEM_Initialize
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           
  8971                           ;psect for function _OPA2_Initialize
  8972  18F2                     _OPA2_Initialize:	
  8973                           
  8974                           ;opa2.c: 60: OPA2CON = 0x80;
  8975                           
  8976                           ;incstack = 0
  8977                           ; Regs used in _OPA2_Initialize: [wreg]
  8978  18F2  3080               	movlw	128
  8979  18F3  002A               	movlb	10	; select bank10
  8980  18F4  0093               	movwf	19	;volatile
  8981  18F5  0008               	return
  8982  18F6                     __end_of_OPA2_Initialize:	
  8983                           
  8984                           	psect	text9
  8985  18EE                     __ptext9:	
  8986 ;; *************** function _OPA1_Initialize *****************
  8987 ;; Defined at:
  8988 ;;		line 58 in file "mcc_generated_files/opa1.c"
  8989 ;; Parameters:    Size  Location     Type
  8990 ;;		None
  8991 ;; Auto vars:     Size  Location     Type
  8992 ;;		None
  8993 ;; Return value:  Size  Location     Type
  8994 ;;		None               void
  8995 ;; Registers used:
  8996 ;;		wreg
  8997 ;; Tracked objects:
  8998 ;;		On entry : 0/0
  8999 ;;		On exit  : 0/0
  9000 ;;		Unchanged: 0/0
  9001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9006 ;;Total ram usage:        0 bytes
  9007 ;; Hardware stack levels used:    1
  9008 ;; Hardware stack levels required when called:    3
  9009 ;; This function calls:
  9010 ;;		Nothing
  9011 ;; This function is called by:
  9012 ;;		_SYSTEM_Initialize
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016                           
  9017                           ;psect for function _OPA1_Initialize
  9018  18EE                     _OPA1_Initialize:	
  9019                           
  9020                           ;opa1.c: 60: OPA1CON = 0x84;
  9021                           
  9022                           ;incstack = 0
  9023                           ; Regs used in _OPA1_Initialize: [wreg]
  9024  18EE  3084               	movlw	132
  9025  18EF  002A               	movlb	10	; select bank10
  9026  18F0  0091               	movwf	17	;volatile
  9027  18F1  0008               	return
  9028  18F2                     __end_of_OPA1_Initialize:	
  9029                           
  9030                           	psect	text10
  9031  18EA                     __ptext10:	
  9032 ;; *************** function _FVR_Initialize *****************
  9033 ;; Defined at:
  9034 ;;		line 58 in file "mcc_generated_files/fvr.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;		None
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;		None
  9039 ;; Return value:  Size  Location     Type
  9040 ;;		None               void
  9041 ;; Registers used:
  9042 ;;		wreg
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9052 ;;Total ram usage:        0 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    3
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		_SYSTEM_Initialize
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           
  9063                           ;psect for function _FVR_Initialize
  9064  18EA                     _FVR_Initialize:	
  9065                           
  9066                           ;fvr.c: 60: FVRCON = 0x8A;
  9067                           
  9068                           ;incstack = 0
  9069                           ; Regs used in _FVR_Initialize: [wreg]
  9070  18EA  308A               	movlw	138
  9071  18EB  0022               	movlb	2	; select bank2
  9072  18EC  0097               	movwf	23	;volatile
  9073  18ED  0008               	return
  9074  18EE                     __end_of_FVR_Initialize:	
  9075                           
  9076                           	psect	text11
  9077  1A56                     __ptext11:	
  9078 ;; *************** function _EUSART_Initialize *****************
  9079 ;; Defined at:
  9080 ;;		line 78 in file "mcc_generated_files/eusart.c"
  9081 ;; Parameters:    Size  Location     Type
  9082 ;;		None
  9083 ;; Auto vars:     Size  Location     Type
  9084 ;;		None
  9085 ;; Return value:  Size  Location     Type
  9086 ;;		None               void
  9087 ;; Registers used:
  9088 ;;		wreg, status,2
  9089 ;; Tracked objects:
  9090 ;;		On entry : 0/0
  9091 ;;		On exit  : 0/0
  9092 ;;		Unchanged: 0/0
  9093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9096 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9097 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9098 ;;Total ram usage:        1 bytes
  9099 ;; Hardware stack levels used:    1
  9100 ;; Hardware stack levels required when called:    3
  9101 ;; This function calls:
  9102 ;;		Nothing
  9103 ;; This function is called by:
  9104 ;;		_SYSTEM_Initialize
  9105 ;; This function uses a non-reentrant model
  9106 ;;
  9107                           
  9108                           
  9109                           ;psect for function _EUSART_Initialize
  9110  1A56                     _EUSART_Initialize:	
  9111                           
  9112                           ;eusart.c: 80: PIE1bits.RCIE = 0;
  9113                           
  9114                           ;incstack = 0
  9115                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  9116  1A56  0021               	movlb	1	; select bank1
  9117  1A57  1291               	bcf	17,5	;volatile
  9118                           
  9119                           ;eusart.c: 81: PIE1bits.TXIE = 0;
  9120  1A58  1211               	bcf	17,4	;volatile
  9121                           
  9122                           ;eusart.c: 86: BAUD1CON = 0x48;
  9123  1A59  3048               	movlw	72
  9124  1A5A  0023               	movlb	3	; select bank3
  9125  1A5B  009F               	movwf	31	;volatile
  9126                           
  9127                           ;eusart.c: 89: RC1STA = 0x90;
  9128  1A5C  3090               	movlw	144
  9129  1A5D  009D               	movwf	29	;volatile
  9130                           
  9131                           ;eusart.c: 92: TX1STA = 0x26;
  9132  1A5E  3026               	movlw	38
  9133  1A5F  009E               	movwf	30	;volatile
  9134                           
  9135                           ;eusart.c: 95: SP1BRGL = 0xA0;
  9136  1A60  30A0               	movlw	160
  9137  1A61  009B               	movwf	27	;volatile
  9138                           
  9139                           ;eusart.c: 98: SP1BRGH = 0x01;
  9140  1A62  3001               	movlw	1
  9141  1A63  009C               	movwf	28	;volatile
  9142                           
  9143                           ;eusart.c: 102: eusartTxHead = 0;
  9144  1A64  0021               	movlb	1	; select bank1
  9145  1A65  01EC               	clrf	_eusartTxHead^(0+128)
  9146                           
  9147                           ;eusart.c: 103: eusartTxTail = 0;
  9148  1A66  01ED               	clrf	_eusartTxTail^(0+128)
  9149                           
  9150                           ;eusart.c: 104: eusartTxBufferRemaining = sizeof (eusartTxBuffer);
  9151  1A67  3008               	movlw	8
  9152  1A68  00F2               	movwf	??_EUSART_Initialize
  9153  1A69  0872               	movf	??_EUSART_Initialize,w
  9154  1A6A  0022               	movlb	2	; select bank2
  9155  1A6B  00EE               	movwf	_eusartTxBufferRemaining^(0+256)	;volatile
  9156                           
  9157                           ;eusart.c: 106: eusartRxHead = 0;
  9158  1A6C  0021               	movlb	1	; select bank1
  9159  1A6D  01EA               	clrf	_eusartRxHead^(0+128)
  9160                           
  9161                           ;eusart.c: 107: eusartRxTail = 0;
  9162  1A6E  01EB               	clrf	_eusartRxTail^(0+128)
  9163                           
  9164                           ;eusart.c: 108: eusartRxCount = 0;
  9165  1A6F  01E9               	clrf	_eusartRxCount^(0+128)	;volatile
  9166                           
  9167                           ;eusart.c: 111: PIE1bits.RCIE = 1;
  9168  1A70  1691               	bsf	17,5	;volatile
  9169  1A71  0008               	return
  9170  1A72                     __end_of_EUSART_Initialize:	
  9171                           
  9172                           	psect	text12
  9173  18FF                     __ptext12:	
  9174 ;; *************** function _DAC1_Initialize *****************
  9175 ;; Defined at:
  9176 ;;		line 58 in file "mcc_generated_files/dac1.c"
  9177 ;; Parameters:    Size  Location     Type
  9178 ;;		None
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;		None
  9181 ;; Return value:  Size  Location     Type
  9182 ;;		None               void
  9183 ;; Registers used:
  9184 ;;		wreg, status,2
  9185 ;; Tracked objects:
  9186 ;;		On entry : 0/0
  9187 ;;		On exit  : 0/0
  9188 ;;		Unchanged: 0/0
  9189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9194 ;;Total ram usage:        0 bytes
  9195 ;; Hardware stack levels used:    1
  9196 ;; Hardware stack levels required when called:    3
  9197 ;; This function calls:
  9198 ;;		Nothing
  9199 ;; This function is called by:
  9200 ;;		_SYSTEM_Initialize
  9201 ;; This function uses a non-reentrant model
  9202 ;;
  9203                           
  9204                           
  9205                           ;psect for function _DAC1_Initialize
  9206  18FF                     _DAC1_Initialize:	
  9207                           
  9208                           ;dac1.c: 60: DAC1CON0 = 0x88;
  9209                           
  9210                           ;incstack = 0
  9211                           ; Regs used in _DAC1_Initialize: [wreg+status,2]
  9212  18FF  3088               	movlw	136
  9213  1900  0022               	movlb	2	; select bank2
  9214  1901  0098               	movwf	24	;volatile
  9215                           
  9216                           ;dac1.c: 62: DAC1CON1 = 0x00;
  9217  1902  0199               	clrf	25	;volatile
  9218  1903  0008               	return
  9219  1904                     __end_of_DAC1_Initialize:	
  9220                           
  9221                           	psect	text13
  9222  193F                     __ptext13:	
  9223 ;; *************** function _ADC_Initialize *****************
  9224 ;; Defined at:
  9225 ;;		line 65 in file "mcc_generated_files/adc.c"
  9226 ;; Parameters:    Size  Location     Type
  9227 ;;		None
  9228 ;; Auto vars:     Size  Location     Type
  9229 ;;		None
  9230 ;; Return value:  Size  Location     Type
  9231 ;;		None               void
  9232 ;; Registers used:
  9233 ;;		wreg, status,2
  9234 ;; Tracked objects:
  9235 ;;		On entry : 0/0
  9236 ;;		On exit  : 0/0
  9237 ;;		Unchanged: 0/0
  9238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9243 ;;Total ram usage:        0 bytes
  9244 ;; Hardware stack levels used:    1
  9245 ;; Hardware stack levels required when called:    3
  9246 ;; This function calls:
  9247 ;;		Nothing
  9248 ;; This function is called by:
  9249 ;;		_SYSTEM_Initialize
  9250 ;; This function uses a non-reentrant model
  9251 ;;
  9252                           
  9253                           
  9254                           ;psect for function _ADC_Initialize
  9255  193F                     _ADC_Initialize:	
  9256                           
  9257                           ;adc.c: 69: ADCON0 = 0x01;
  9258                           
  9259                           ;incstack = 0
  9260                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  9261  193F  3001               	movlw	1
  9262  1940  0021               	movlb	1	; select bank1
  9263  1941  009D               	movwf	29	;volatile
  9264                           
  9265                           ;adc.c: 72: ADCON1 = 0x03;
  9266  1942  3003               	movlw	3
  9267  1943  009E               	movwf	30	;volatile
  9268                           
  9269                           ;adc.c: 75: ADCON2 = 0x0F;
  9270  1944  300F               	movlw	15
  9271  1945  009F               	movwf	31	;volatile
  9272                           
  9273                           ;adc.c: 78: ADRESH = 0x00;
  9274  1946  019C               	clrf	28	;volatile
  9275                           
  9276                           ;adc.c: 81: ADRESL = 0x00;
  9277  1947  019B               	clrf	27	;volatile
  9278  1948  0008               	return
  9279  1949                     __end_of_ADC_Initialize:	
  9280                           
  9281                           	psect	text14
  9282  1762                     __ptext14:	
  9283 ;; *************** function _PIC_SYNC_ADO_ULSR *****************
  9284 ;; Defined at:
  9285 ;;		line 2123 in file "main.c"
  9286 ;; Parameters:    Size  Location     Type
  9287 ;;		None
  9288 ;; Auto vars:     Size  Location     Type
  9289 ;;  i               1   16[BANK0 ] unsigned char 
  9290 ;; Return value:  Size  Location     Type
  9291 ;;		None               void
  9292 ;; Registers used:
  9293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9294 ;; Tracked objects:
  9295 ;;		On entry : 0/0
  9296 ;;		On exit  : 0/0
  9297 ;;		Unchanged: 0/0
  9298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9301 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9302 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9303 ;;Total ram usage:        5 bytes
  9304 ;; Hardware stack levels used:    1
  9305 ;; Hardware stack levels required when called:    7
  9306 ;; This function calls:
  9307 ;;		_I2C_mREAD
  9308 ;;		_I2C_mWrite
  9309 ;;		_Print_CHLN
  9310 ;;		_Print_HEX2Str
  9311 ;;		_Print_uint16Str
  9312 ;; This function is called by:
  9313 ;;		_main
  9314 ;; This function uses a non-reentrant model
  9315 ;;
  9316                           
  9317                           
  9318                           ;psect for function _PIC_SYNC_ADO_ULSR
  9319  1762                     _PIC_SYNC_ADO_ULSR:	
  9320                           
  9321                           ;main.c: 2125: uint8_t i;
  9322                           ;main.c: 2129: *(BufferRec+0) = 0x00;
  9323                           
  9324                           ;incstack = 0
  9325                           ; Regs used in _PIC_SYNC_ADO_ULSR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9326  1762  0023               	movlb	3	; select bank3
  9327  1763  01A8               	clrf	_BufferRec^(0+384)
  9328                           
  9329                           ;main.c: 2130: *(BufferRec+1) = 0x4A;
  9330  1764  304A               	movlw	74
  9331  1765  0020               	movlb	0	; select bank0
  9332  1766  00AC               	movwf	??_PIC_SYNC_ADO_ULSR
  9333  1767  082C               	movf	??_PIC_SYNC_ADO_ULSR,w
  9334  1768  0023               	movlb	3	; select bank3
  9335  1769  00A9               	movwf	(_BufferRec^(0+384)+1)
  9336                           
  9337                           ;main.c: 2131: *(BufferRec+2) = 2;
  9338  176A  3002               	movlw	2
  9339  176B  0020               	movlb	0	; select bank0
  9340  176C  00AC               	movwf	??_PIC_SYNC_ADO_ULSR
  9341  176D  082C               	movf	??_PIC_SYNC_ADO_ULSR,w
  9342  176E  0023               	movlb	3	; select bank3
  9343  176F  00AA               	movwf	(_BufferRec^(0+384)+2)
  9344                           
  9345                           ;main.c: 2134: I2C_mWrite(BufferRec, 3+1, 0x10);
  9346  1770  30A8               	movlw	low _BufferRec
  9347  1771  00F6               	movwf	I2C_mWrite@value
  9348  1772  3001               	movlw	high _BufferRec
  9349  1773  00F7               	movwf	I2C_mWrite@value+1
  9350  1774  3004               	movlw	4
  9351  1775  0020               	movlb	0	; select bank0
  9352  1776  00AC               	movwf	??_PIC_SYNC_ADO_ULSR
  9353  1777  082C               	movf	??_PIC_SYNC_ADO_ULSR,w
  9354  1778  00F8               	movwf	I2C_mWrite@Size
  9355  1779  3010               	movlw	16
  9356  177A  00AD               	movwf	??_PIC_SYNC_ADO_ULSR+1
  9357  177B  082D               	movf	??_PIC_SYNC_ADO_ULSR+1,w
  9358  177C  00F9               	movwf	I2C_mWrite@slave_addr
  9359  177D  319E  2683  3197   	fcall	_I2C_mWrite
  9360                           
  9361                           ;main.c: 2135: I2C_mREAD(BufferRec, 2, 0x10);
  9362  1780  3002               	movlw	2
  9363  1781  0020               	movlb	0	; select bank0
  9364  1782  00AC               	movwf	??_PIC_SYNC_ADO_ULSR
  9365  1783  082C               	movf	??_PIC_SYNC_ADO_ULSR,w
  9366  1784  00F7               	movwf	I2C_mREAD@Size
  9367  1785  3010               	movlw	16
  9368  1786  00AD               	movwf	??_PIC_SYNC_ADO_ULSR+1
  9369  1787  082D               	movf	??_PIC_SYNC_ADO_ULSR+1,w
  9370  1788  00F8               	movwf	I2C_mREAD@slave_addr
  9371  1789  30A8               	movlw	(low (_BufferRec| (0+256)))& (0+255)
  9372  178A  319E  263E  3197   	fcall	_I2C_mREAD
  9373                           
  9374                           ;main.c: 2138: for(i=0; i<2; i++)
  9375  178D  0020               	movlb	0	; select bank0
  9376  178E  01B0               	clrf	PIC_SYNC_ADO_ULSR@i
  9377  178F  3002               	movlw	2
  9378  1790  0230               	subwf	PIC_SYNC_ADO_ULSR@i,w
  9379  1791  1803               	btfsc	3,0
  9380  1792  2FA7               	goto	l7682
  9381  1793                     l7676:	
  9382                           
  9383                           ;main.c: 2139: {
  9384                           ;main.c: 2140: Print_HEX2Str(*(BufferRec + i), 1);
  9385  1793  01F7               	clrf	Print_HEX2Str@Chgln
  9386  1794  0AF7               	incf	Print_HEX2Str@Chgln,f
  9387  1795  0830               	movf	PIC_SYNC_ADO_ULSR@i,w
  9388  1796  3EA8               	addlw	(low (_BufferRec| (0+256)))& (0+255)
  9389  1797  0086               	movwf	6
  9390  1798  3001               	movlw	1	; select bank3/4
  9391  1799  0087               	movwf	7
  9392  179A  0801               	movf	1,w
  9393  179B  319F  270D  3197   	fcall	_Print_HEX2Str
  9394  179E  3001               	movlw	1
  9395  179F  0020               	movlb	0	; select bank0
  9396  17A0  00AC               	movwf	??_PIC_SYNC_ADO_ULSR
  9397  17A1  082C               	movf	??_PIC_SYNC_ADO_ULSR,w
  9398  17A2  07B0               	addwf	PIC_SYNC_ADO_ULSR@i,f
  9399  17A3  3002               	movlw	2
  9400  17A4  0230               	subwf	PIC_SYNC_ADO_ULSR@i,w
  9401  17A5  1C03               	skipc
  9402  17A6  2F93               	goto	l7676
  9403  17A7                     l7682:	
  9404                           
  9405                           ;main.c: 2141: }
  9406                           ;main.c: 2144: NUL_SecCount_offset = 10;
  9407  17A7  3000               	movlw	0
  9408  17A8  0022               	movlb	2	; select bank2
  9409  17A9  00E6               	movwf	(_NUL_SecCount_offset+3)^(0+256)
  9410  17AA  3000               	movlw	0
  9411  17AB  00E5               	movwf	(_NUL_SecCount_offset+2)^(0+256)
  9412  17AC  3000               	movlw	0
  9413  17AD  00E4               	movwf	(_NUL_SecCount_offset+1)^(0+256)
  9414  17AE  300A               	movlw	10
  9415  17AF  00E3               	movwf	_NUL_SecCount_offset^(0+256)
  9416                           
  9417                           ;main.c: 2145: NUL_SecCount = RTC_SecCount + NUL_SecCount_offset;
  9418  17B0  0021               	movlb	1	; select bank1
  9419  17B1  085F               	movf	_RTC_SecCount^(0+128),w
  9420  17B2  0022               	movlb	2	; select bank2
  9421  17B3  0763               	addwf	_NUL_SecCount_offset^(0+256),w
  9422  17B4  0020               	movlb	0	; select bank0
  9423  17B5  00AC               	movwf	??_PIC_SYNC_ADO_ULSR
  9424  17B6  0021               	movlb	1	; select bank1
  9425  17B7  0860               	movf	(_RTC_SecCount+1)^(0+128),w
  9426  17B8  0022               	movlb	2	; select bank2
  9427  17B9  3D64               	addwfc	(_NUL_SecCount_offset+1)^(0+256),w
  9428  17BA  0020               	movlb	0	; select bank0
  9429  17BB  00AD               	movwf	??_PIC_SYNC_ADO_ULSR+1
  9430  17BC  0021               	movlb	1	; select bank1
  9431  17BD  0861               	movf	(_RTC_SecCount+2)^(0+128),w
  9432  17BE  0022               	movlb	2	; select bank2
  9433  17BF  3D65               	addwfc	(_NUL_SecCount_offset+2)^(0+256),w
  9434  17C0  0020               	movlb	0	; select bank0
  9435  17C1  00AE               	movwf	??_PIC_SYNC_ADO_ULSR+2
  9436  17C2  0021               	movlb	1	; select bank1
  9437  17C3  0862               	movf	(_RTC_SecCount+3)^(0+128),w
  9438  17C4  0022               	movlb	2	; select bank2
  9439  17C5  3D66               	addwfc	(_NUL_SecCount_offset+3)^(0+256),w
  9440  17C6  0020               	movlb	0	; select bank0
  9441  17C7  00AF               	movwf	??_PIC_SYNC_ADO_ULSR+3
  9442  17C8  082F               	movf	??_PIC_SYNC_ADO_ULSR+3,w
  9443  17C9  0022               	movlb	2	; select bank2
  9444  17CA  00E2               	movwf	(_NUL_SecCount+3)^(0+256)
  9445  17CB  0020               	movlb	0	; select bank0
  9446  17CC  082E               	movf	??_PIC_SYNC_ADO_ULSR+2,w
  9447  17CD  0022               	movlb	2	; select bank2
  9448  17CE  00E1               	movwf	(_NUL_SecCount+2)^(0+256)
  9449  17CF  0020               	movlb	0	; select bank0
  9450  17D0  082D               	movf	??_PIC_SYNC_ADO_ULSR+1,w
  9451  17D1  0022               	movlb	2	; select bank2
  9452  17D2  00E0               	movwf	(_NUL_SecCount+1)^(0+256)
  9453  17D3  0020               	movlb	0	; select bank0
  9454  17D4  082C               	movf	??_PIC_SYNC_ADO_ULSR,w
  9455  17D5  0022               	movlb	2	; select bank2
  9456  17D6  00DF               	movwf	_NUL_SecCount^(0+256)
  9457                           
  9458                           ;main.c: 2147: Print_uint16Str(NUL_SecCount_offset,1);
  9459  17D7  0864               	movf	(_NUL_SecCount_offset+1)^(0+256),w
  9460  17D8  0020               	movlb	0	; select bank0
  9461  17D9  00A1               	movwf	Print_uint16Str@InputVol+1
  9462  17DA  0022               	movlb	2	; select bank2
  9463  17DB  0863               	movf	_NUL_SecCount_offset^(0+256),w
  9464  17DC  0020               	movlb	0	; select bank0
  9465  17DD  00A0               	movwf	Print_uint16Str@InputVol
  9466  17DE  01A2               	clrf	Print_uint16Str@Chgln
  9467  17DF  0AA2               	incf	Print_uint16Str@Chgln,f
  9468  17E0  3196  2655  3197   	fcall	_Print_uint16Str
  9469                           
  9470                           ;main.c: 2148: Print_uint16Str(NUL_SecCount,1);
  9471  17E3  0022               	movlb	2	; select bank2
  9472  17E4  0860               	movf	(_NUL_SecCount+1)^(0+256),w
  9473  17E5  0020               	movlb	0	; select bank0
  9474  17E6  00A1               	movwf	Print_uint16Str@InputVol+1
  9475  17E7  0022               	movlb	2	; select bank2
  9476  17E8  085F               	movf	_NUL_SecCount^(0+256),w
  9477  17E9  0020               	movlb	0	; select bank0
  9478  17EA  00A0               	movwf	Print_uint16Str@InputVol
  9479  17EB  01A2               	clrf	Print_uint16Str@Chgln
  9480  17EC  0AA2               	incf	Print_uint16Str@Chgln,f
  9481  17ED  3196  2655  3197   	fcall	_Print_uint16Str
  9482                           
  9483                           ;main.c: 2149: Print_uint16Str(RTC_SecCount,1);
  9484  17F0  0021               	movlb	1	; select bank1
  9485  17F1  0860               	movf	(_RTC_SecCount+1)^(0+128),w
  9486  17F2  0020               	movlb	0	; select bank0
  9487  17F3  00A1               	movwf	Print_uint16Str@InputVol+1
  9488  17F4  0021               	movlb	1	; select bank1
  9489  17F5  085F               	movf	_RTC_SecCount^(0+128),w
  9490  17F6  0020               	movlb	0	; select bank0
  9491  17F7  00A0               	movwf	Print_uint16Str@InputVol
  9492  17F8  01A2               	clrf	Print_uint16Str@Chgln
  9493  17F9  0AA2               	incf	Print_uint16Str@Chgln,f
  9494  17FA  3196  2655  3197   	fcall	_Print_uint16Str
  9495                           
  9496                           ;main.c: 2151: Print_CHLN();
  9497  17FD  3199  211C         	fcall	_Print_CHLN
  9498  17FF  0008               	return
  9499  1800                     __end_of_PIC_SYNC_ADO_ULSR:	
  9500                           
  9501                           	psect	text15
  9502  0945                     __ptext15:	
  9503 ;; *************** function _PIC_SYNC_ADO_RTC *****************
  9504 ;; Defined at:
  9505 ;;		line 2059 in file "main.c"
  9506 ;; Parameters:    Size  Location     Type
  9507 ;;		None
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;  cHour           4   43[BANK0 ] unsigned long 
  9510 ;;  cMonth          2   51[BANK0 ] unsigned int 
  9511 ;;  cYear           2   49[BANK0 ] unsigned int 
  9512 ;;  cMin            2   47[BANK0 ] unsigned int 
  9513 ;;  cDay            2   41[BANK0 ] unsigned int 
  9514 ;;  cSec            2   39[BANK0 ] unsigned int 
  9515 ;;  i               1   53[BANK0 ] unsigned char 
  9516 ;; Return value:  Size  Location     Type
  9517 ;;		None               void
  9518 ;; Registers used:
  9519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9520 ;; Tracked objects:
  9521 ;;		On entry : 0/0
  9522 ;;		On exit  : 0/0
  9523 ;;		Unchanged: 0/0
  9524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9526 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9527 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9528 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9529 ;;Total ram usage:       27 bytes
  9530 ;; Hardware stack levels used:    1
  9531 ;; Hardware stack levels required when called:    7
  9532 ;; This function calls:
  9533 ;;		_Covert_BDC_2_OCT
  9534 ;;		_Covert_Month_2_Day
  9535 ;;		_I2C_mREAD
  9536 ;;		_I2C_mWrite
  9537 ;;		_Print_CHLN
  9538 ;;		_Print_HEX2Str
  9539 ;;		___lmul
  9540 ;;		___wmul
  9541 ;; This function is called by:
  9542 ;;		_main
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           
  9547                           ;psect for function _PIC_SYNC_ADO_RTC
  9548  0945                     _PIC_SYNC_ADO_RTC:	
  9549                           
  9550                           ;main.c: 2061: uint8_t i;
  9551                           ;main.c: 2062: uint16_t cYear = 0;
  9552                           
  9553                           ;incstack = 0
  9554                           ; Regs used in _PIC_SYNC_ADO_RTC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9555  0945  0020               	movlb	0	; select bank0
  9556  0946  01D1               	clrf	PIC_SYNC_ADO_RTC@cYear
  9557  0947  01D2               	clrf	PIC_SYNC_ADO_RTC@cYear+1
  9558                           
  9559                           ;main.c: 2063: uint16_t cMonth = 0;
  9560  0948  01D3               	clrf	PIC_SYNC_ADO_RTC@cMonth
  9561  0949  01D4               	clrf	PIC_SYNC_ADO_RTC@cMonth+1
  9562                           
  9563                           ;main.c: 2064: uint16_t cDay = 0;
  9564  094A  01C9               	clrf	PIC_SYNC_ADO_RTC@cDay
  9565  094B  01CA               	clrf	PIC_SYNC_ADO_RTC@cDay+1
  9566                           
  9567                           ;main.c: 2065: uint32_t cHour = 0;
  9568  094C  3000               	movlw	0
  9569  094D  00CE               	movwf	PIC_SYNC_ADO_RTC@cHour+3
  9570  094E  3000               	movlw	0
  9571  094F  00CD               	movwf	PIC_SYNC_ADO_RTC@cHour+2
  9572  0950  3000               	movlw	0
  9573  0951  00CC               	movwf	PIC_SYNC_ADO_RTC@cHour+1
  9574  0952  3000               	movlw	0
  9575  0953  00CB               	movwf	PIC_SYNC_ADO_RTC@cHour
  9576                           
  9577                           ;main.c: 2066: uint16_t cMin = 0;
  9578  0954  01CF               	clrf	PIC_SYNC_ADO_RTC@cMin
  9579  0955  01D0               	clrf	PIC_SYNC_ADO_RTC@cMin+1
  9580                           
  9581                           ;main.c: 2067: uint16_t cSec =0;
  9582  0956  01C7               	clrf	PIC_SYNC_ADO_RTC@cSec
  9583  0957  01C8               	clrf	PIC_SYNC_ADO_RTC@cSec+1
  9584                           
  9585                           ;main.c: 2075: *(BufferRec+0) = 0x00;
  9586  0958  0023               	movlb	3	; select bank3
  9587  0959  01A8               	clrf	_BufferRec^(0+384)
  9588                           
  9589                           ;main.c: 2076: *(BufferRec+1) = 0x50;
  9590  095A  3050               	movlw	80
  9591  095B  0020               	movlb	0	; select bank0
  9592  095C  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9593  095D  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9594  095E  0023               	movlb	3	; select bank3
  9595  095F  00A9               	movwf	(_BufferRec^(0+384)+1)
  9596                           
  9597                           ;main.c: 2077: *(BufferRec+2) = 7;
  9598  0960  3007               	movlw	7
  9599  0961  0020               	movlb	0	; select bank0
  9600  0962  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9601  0963  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9602  0964  0023               	movlb	3	; select bank3
  9603  0965  00AA               	movwf	(_BufferRec^(0+384)+2)
  9604                           
  9605                           ;main.c: 2080: I2C_mWrite(BufferRec, 3+1, 0x10);
  9606  0966  30A8               	movlw	low _BufferRec
  9607  0967  00F6               	movwf	I2C_mWrite@value
  9608  0968  3001               	movlw	high _BufferRec
  9609  0969  00F7               	movwf	I2C_mWrite@value+1
  9610  096A  3004               	movlw	4
  9611  096B  0020               	movlb	0	; select bank0
  9612  096C  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9613  096D  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9614  096E  00F8               	movwf	I2C_mWrite@Size
  9615  096F  3010               	movlw	16
  9616  0970  00BC               	movwf	??_PIC_SYNC_ADO_RTC+1
  9617  0971  083C               	movf	??_PIC_SYNC_ADO_RTC+1,w
  9618  0972  00F9               	movwf	I2C_mWrite@slave_addr
  9619  0973  319E  2683  3189   	fcall	_I2C_mWrite
  9620                           
  9621                           ;main.c: 2081: I2C_mREAD(BufferRec, 7, 0x10);
  9622  0976  3007               	movlw	7
  9623  0977  0020               	movlb	0	; select bank0
  9624  0978  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9625  0979  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9626  097A  00F7               	movwf	I2C_mREAD@Size
  9627  097B  3010               	movlw	16
  9628  097C  00BC               	movwf	??_PIC_SYNC_ADO_RTC+1
  9629  097D  083C               	movf	??_PIC_SYNC_ADO_RTC+1,w
  9630  097E  00F8               	movwf	I2C_mREAD@slave_addr
  9631  097F  30A8               	movlw	(low (_BufferRec| (0+256)))& (0+255)
  9632  0980  319E  263E  3189   	fcall	_I2C_mREAD
  9633                           
  9634                           ;main.c: 2083: cYear = Covert_BDC_2_OCT(*(BufferRec + 1));
  9635  0983  0023               	movlb	3	; select bank3
  9636  0984  0829               	movf	(_BufferRec^(0+384)+1),w
  9637  0985  319A  22C9  3189   	fcall	_Covert_BDC_2_OCT
  9638  0988  0020               	movlb	0	; select bank0
  9639  0989  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9640  098A  01BC               	clrf	??_PIC_SYNC_ADO_RTC+1
  9641  098B  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9642  098C  00D1               	movwf	PIC_SYNC_ADO_RTC@cYear
  9643  098D  083C               	movf	??_PIC_SYNC_ADO_RTC+1,w
  9644  098E  00D2               	movwf	PIC_SYNC_ADO_RTC@cYear+1
  9645                           
  9646                           ;main.c: 2084: cYear -= 16;
  9647  098F  3010               	movlw	16
  9648  0990  02D1               	subwf	PIC_SYNC_ADO_RTC@cYear,f
  9649  0991  3000               	movlw	0
  9650  0992  3BD2               	subwfb	PIC_SYNC_ADO_RTC@cYear+1,f
  9651                           
  9652                           ;main.c: 2085: cMonth = Covert_BDC_2_OCT(*(BufferRec + 2));
  9653  0993  0023               	movlb	3	; select bank3
  9654  0994  082A               	movf	(_BufferRec^(0+384)+2),w
  9655  0995  319A  22C9  3189   	fcall	_Covert_BDC_2_OCT
  9656  0998  0020               	movlb	0	; select bank0
  9657  0999  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9658  099A  01BC               	clrf	??_PIC_SYNC_ADO_RTC+1
  9659  099B  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9660  099C  00D3               	movwf	PIC_SYNC_ADO_RTC@cMonth
  9661  099D  083C               	movf	??_PIC_SYNC_ADO_RTC+1,w
  9662  099E  00D4               	movwf	PIC_SYNC_ADO_RTC@cMonth+1
  9663                           
  9664                           ;main.c: 2086: cMonth -= 1;
  9665  099F  3001               	movlw	1
  9666  09A0  02D3               	subwf	PIC_SYNC_ADO_RTC@cMonth,f
  9667  09A1  3000               	movlw	0
  9668  09A2  3BD4               	subwfb	PIC_SYNC_ADO_RTC@cMonth+1,f
  9669                           
  9670                           ;main.c: 2087: cDay = Covert_BDC_2_OCT(*(BufferRec + 3));
  9671  09A3  0023               	movlb	3	; select bank3
  9672  09A4  082B               	movf	(_BufferRec^(0+384)+3),w
  9673  09A5  319A  22C9  3189   	fcall	_Covert_BDC_2_OCT
  9674  09A8  0020               	movlb	0	; select bank0
  9675  09A9  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9676  09AA  01BC               	clrf	??_PIC_SYNC_ADO_RTC+1
  9677  09AB  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9678  09AC  00C9               	movwf	PIC_SYNC_ADO_RTC@cDay
  9679  09AD  083C               	movf	??_PIC_SYNC_ADO_RTC+1,w
  9680  09AE  00CA               	movwf	PIC_SYNC_ADO_RTC@cDay+1
  9681                           
  9682                           ;main.c: 2088: cDay -= 1;
  9683  09AF  3001               	movlw	1
  9684  09B0  02C9               	subwf	PIC_SYNC_ADO_RTC@cDay,f
  9685  09B1  3000               	movlw	0
  9686  09B2  3BCA               	subwfb	PIC_SYNC_ADO_RTC@cDay+1,f
  9687                           
  9688                           ;main.c: 2090: cYear *= 365;
  9689  09B3  306D               	movlw	109
  9690  09B4  00F2               	movwf	___wmul@multiplier
  9691  09B5  3001               	movlw	1
  9692  09B6  00F3               	movwf	___wmul@multiplier+1
  9693  09B7  0852               	movf	PIC_SYNC_ADO_RTC@cYear+1,w
  9694  09B8  00F5               	movwf	___wmul@multiplicand+1
  9695  09B9  0851               	movf	PIC_SYNC_ADO_RTC@cYear,w
  9696  09BA  00F4               	movwf	___wmul@multiplicand
  9697  09BB  319A  223B  3189   	fcall	___wmul
  9698  09BE  0873               	movf	?___wmul+1,w
  9699  09BF  0020               	movlb	0	; select bank0
  9700  09C0  00D2               	movwf	PIC_SYNC_ADO_RTC@cYear+1
  9701  09C1  0872               	movf	?___wmul,w
  9702  09C2  00D1               	movwf	PIC_SYNC_ADO_RTC@cYear
  9703                           
  9704                           ;main.c: 2091: cMonth = Covert_Month_2_Day(cMonth);
  9705  09C3  0854               	movf	PIC_SYNC_ADO_RTC@cMonth+1,w
  9706  09C4  00F3               	movwf	Covert_Month_2_Day@iMonth+1
  9707  09C5  0853               	movf	PIC_SYNC_ADO_RTC@cMonth,w
  9708  09C6  00F2               	movwf	Covert_Month_2_Day@iMonth
  9709  09C7  319D  254D  3189   	fcall	_Covert_Month_2_Day
  9710  09CA  0873               	movf	?_Covert_Month_2_Day+1,w
  9711  09CB  0020               	movlb	0	; select bank0
  9712  09CC  00D4               	movwf	PIC_SYNC_ADO_RTC@cMonth+1
  9713  09CD  0872               	movf	?_Covert_Month_2_Day,w
  9714  09CE  00D3               	movwf	PIC_SYNC_ADO_RTC@cMonth
  9715                           
  9716                           ;main.c: 2093: cHour = Covert_BDC_2_OCT(*(BufferRec + 4));
  9717  09CF  0023               	movlb	3	; select bank3
  9718  09D0  082C               	movf	(_BufferRec^(0+384)+4),w
  9719  09D1  319A  22C9  3189   	fcall	_Covert_BDC_2_OCT
  9720  09D4  0020               	movlb	0	; select bank0
  9721  09D5  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9722  09D6  01BC               	clrf	??_PIC_SYNC_ADO_RTC+1
  9723  09D7  01BD               	clrf	??_PIC_SYNC_ADO_RTC+2
  9724  09D8  01BE               	clrf	??_PIC_SYNC_ADO_RTC+3
  9725  09D9  083E               	movf	??_PIC_SYNC_ADO_RTC+3,w
  9726  09DA  00CE               	movwf	PIC_SYNC_ADO_RTC@cHour+3
  9727  09DB  083D               	movf	??_PIC_SYNC_ADO_RTC+2,w
  9728  09DC  00CD               	movwf	PIC_SYNC_ADO_RTC@cHour+2
  9729  09DD  083C               	movf	??_PIC_SYNC_ADO_RTC+1,w
  9730  09DE  00CC               	movwf	PIC_SYNC_ADO_RTC@cHour+1
  9731  09DF  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9732  09E0  00CB               	movwf	PIC_SYNC_ADO_RTC@cHour
  9733                           
  9734                           ;main.c: 2094: cHour *= 3600;
  9735  09E1  3000               	movlw	0
  9736  09E2  00F5               	movwf	___lmul@multiplier+3
  9737  09E3  3000               	movlw	0
  9738  09E4  00F4               	movwf	___lmul@multiplier+2
  9739  09E5  300E               	movlw	14
  9740  09E6  00F3               	movwf	___lmul@multiplier+1
  9741  09E7  3010               	movlw	16
  9742  09E8  00F2               	movwf	___lmul@multiplier
  9743  09E9  084E               	movf	PIC_SYNC_ADO_RTC@cHour+3,w
  9744  09EA  00F9               	movwf	___lmul@multiplicand+3
  9745  09EB  084D               	movf	PIC_SYNC_ADO_RTC@cHour+2,w
  9746  09EC  00F8               	movwf	___lmul@multiplicand+2
  9747  09ED  084C               	movf	PIC_SYNC_ADO_RTC@cHour+1,w
  9748  09EE  00F7               	movwf	___lmul@multiplicand+1
  9749  09EF  084B               	movf	PIC_SYNC_ADO_RTC@cHour,w
  9750  09F0  00F6               	movwf	___lmul@multiplicand
  9751  09F1  319C  24B3  3189   	fcall	___lmul
  9752  09F4  0875               	movf	?___lmul+3,w
  9753  09F5  0020               	movlb	0	; select bank0
  9754  09F6  00CE               	movwf	PIC_SYNC_ADO_RTC@cHour+3
  9755  09F7  0874               	movf	?___lmul+2,w
  9756  09F8  00CD               	movwf	PIC_SYNC_ADO_RTC@cHour+2
  9757  09F9  0873               	movf	?___lmul+1,w
  9758  09FA  00CC               	movwf	PIC_SYNC_ADO_RTC@cHour+1
  9759  09FB  0872               	movf	?___lmul,w
  9760  09FC  00CB               	movwf	PIC_SYNC_ADO_RTC@cHour
  9761                           
  9762                           ;main.c: 2095: cMin = Covert_BDC_2_OCT(*(BufferRec + 5));
  9763  09FD  0023               	movlb	3	; select bank3
  9764  09FE  082D               	movf	(_BufferRec^(0+384)+5),w
  9765  09FF  319A  22C9  3189   	fcall	_Covert_BDC_2_OCT
  9766  0A02  0020               	movlb	0	; select bank0
  9767  0A03  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9768  0A04  01BC               	clrf	??_PIC_SYNC_ADO_RTC+1
  9769  0A05  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9770  0A06  00CF               	movwf	PIC_SYNC_ADO_RTC@cMin
  9771  0A07  083C               	movf	??_PIC_SYNC_ADO_RTC+1,w
  9772  0A08  00D0               	movwf	PIC_SYNC_ADO_RTC@cMin+1
  9773                           
  9774                           ;main.c: 2096: cMin *= 60;
  9775  0A09  303C               	movlw	60
  9776  0A0A  00F2               	movwf	___wmul@multiplier
  9777  0A0B  3000               	movlw	0
  9778  0A0C  00F3               	movwf	___wmul@multiplier+1
  9779  0A0D  0850               	movf	PIC_SYNC_ADO_RTC@cMin+1,w
  9780  0A0E  00F5               	movwf	___wmul@multiplicand+1
  9781  0A0F  084F               	movf	PIC_SYNC_ADO_RTC@cMin,w
  9782  0A10  00F4               	movwf	___wmul@multiplicand
  9783  0A11  319A  223B  3189   	fcall	___wmul
  9784  0A14  0873               	movf	?___wmul+1,w
  9785  0A15  0020               	movlb	0	; select bank0
  9786  0A16  00D0               	movwf	PIC_SYNC_ADO_RTC@cMin+1
  9787  0A17  0872               	movf	?___wmul,w
  9788  0A18  00CF               	movwf	PIC_SYNC_ADO_RTC@cMin
  9789                           
  9790                           ;main.c: 2097: cSec = Covert_BDC_2_OCT(*(BufferRec + 6));
  9791  0A19  0023               	movlb	3	; select bank3
  9792  0A1A  082E               	movf	(_BufferRec^(0+384)+6),w
  9793  0A1B  319A  22C9  3189   	fcall	_Covert_BDC_2_OCT
  9794  0A1E  0020               	movlb	0	; select bank0
  9795  0A1F  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9796  0A20  01BC               	clrf	??_PIC_SYNC_ADO_RTC+1
  9797  0A21  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9798  0A22  00C7               	movwf	PIC_SYNC_ADO_RTC@cSec
  9799  0A23  083C               	movf	??_PIC_SYNC_ADO_RTC+1,w
  9800  0A24  00C8               	movwf	PIC_SYNC_ADO_RTC@cSec+1
  9801                           
  9802                           ;main.c: 2100: RTC_DayCount = cYear + cMonth + cDay;
  9803  0A25  0853               	movf	PIC_SYNC_ADO_RTC@cMonth,w
  9804  0A26  0751               	addwf	PIC_SYNC_ADO_RTC@cYear,w
  9805  0A27  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9806  0A28  0854               	movf	PIC_SYNC_ADO_RTC@cMonth+1,w
  9807  0A29  3D52               	addwfc	PIC_SYNC_ADO_RTC@cYear+1,w
  9808  0A2A  00BC               	movwf	??_PIC_SYNC_ADO_RTC+1
  9809  0A2B  0849               	movf	PIC_SYNC_ADO_RTC@cDay,w
  9810  0A2C  073B               	addwf	??_PIC_SYNC_ADO_RTC,w
  9811  0A2D  0022               	movlb	2	; select bank2
  9812  0A2E  00C8               	movwf	_RTC_DayCount^(0+256)
  9813  0A2F  0020               	movlb	0	; select bank0
  9814  0A30  084A               	movf	PIC_SYNC_ADO_RTC@cDay+1,w
  9815  0A31  3D3C               	addwfc	??_PIC_SYNC_ADO_RTC+1,w
  9816  0A32  0022               	movlb	2	; select bank2
  9817  0A33  00C9               	movwf	(_RTC_DayCount+1)^(0+256)
  9818                           
  9819                           ;main.c: 2101: RTC_SecCount = cHour + cMin + cSec;
  9820  0A34  0020               	movlb	0	; select bank0
  9821  0A35  084B               	movf	PIC_SYNC_ADO_RTC@cHour,w
  9822  0A36  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9823  0A37  084C               	movf	PIC_SYNC_ADO_RTC@cHour+1,w
  9824  0A38  00BC               	movwf	??_PIC_SYNC_ADO_RTC+1
  9825  0A39  084D               	movf	PIC_SYNC_ADO_RTC@cHour+2,w
  9826  0A3A  00BD               	movwf	??_PIC_SYNC_ADO_RTC+2
  9827  0A3B  084E               	movf	PIC_SYNC_ADO_RTC@cHour+3,w
  9828  0A3C  00BE               	movwf	??_PIC_SYNC_ADO_RTC+3
  9829  0A3D  0847               	movf	PIC_SYNC_ADO_RTC@cSec,w
  9830  0A3E  00BF               	movwf	??_PIC_SYNC_ADO_RTC+4
  9831  0A3F  0848               	movf	PIC_SYNC_ADO_RTC@cSec+1,w
  9832  0A40  00C0               	movwf	??_PIC_SYNC_ADO_RTC+5
  9833  0A41  01C1               	clrf	??_PIC_SYNC_ADO_RTC+6
  9834  0A42  01C2               	clrf	??_PIC_SYNC_ADO_RTC+7
  9835  0A43  084F               	movf	PIC_SYNC_ADO_RTC@cMin,w
  9836  0A44  00C3               	movwf	??_PIC_SYNC_ADO_RTC+8
  9837  0A45  0850               	movf	PIC_SYNC_ADO_RTC@cMin+1,w
  9838  0A46  00C4               	movwf	??_PIC_SYNC_ADO_RTC+9
  9839  0A47  01C5               	clrf	??_PIC_SYNC_ADO_RTC+10
  9840  0A48  01C6               	clrf	??_PIC_SYNC_ADO_RTC+11
  9841  0A49  0843               	movf	??_PIC_SYNC_ADO_RTC+8,w
  9842  0A4A  07BF               	addwf	??_PIC_SYNC_ADO_RTC+4,f
  9843  0A4B  0844               	movf	??_PIC_SYNC_ADO_RTC+9,w
  9844  0A4C  3DC0               	addwfc	??_PIC_SYNC_ADO_RTC+5,f
  9845  0A4D  0845               	movf	??_PIC_SYNC_ADO_RTC+10,w
  9846  0A4E  3DC1               	addwfc	??_PIC_SYNC_ADO_RTC+6,f
  9847  0A4F  0846               	movf	??_PIC_SYNC_ADO_RTC+11,w
  9848  0A50  3DC2               	addwfc	??_PIC_SYNC_ADO_RTC+7,f
  9849  0A51  083F               	movf	??_PIC_SYNC_ADO_RTC+4,w
  9850  0A52  07BB               	addwf	??_PIC_SYNC_ADO_RTC,f
  9851  0A53  0840               	movf	??_PIC_SYNC_ADO_RTC+5,w
  9852  0A54  3DBC               	addwfc	??_PIC_SYNC_ADO_RTC+1,f
  9853  0A55  0841               	movf	??_PIC_SYNC_ADO_RTC+6,w
  9854  0A56  3DBD               	addwfc	??_PIC_SYNC_ADO_RTC+2,f
  9855  0A57  0842               	movf	??_PIC_SYNC_ADO_RTC+7,w
  9856  0A58  3DBE               	addwfc	??_PIC_SYNC_ADO_RTC+3,f
  9857  0A59  083E               	movf	??_PIC_SYNC_ADO_RTC+3,w
  9858  0A5A  0021               	movlb	1	; select bank1
  9859  0A5B  00E2               	movwf	(_RTC_SecCount+3)^(0+128)
  9860  0A5C  0020               	movlb	0	; select bank0
  9861  0A5D  083D               	movf	??_PIC_SYNC_ADO_RTC+2,w
  9862  0A5E  0021               	movlb	1	; select bank1
  9863  0A5F  00E1               	movwf	(_RTC_SecCount+2)^(0+128)
  9864  0A60  0020               	movlb	0	; select bank0
  9865  0A61  083C               	movf	??_PIC_SYNC_ADO_RTC+1,w
  9866  0A62  0021               	movlb	1	; select bank1
  9867  0A63  00E0               	movwf	(_RTC_SecCount+1)^(0+128)
  9868  0A64  0020               	movlb	0	; select bank0
  9869  0A65  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9870  0A66  0021               	movlb	1	; select bank1
  9871  0A67  00DF               	movwf	_RTC_SecCount^(0+128)
  9872                           
  9873                           ;main.c: 2103: NUL_SecCount = RTC_SecCount + NUL_SecCount_offset;
  9874  0A68  085F               	movf	_RTC_SecCount^(0+128),w
  9875  0A69  0022               	movlb	2	; select bank2
  9876  0A6A  0763               	addwf	_NUL_SecCount_offset^(0+256),w
  9877  0A6B  0020               	movlb	0	; select bank0
  9878  0A6C  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9879  0A6D  0021               	movlb	1	; select bank1
  9880  0A6E  0860               	movf	(_RTC_SecCount+1)^(0+128),w
  9881  0A6F  0022               	movlb	2	; select bank2
  9882  0A70  3D64               	addwfc	(_NUL_SecCount_offset+1)^(0+256),w
  9883  0A71  0020               	movlb	0	; select bank0
  9884  0A72  00BC               	movwf	??_PIC_SYNC_ADO_RTC+1
  9885  0A73  0021               	movlb	1	; select bank1
  9886  0A74  0861               	movf	(_RTC_SecCount+2)^(0+128),w
  9887  0A75  0022               	movlb	2	; select bank2
  9888  0A76  3D65               	addwfc	(_NUL_SecCount_offset+2)^(0+256),w
  9889  0A77  0020               	movlb	0	; select bank0
  9890  0A78  00BD               	movwf	??_PIC_SYNC_ADO_RTC+2
  9891  0A79  0021               	movlb	1	; select bank1
  9892  0A7A  0862               	movf	(_RTC_SecCount+3)^(0+128),w
  9893  0A7B  0022               	movlb	2	; select bank2
  9894  0A7C  3D66               	addwfc	(_NUL_SecCount_offset+3)^(0+256),w
  9895  0A7D  0020               	movlb	0	; select bank0
  9896  0A7E  00BE               	movwf	??_PIC_SYNC_ADO_RTC+3
  9897  0A7F  083E               	movf	??_PIC_SYNC_ADO_RTC+3,w
  9898  0A80  0022               	movlb	2	; select bank2
  9899  0A81  00E2               	movwf	(_NUL_SecCount+3)^(0+256)
  9900  0A82  0020               	movlb	0	; select bank0
  9901  0A83  083D               	movf	??_PIC_SYNC_ADO_RTC+2,w
  9902  0A84  0022               	movlb	2	; select bank2
  9903  0A85  00E1               	movwf	(_NUL_SecCount+2)^(0+256)
  9904  0A86  0020               	movlb	0	; select bank0
  9905  0A87  083C               	movf	??_PIC_SYNC_ADO_RTC+1,w
  9906  0A88  0022               	movlb	2	; select bank2
  9907  0A89  00E0               	movwf	(_NUL_SecCount+1)^(0+256)
  9908  0A8A  0020               	movlb	0	; select bank0
  9909  0A8B  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9910  0A8C  0022               	movlb	2	; select bank2
  9911  0A8D  00DF               	movwf	_NUL_SecCount^(0+256)
  9912                           
  9913                           ;main.c: 2106: for(i=0; i<7; i++)
  9914  0A8E  0020               	movlb	0	; select bank0
  9915  0A8F  01D5               	clrf	PIC_SYNC_ADO_RTC@i
  9916  0A90  3007               	movlw	7
  9917  0A91  0255               	subwf	PIC_SYNC_ADO_RTC@i,w
  9918  0A92  1803               	btfsc	3,0
  9919  0A93  2AA8               	goto	l7660
  9920  0A94                     l7654:	
  9921                           
  9922                           ;main.c: 2107: {
  9923                           ;main.c: 2108: Print_HEX2Str(*(BufferRec + i), 1);
  9924  0A94  01F7               	clrf	Print_HEX2Str@Chgln
  9925  0A95  0AF7               	incf	Print_HEX2Str@Chgln,f
  9926  0A96  0855               	movf	PIC_SYNC_ADO_RTC@i,w
  9927  0A97  3EA8               	addlw	(low (_BufferRec| (0+256)))& (0+255)
  9928  0A98  0086               	movwf	6
  9929  0A99  3001               	movlw	1	; select bank3/4
  9930  0A9A  0087               	movwf	7
  9931  0A9B  0801               	movf	1,w
  9932  0A9C  319F  270D  3189   	fcall	_Print_HEX2Str
  9933  0A9F  3001               	movlw	1
  9934  0AA0  0020               	movlb	0	; select bank0
  9935  0AA1  00BB               	movwf	??_PIC_SYNC_ADO_RTC
  9936  0AA2  083B               	movf	??_PIC_SYNC_ADO_RTC,w
  9937  0AA3  07D5               	addwf	PIC_SYNC_ADO_RTC@i,f
  9938  0AA4  3007               	movlw	7
  9939  0AA5  0255               	subwf	PIC_SYNC_ADO_RTC@i,w
  9940  0AA6  1C03               	skipc
  9941  0AA7  2A94               	goto	l7654
  9942  0AA8                     l7660:	
  9943                           
  9944                           ;main.c: 2109: }
  9945                           ;main.c: 2112: Print_CHLN();
  9946  0AA8  3199  211C         	fcall	_Print_CHLN
  9947  0AAA  0008               	return
  9948  0AAB                     __end_of_PIC_SYNC_ADO_RTC:	
  9949                           
  9950                           	psect	text16
  9951  1CB3                     __ptext16:	
  9952 ;; *************** function ___lmul *****************
  9953 ;; Defined at:
  9954 ;;		line 15 in file "/Applications/microchip/xc8/v1.35/sources/common/Umul32.c"
  9955 ;; Parameters:    Size  Location     Type
  9956 ;;  multiplier      4    2[COMMON] unsigned long 
  9957 ;;  multiplicand    4    6[COMMON] unsigned long 
  9958 ;; Auto vars:     Size  Location     Type
  9959 ;;  product         4    0[BANK0 ] unsigned long 
  9960 ;; Return value:  Size  Location     Type
  9961 ;;                  4    2[COMMON] unsigned long 
  9962 ;; Registers used:
  9963 ;;		wreg, status,2, status,0
  9964 ;; Tracked objects:
  9965 ;;		On entry : 0/0
  9966 ;;		On exit  : 0/0
  9967 ;;		Unchanged: 0/0
  9968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9969 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9970 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9972 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9973 ;;Total ram usage:       12 bytes
  9974 ;; Hardware stack levels used:    1
  9975 ;; Hardware stack levels required when called:    3
  9976 ;; This function calls:
  9977 ;;		Nothing
  9978 ;; This function is called by:
  9979 ;;		_PIC_SYNC_ADO_RTC
  9980 ;; This function uses a non-reentrant model
  9981 ;;
  9982                           
  9983                           
  9984                           ;psect for function ___lmul
  9985  1CB3                     ___lmul:	
  9986                           
  9987                           ;incstack = 0
  9988                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9989  1CB3  3000               	movlw	0
  9990  1CB4  0020               	movlb	0	; select bank0
  9991  1CB5  00A3               	movwf	___lmul@product+3
  9992  1CB6  3000               	movlw	0
  9993  1CB7  00A2               	movwf	___lmul@product+2
  9994  1CB8  3000               	movlw	0
  9995  1CB9  00A1               	movwf	___lmul@product+1
  9996  1CBA  3000               	movlw	0
  9997  1CBB  00A0               	movwf	___lmul@product
  9998  1CBC                     l5422:	
  9999  1CBC  1C72               	btfss	___lmul@multiplier,0
 10000  1CBD  2CC7               	goto	l5426
 10001  1CBE  0876               	movf	___lmul@multiplicand,w
 10002  1CBF  0020               	movlb	0	; select bank0
 10003  1CC0  07A0               	addwf	___lmul@product,f
 10004  1CC1  0877               	movf	___lmul@multiplicand+1,w
 10005  1CC2  3DA1               	addwfc	___lmul@product+1,f
 10006  1CC3  0878               	movf	___lmul@multiplicand+2,w
 10007  1CC4  3DA2               	addwfc	___lmul@product+2,f
 10008  1CC5  0879               	movf	___lmul@multiplicand+3,w
 10009  1CC6  3DA3               	addwfc	___lmul@product+3,f
 10010  1CC7                     l5426:	
 10011  1CC7  3001               	movlw	1
 10012  1CC8                     u5155:	
 10013  1CC8  35F6               	lslf	___lmul@multiplicand,f
 10014  1CC9  0DF7               	rlf	___lmul@multiplicand+1,f
 10015  1CCA  0DF8               	rlf	___lmul@multiplicand+2,f
 10016  1CCB  0DF9               	rlf	___lmul@multiplicand+3,f
 10017  1CCC  0B89               	decfsz	9,f
 10018  1CCD  2CC8               	goto	u5155
 10019  1CCE  3001               	movlw	1
 10020  1CCF                     u5165:	
 10021  1CCF  36F5               	lsrf	___lmul@multiplier+3,f
 10022  1CD0  0CF4               	rrf	___lmul@multiplier+2,f
 10023  1CD1  0CF3               	rrf	___lmul@multiplier+1,f
 10024  1CD2  0CF2               	rrf	___lmul@multiplier,f
 10025  1CD3  0B89               	decfsz	9,f
 10026  1CD4  2CCF               	goto	u5165
 10027  1CD5  0875               	movf	___lmul@multiplier+3,w
 10028  1CD6  0474               	iorwf	___lmul@multiplier+2,w
 10029  1CD7  0473               	iorwf	___lmul@multiplier+1,w
 10030  1CD8  0472               	iorwf	___lmul@multiplier,w
 10031  1CD9  1D03               	skipz
 10032  1CDA  2CBC               	goto	l5422
 10033  1CDB  0020               	movlb	0	; select bank0
 10034  1CDC  0823               	movf	___lmul@product+3,w
 10035  1CDD  00F5               	movwf	?___lmul+3
 10036  1CDE  0822               	movf	___lmul@product+2,w
 10037  1CDF  00F4               	movwf	?___lmul+2
 10038  1CE0  0821               	movf	___lmul@product+1,w
 10039  1CE1  00F3               	movwf	?___lmul+1
 10040  1CE2  0820               	movf	___lmul@product,w
 10041  1CE3  00F2               	movwf	?___lmul
 10042  1CE4  0008               	return
 10043  1CE5                     __end_of___lmul:	
 10044                           
 10045                           	psect	text17
 10046  1D4D                     __ptext17:	
 10047 ;; *************** function _Covert_Month_2_Day *****************
 10048 ;; Defined at:
 10049 ;;		line 2162 in file "main.c"
 10050 ;; Parameters:    Size  Location     Type
 10051 ;;  iMonth          2    2[COMMON] unsigned int 
 10052 ;; Auto vars:     Size  Location     Type
 10053 ;;  MonthTable     24    0[BANK0 ] unsigned int [12]
 10054 ;;  CalResult       2   24[BANK0 ] unsigned int 
 10055 ;;  loopi           1   26[BANK0 ] unsigned char 
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  2    2[COMMON] unsigned int 
 10058 ;; Registers used:
 10059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10066 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10067 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10068 ;;      Totals:         4      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10069 ;;Total ram usage:       31 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:    3
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_PIC_SYNC_ADO_RTC
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           
 10080                           ;psect for function _Covert_Month_2_Day
 10081  1D4D                     _Covert_Month_2_Day:	
 10082                           
 10083                           ;main.c: 2164: uint16_t MonthTable[12]={
 10084                           ;main.c: 2165: 31,
 10085                           ;main.c: 2166: 28,
 10086                           ;main.c: 2167: 31,
 10087                           ;main.c: 2168: 30,
 10088                           ;main.c: 2169: 31,
 10089                           ;main.c: 2170: 30,
 10090                           ;main.c: 2171: 31,
 10091                           ;main.c: 2172: 31,
 10092                           ;main.c: 2173: 30,
 10093                           ;main.c: 2174: 31,
 10094                           ;main.c: 2175: 30,
 10095                           ;main.c: 2176: 31
 10096                           ;main.c: 2177: };
 10097                           
 10098                           ;incstack = 0
 10099                           ; Regs used in _Covert_Month_2_Day: [wreg-fsr1h+status,2+status,0]
 10100  1D4D  3038               	movlw	low Covert_Month_2_Day@F7991
 10101  1D4E  0086               	movwf	6
 10102  1D4F  3002               	movlw	high Covert_Month_2_Day@F7991
 10103  1D50  0087               	movwf	7
 10104  1D51  3020               	movlw	low Covert_Month_2_Day@MonthTable
 10105  1D52  0084               	movwf	4
 10106  1D53  3000               	movlw	high Covert_Month_2_Day@MonthTable
 10107  1D54  0085               	movwf	5
 10108  1D55  3018               	movlw	24
 10109  1D56  00F4               	movwf	??_Covert_Month_2_Day
 10110  1D57                     u5070:	
 10111  1D57  0016               	moviw fsr1++
 10112  1D58  001A               	movwi fsr0++
 10113  1D59  0BF4               	decfsz	??_Covert_Month_2_Day,f
 10114  1D5A  2D57               	goto	u5070
 10115                           
 10116                           ;main.c: 2179: uint16_t CalResult =0;
 10117  1D5B  0020               	movlb	0	; select bank0
 10118  1D5C  01B8               	clrf	Covert_Month_2_Day@CalResult
 10119  1D5D  01B9               	clrf	Covert_Month_2_Day@CalResult+1
 10120                           
 10121                           ;main.c: 2181: uint8_t loopi =0;
 10122  1D5E  01BA               	clrf	Covert_Month_2_Day@loopi
 10123                           
 10124                           ;main.c: 2183: if(iMonth != 0)
 10125  1D5F  0872               	movf	Covert_Month_2_Day@iMonth,w
 10126  1D60  0473               	iorwf	Covert_Month_2_Day@iMonth+1,w
 10127  1D61  1903               	btfsc	3,2
 10128  1D62  2D80               	goto	l5402
 10129                           
 10130                           ;main.c: 2184: {
 10131                           ;main.c: 2185: for(loopi=0; loopi< iMonth; loopi++)
 10132  1D63  01BA               	clrf	Covert_Month_2_Day@loopi
 10133  1D64                     l5400:	
 10134  1D64  083A               	movf	Covert_Month_2_Day@loopi,w
 10135  1D65  00F4               	movwf	??_Covert_Month_2_Day
 10136  1D66  01F5               	clrf	??_Covert_Month_2_Day+1
 10137  1D67  0873               	movf	Covert_Month_2_Day@iMonth+1,w
 10138  1D68  0275               	subwf	??_Covert_Month_2_Day+1,w
 10139  1D69  1D03               	skipz
 10140  1D6A  2D6D               	goto	u5095
 10141  1D6B  0872               	movf	Covert_Month_2_Day@iMonth,w
 10142  1D6C  0274               	subwf	??_Covert_Month_2_Day,w
 10143  1D6D                     u5095:	
 10144  1D6D  1803               	btfsc	3,0
 10145  1D6E  2D80               	goto	l5402
 10146                           
 10147                           ;main.c: 2186: CalResult += MonthTable[loopi];
 10148  1D6F  353A               	lslf	Covert_Month_2_Day@loopi,w
 10149  1D70  3E20               	addlw	(low (Covert_Month_2_Day@MonthTable| 0))& (0+255)
 10150  1D71  0086               	movwf	6
 10151  1D72  0187               	clrf	7
 10152  1D73  3F40               	moviw [0]fsr1
 10153  1D74  00F4               	movwf	??_Covert_Month_2_Day
 10154  1D75  3F41               	moviw [1]fsr1
 10155  1D76  00F5               	movwf	??_Covert_Month_2_Day+1
 10156  1D77  0874               	movf	??_Covert_Month_2_Day,w
 10157  1D78  07B8               	addwf	Covert_Month_2_Day@CalResult,f
 10158  1D79  0875               	movf	??_Covert_Month_2_Day+1,w
 10159  1D7A  3DB9               	addwfc	Covert_Month_2_Day@CalResult+1,f
 10160  1D7B  3001               	movlw	1
 10161  1D7C  00F4               	movwf	??_Covert_Month_2_Day
 10162  1D7D  0874               	movf	??_Covert_Month_2_Day,w
 10163  1D7E  07BA               	addwf	Covert_Month_2_Day@loopi,f
 10164  1D7F  2D64               	goto	l5400
 10165  1D80                     l5402:	
 10166                           
 10167                           ;main.c: 2187: }
 10168                           ;main.c: 2188: return CalResult;
 10169  1D80  0839               	movf	Covert_Month_2_Day@CalResult+1,w
 10170  1D81  00F3               	movwf	?_Covert_Month_2_Day+1
 10171  1D82  0838               	movf	Covert_Month_2_Day@CalResult,w
 10172  1D83  00F2               	movwf	?_Covert_Month_2_Day
 10173  1D84  0008               	return
 10174  1D85                     __end_of_Covert_Month_2_Day:	
 10175                           
 10176                           	psect	text18
 10177  1AC9                     __ptext18:	
 10178 ;; *************** function _Covert_BDC_2_OCT *****************
 10179 ;; Defined at:
 10180 ;;		line 2155 in file "main.c"
 10181 ;; Parameters:    Size  Location     Type
 10182 ;;  iBDC            1    wreg     unsigned char 
 10183 ;; Auto vars:     Size  Location     Type
 10184 ;;  iBDC            1    9[COMMON] unsigned char 
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  1    wreg      unsigned char 
 10187 ;; Registers used:
 10188 ;;		wreg, status,2, status,0, pclath, cstack
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10195 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10196 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10197 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10198 ;;Total ram usage:        5 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    4
 10201 ;; This function calls:
 10202 ;;		___awdiv
 10203 ;;		___bmul
 10204 ;; This function is called by:
 10205 ;;		_PIC_SYNC_ADO_RTC
 10206 ;; This function uses a non-reentrant model
 10207 ;;
 10208                           
 10209                           
 10210                           ;psect for function _Covert_BDC_2_OCT
 10211  1AC9                     _Covert_BDC_2_OCT:	
 10212                           
 10213                           ;incstack = 0
 10214                           ; Regs used in _Covert_BDC_2_OCT: [wreg+status,2+status,0+pclath+cstack]
 10215                           ;Covert_BDC_2_OCT@iBDC stored from wreg
 10216  1AC9  00F9               	movwf	Covert_BDC_2_OCT@iBDC
 10217                           
 10218                           ;main.c: 2157: return(iBDC/16)*10 + (iBDC%16);
 10219  1ACA  300F               	movlw	15
 10220  1ACB  0579               	andwf	Covert_BDC_2_OCT@iBDC,w
 10221  1ACC  0020               	movlb	0	; select bank0
 10222  1ACD  00A6               	movwf	??_Covert_BDC_2_OCT
 10223  1ACE  300A               	movlw	10
 10224  1ACF  00A7               	movwf	??_Covert_BDC_2_OCT+1
 10225  1AD0  0827               	movf	??_Covert_BDC_2_OCT+1,w
 10226  1AD1  00F7               	movwf	___bmul@multiplicand
 10227  1AD2  0879               	movf	Covert_BDC_2_OCT@iBDC,w
 10228  1AD3  00A8               	movwf	??_Covert_BDC_2_OCT+2
 10229  1AD4  01A9               	clrf	??_Covert_BDC_2_OCT+3
 10230  1AD5  0828               	movf	??_Covert_BDC_2_OCT+2,w
 10231  1AD6  00F4               	movwf	___awdiv@dividend
 10232  1AD7  0829               	movf	??_Covert_BDC_2_OCT+3,w
 10233  1AD8  00F5               	movwf	___awdiv@dividend+1
 10234  1AD9  3010               	movlw	16
 10235  1ADA  00F2               	movwf	___awdiv@divisor
 10236  1ADB  3000               	movlw	0
 10237  1ADC  00F3               	movwf	___awdiv@divisor+1
 10238  1ADD  319F  275B  319A   	fcall	___awdiv
 10239  1AE0  0872               	movf	?___awdiv,w
 10240  1AE1  3199  21B6         	fcall	___bmul
 10241  1AE3  0020               	movlb	0	; select bank0
 10242  1AE4  0726               	addwf	??_Covert_BDC_2_OCT,w
 10243  1AE5  0008               	return
 10244  1AE6                     __end_of_Covert_BDC_2_OCT:	
 10245                           
 10246                           	psect	text19
 10247  0099                     __ptext19:	
 10248 ;; *************** function _Decode_RS232_CMD *****************
 10249 ;; Defined at:
 10250 ;;		line 699 in file "main.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;  BStr            1    wreg     PTR unsigned char 
 10253 ;;		 -> BufferStr(32), 
 10254 ;;  Strlen          1   72[BANK0 ] unsigned char 
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;  BStr            1   77[BANK0 ] PTR unsigned char 
 10257 ;;		 -> BufferStr(32), 
 10258 ;;  Data            1   76[BANK0 ] unsigned char 
 10259 ;;  Adr             1   75[BANK0 ] unsigned char 
 10260 ;; Return value:  Size  Location     Type
 10261 ;;		None               void
 10262 ;; Registers used:
 10263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10269 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10270 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10271 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10272 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10273 ;;Total ram usage:        6 bytes
 10274 ;; Hardware stack levels used:    1
 10275 ;; Hardware stack levels required when called:    9
 10276 ;; This function calls:
 10277 ;;		_DAC1_SetOutput
 10278 ;;		_DATAEE_ReadByte
 10279 ;;		_DATAEE_WriteByte
 10280 ;;		_DS18B20_GetTemp
 10281 ;;		_I2C_TEST_02
 10282 ;;		_I2C_TEST_10
 10283 ;;		_I2C_mREAD
 10284 ;;		_I2C_mWrite
 10285 ;;		_Print_CHLN
 10286 ;;		_Print_HEX2Str
 10287 ;;		_Print_String
 10288 ;;		_Print_uint16Str
 10289 ;;		_RUN_MESURE
 10290 ;;		_STR2HEX
 10291 ;;		_TEST_PIC_ALL
 10292 ;;		_UPLOAD_MESURE_REC
 10293 ;;		___wmul
 10294 ;;		_print_RTC
 10295 ;; This function is called by:
 10296 ;;		_main
 10297 ;; This function uses a non-reentrant model
 10298 ;;
 10299                           
 10300                           
 10301                           ;psect for function _Decode_RS232_CMD
 10302  0099                     _Decode_RS232_CMD:	
 10303                           
 10304                           ;incstack = 0
 10305                           ; Regs used in _Decode_RS232_CMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10306                           ;Decode_RS232_CMD@BStr stored from wreg
 10307  0099  0020               	movlb	0	; select bank0
 10308  009A  00ED               	movwf	Decode_RS232_CMD@BStr
 10309                           
 10310                           ;main.c: 702: uint8_t Adr = 0;
 10311  009B  01EB               	clrf	Decode_RS232_CMD@Adr
 10312                           
 10313                           ;main.c: 703: uint8_t Data = 0;
 10314  009C  01EC               	clrf	Decode_RS232_CMD@Data
 10315                           
 10316                           ;main.c: 707: if(*(BStr+0) == 'V')
 10317  009D  086D               	movf	Decode_RS232_CMD@BStr,w
 10318  009E  0086               	movwf	6
 10319  009F  3002               	movlw	2	; select bank4/5
 10320  00A0  0087               	movwf	7
 10321  00A1  3056               	movlw	86
 10322  00A2  0601               	xorwf	1,w
 10323  00A3  1D03               	btfss	3,2
 10324  00A4  28C7               	goto	l7276
 10325                           
 10326                           ;main.c: 708: {
 10327                           ;main.c: 709: Data = STR2HEX(BStr, 2);
 10328  00A5  3002               	movlw	2
 10329  00A6  00E9               	movwf	??_Decode_RS232_CMD
 10330  00A7  0869               	movf	??_Decode_RS232_CMD,w
 10331  00A8  00F4               	movwf	STR2HEX@NumPoint
 10332  00A9  086D               	movf	Decode_RS232_CMD@BStr,w
 10333  00AA  319A  228F  3180   	fcall	_STR2HEX
 10334  00AD  0020               	movlb	0	; select bank0
 10335  00AE  00EA               	movwf	??_Decode_RS232_CMD+1
 10336  00AF  086A               	movf	??_Decode_RS232_CMD+1,w
 10337  00B0  00EC               	movwf	Decode_RS232_CMD@Data
 10338                           
 10339                           ;main.c: 710: DAC1_SetOutput(Data);
 10340  00B1  086C               	movf	Decode_RS232_CMD@Data,w
 10341  00B2  3198  20FA  3180   	fcall	_DAC1_SetOutput
 10342                           
 10343                           ;main.c: 712: Print_CHLN();
 10344  00B5  3199  211C  3180   	fcall	_Print_CHLN
 10345                           
 10346                           ;main.c: 713: Print_String("Set DAC =$", 0);
 10347  00B8  30BA               	movlw	low (STR_11| (0+32768))
 10348  00B9  00F4               	movwf	Print_String@BStr
 10349  00BA  3092               	movlw	high (STR_11| (0+32768))
 10350  00BB  00F5               	movwf	Print_String@BStr+1
 10351  00BC  01F6               	clrf	Print_String@chln
 10352  00BD  319B  238A  3180   	fcall	_Print_String
 10353                           
 10354                           ;main.c: 714: Print_HEX2Str(Data, 1);
 10355  00C0  01F7               	clrf	Print_HEX2Str@Chgln
 10356  00C1  0AF7               	incf	Print_HEX2Str@Chgln,f
 10357  00C2  0020               	movlb	0	; select bank0
 10358  00C3  086C               	movf	Decode_RS232_CMD@Data,w
 10359  00C4  319F  270D         	fcall	_Print_HEX2Str
 10360                           
 10361                           ;main.c: 715: }
 10362  00C6  0008               	return
 10363  00C7                     l7276:	
 10364                           
 10365                           ;main.c: 720: else if((*(BStr+0) == 'T')&&
 10366                           ;main.c: 721: (*(BStr+1) == 'E')&&
 10367                           ;main.c: 722: (*(BStr+2) == 'S')&&
 10368                           ;main.c: 723: (*(BStr+3) == 'T')&&
 10369                           ;main.c: 724: (*(BStr+4) == 'A')&&
 10370                           ;main.c: 725: (*(BStr+5) == 'L')&&
 10371                           ;main.c: 726: (*(BStr+6) == 'L') )
 10372  00C7  0020               	movlb	0	; select bank0
 10373  00C8  086D               	movf	Decode_RS232_CMD@BStr,w
 10374  00C9  0086               	movwf	6
 10375  00CA  3002               	movlw	2	; select bank4/5
 10376  00CB  0087               	movwf	7
 10377  00CC  3054               	movlw	84
 10378  00CD  0601               	xorwf	1,w
 10379  00CE  1D03               	btfss	3,2
 10380  00CF  2908               	goto	l7292
 10381  00D0  0A6D               	incf	Decode_RS232_CMD@BStr,w
 10382  00D1  0086               	movwf	6
 10383  00D2  3002               	movlw	2	; select bank4/5
 10384  00D3  0087               	movwf	7
 10385  00D4  3045               	movlw	69
 10386  00D5  0601               	xorwf	1,w
 10387  00D6  1D03               	btfss	3,2
 10388  00D7  2908               	goto	l7292
 10389  00D8  086D               	movf	Decode_RS232_CMD@BStr,w
 10390  00D9  3E02               	addlw	2
 10391  00DA  0086               	movwf	6
 10392  00DB  3002               	movlw	2	; select bank4/5
 10393  00DC  0087               	movwf	7
 10394  00DD  3053               	movlw	83
 10395  00DE  0601               	xorwf	1,w
 10396  00DF  1D03               	btfss	3,2
 10397  00E0  2908               	goto	l7292
 10398  00E1  086D               	movf	Decode_RS232_CMD@BStr,w
 10399  00E2  3E03               	addlw	3
 10400  00E3  0086               	movwf	6
 10401  00E4  3002               	movlw	2	; select bank4/5
 10402  00E5  0087               	movwf	7
 10403  00E6  3054               	movlw	84
 10404  00E7  0601               	xorwf	1,w
 10405  00E8  1D03               	btfss	3,2
 10406  00E9  2908               	goto	l7292
 10407  00EA  086D               	movf	Decode_RS232_CMD@BStr,w
 10408  00EB  3E04               	addlw	4
 10409  00EC  0086               	movwf	6
 10410  00ED  3002               	movlw	2	; select bank4/5
 10411  00EE  0087               	movwf	7
 10412  00EF  3041               	movlw	65
 10413  00F0  0601               	xorwf	1,w
 10414  00F1  1D03               	btfss	3,2
 10415  00F2  2908               	goto	l7292
 10416  00F3  086D               	movf	Decode_RS232_CMD@BStr,w
 10417  00F4  3E05               	addlw	5
 10418  00F5  0086               	movwf	6
 10419  00F6  3002               	movlw	2	; select bank4/5
 10420  00F7  0087               	movwf	7
 10421  00F8  304C               	movlw	76
 10422  00F9  0601               	xorwf	1,w
 10423  00FA  1D03               	btfss	3,2
 10424  00FB  2908               	goto	l7292
 10425  00FC  086D               	movf	Decode_RS232_CMD@BStr,w
 10426  00FD  3E06               	addlw	6
 10427  00FE  0086               	movwf	6
 10428  00FF  3002               	movlw	2	; select bank4/5
 10429  0100  0087               	movwf	7
 10430  0101  304C               	movlw	76
 10431  0102  0601               	xorwf	1,w
 10432  0103  1D03               	btfss	3,2
 10433  0104  2908               	goto	l7292
 10434                           
 10435                           ;main.c: 728: {
 10436                           ;main.c: 729: TEST_PIC_ALL();
 10437  0105  319C  2426         	fcall	_TEST_PIC_ALL
 10438                           
 10439                           ;main.c: 730: }
 10440  0107  0008               	return
 10441  0108                     l7292:	
 10442                           
 10443                           ;main.c: 735: else if((*(BStr+0) == 'U')&&
 10444                           ;main.c: 736: (*(BStr+1) == 'P')&&
 10445                           ;main.c: 737: (*(BStr+2) == 'L')&&
 10446                           ;main.c: 738: (*(BStr+3) == 'O')&&
 10447                           ;main.c: 739: (*(BStr+1) == 'A')&&
 10448                           ;main.c: 740: (*(BStr+2) == 'D') )
 10449  0108  0020               	movlb	0	; select bank0
 10450  0109  086D               	movf	Decode_RS232_CMD@BStr,w
 10451  010A  0086               	movwf	6
 10452  010B  3002               	movlw	2	; select bank4/5
 10453  010C  0087               	movwf	7
 10454  010D  3055               	movlw	85
 10455  010E  0601               	xorwf	1,w
 10456  010F  1D03               	btfss	3,2
 10457  0110  2948               	goto	l7306
 10458  0111  0A6D               	incf	Decode_RS232_CMD@BStr,w
 10459  0112  0086               	movwf	6
 10460  0113  3002               	movlw	2	; select bank4/5
 10461  0114  0087               	movwf	7
 10462  0115  3050               	movlw	80
 10463  0116  0601               	xorwf	1,w
 10464  0117  1D03               	btfss	3,2
 10465  0118  2948               	goto	l7306
 10466  0119  086D               	movf	Decode_RS232_CMD@BStr,w
 10467  011A  3E02               	addlw	2
 10468  011B  0086               	movwf	6
 10469  011C  3002               	movlw	2	; select bank4/5
 10470  011D  0087               	movwf	7
 10471  011E  304C               	movlw	76
 10472  011F  0601               	xorwf	1,w
 10473  0120  1D03               	btfss	3,2
 10474  0121  2948               	goto	l7306
 10475  0122  086D               	movf	Decode_RS232_CMD@BStr,w
 10476  0123  3E03               	addlw	3
 10477  0124  0086               	movwf	6
 10478  0125  3002               	movlw	2	; select bank4/5
 10479  0126  0087               	movwf	7
 10480  0127  304F               	movlw	79
 10481  0128  0601               	xorwf	1,w
 10482  0129  1D03               	btfss	3,2
 10483  012A  2948               	goto	l7306
 10484  012B  0A6D               	incf	Decode_RS232_CMD@BStr,w
 10485  012C  0086               	movwf	6
 10486  012D  3002               	movlw	2	; select bank4/5
 10487  012E  0087               	movwf	7
 10488  012F  3041               	movlw	65
 10489  0130  0601               	xorwf	1,w
 10490  0131  1D03               	btfss	3,2
 10491  0132  2948               	goto	l7306
 10492  0133  086D               	movf	Decode_RS232_CMD@BStr,w
 10493  0134  3E02               	addlw	2
 10494  0135  0086               	movwf	6
 10495  0136  3002               	movlw	2	; select bank4/5
 10496  0137  0087               	movwf	7
 10497  0138  3044               	movlw	68
 10498  0139  0601               	xorwf	1,w
 10499  013A  1D03               	btfss	3,2
 10500  013B  2948               	goto	l7306
 10501                           
 10502                           ;main.c: 741: {
 10503                           ;main.c: 742: UPLOAD_MESURE_REC();
 10504  013C  3186  26C4  3180   	fcall	_UPLOAD_MESURE_REC
 10505                           
 10506                           ;main.c: 743: Print_String("for Test: upload data!$", 1);
 10507  013F  3031               	movlw	low (STR_12| (0+32768))
 10508  0140  00F4               	movwf	Print_String@BStr
 10509  0141  3091               	movlw	high (STR_12| (0+32768))
 10510  0142  00F5               	movwf	Print_String@BStr+1
 10511  0143  01F6               	clrf	Print_String@chln
 10512  0144  0AF6               	incf	Print_String@chln,f
 10513  0145  319B  238A         	fcall	_Print_String
 10514                           
 10515                           ;main.c: 744: }
 10516  0147  0008               	return
 10517  0148                     l7306:	
 10518                           
 10519                           ;main.c: 751: else if(*(BStr+0) == 'M')
 10520  0148  0020               	movlb	0	; select bank0
 10521  0149  086D               	movf	Decode_RS232_CMD@BStr,w
 10522  014A  0086               	movwf	6
 10523  014B  3002               	movlw	2	; select bank4/5
 10524  014C  0087               	movwf	7
 10525  014D  304D               	movlw	77
 10526  014E  0601               	xorwf	1,w
 10527  014F  1D03               	btfss	3,2
 10528  0150  29D1               	goto	l7346
 10529                           
 10530                           ;main.c: 752: {
 10531                           ;main.c: 753: if(*(BStr+2) == 'T')
 10532  0151  086D               	movf	Decode_RS232_CMD@BStr,w
 10533  0152  3E02               	addlw	2
 10534  0153  0086               	movwf	6
 10535  0154  3002               	movlw	2	; select bank4/5
 10536  0155  0087               	movwf	7
 10537  0156  3054               	movlw	84
 10538  0157  0601               	xorwf	1,w
 10539  0158  1D03               	btfss	3,2
 10540  0159  295E               	goto	l7312
 10541                           
 10542                           ;main.c: 754: {
 10543                           ;main.c: 755: DS18B20_GetTemp(BufferGetTemp);
 10544  015A  305D               	movlw	(low (_BufferGetTemp| (0+256)))& (0+255)
 10545  015B  3188  2090         	fcall	_DS18B20_GetTemp
 10546                           
 10547                           ;main.c: 756: }
 10548  015D  0008               	return
 10549  015E                     l7312:	
 10550                           
 10551                           ;main.c: 757: else if(*(BStr+2) == 'P')
 10552  015E  0020               	movlb	0	; select bank0
 10553  015F  086D               	movf	Decode_RS232_CMD@BStr,w
 10554  0160  3E02               	addlw	2
 10555  0161  0086               	movwf	6
 10556  0162  3002               	movlw	2	; select bank4/5
 10557  0163  0087               	movwf	7
 10558  0164  3050               	movlw	80
 10559  0165  0601               	xorwf	1,w
 10560  0166  1D03               	btfss	3,2
 10561  0167  296C               	goto	l7316
 10562                           
 10563                           ;main.c: 758: {
 10564                           ;main.c: 759: RUN_MESURE(0);
 10565  0168  3000               	movlw	0
 10566  0169  318A  22AB         	fcall	_RUN_MESURE
 10567                           
 10568                           ;main.c: 760: }
 10569  016B  0008               	return
 10570  016C                     l7316:	
 10571                           
 10572                           ;main.c: 761: else if(*(BStr+2) == 'N')
 10573  016C  0020               	movlb	0	; select bank0
 10574  016D  086D               	movf	Decode_RS232_CMD@BStr,w
 10575  016E  3E02               	addlw	2
 10576  016F  0086               	movwf	6
 10577  0170  3002               	movlw	2	; select bank4/5
 10578  0171  0087               	movwf	7
 10579  0172  304E               	movlw	78
 10580  0173  0601               	xorwf	1,w
 10581  0174  1D03               	btfss	3,2
 10582  0175  297A               	goto	l7320
 10583                           
 10584                           ;main.c: 762: {
 10585                           ;main.c: 763: RUN_MESURE(1);
 10586  0176  3001               	movlw	1
 10587  0177  318A  22AB         	fcall	_RUN_MESURE
 10588                           
 10589                           ;main.c: 764: }
 10590  0179  0008               	return
 10591  017A                     l7320:	
 10592                           
 10593                           ;main.c: 765: else if(*(BStr+2) == 'O')
 10594  017A  0020               	movlb	0	; select bank0
 10595  017B  086D               	movf	Decode_RS232_CMD@BStr,w
 10596  017C  3E02               	addlw	2
 10597  017D  0086               	movwf	6
 10598  017E  3002               	movlw	2	; select bank4/5
 10599  017F  0087               	movwf	7
 10600  0180  304F               	movlw	79
 10601  0181  0601               	xorwf	1,w
 10602  0182  1D03               	btfss	3,2
 10603  0183  2988               	goto	l7324
 10604                           
 10605                           ;main.c: 766: {
 10606                           ;main.c: 767: RUN_MESURE(2);
 10607  0184  3002               	movlw	2
 10608  0185  318A  22AB         	fcall	_RUN_MESURE
 10609                           
 10610                           ;main.c: 768: }
 10611  0187  0008               	return
 10612  0188                     l7324:	
 10613                           
 10614                           ;main.c: 769: else if(*(BStr+2) == 'C')
 10615  0188  0020               	movlb	0	; select bank0
 10616  0189  086D               	movf	Decode_RS232_CMD@BStr,w
 10617  018A  3E02               	addlw	2
 10618  018B  0086               	movwf	6
 10619  018C  3002               	movlw	2	; select bank4/5
 10620  018D  0087               	movwf	7
 10621  018E  3043               	movlw	67
 10622  018F  0601               	xorwf	1,w
 10623  0190  1D03               	btfss	3,2
 10624  0191  2996               	goto	l7328
 10625                           
 10626                           ;main.c: 770: {
 10627                           ;main.c: 771: RUN_MESURE(4);
 10628  0192  3004               	movlw	4
 10629  0193  318A  22AB         	fcall	_RUN_MESURE
 10630                           
 10631                           ;main.c: 772: }
 10632  0195  0008               	return
 10633  0196                     l7328:	
 10634                           
 10635                           ;main.c: 773: else if(*(BStr+2) == 'M')
 10636  0196  0020               	movlb	0	; select bank0
 10637  0197  086D               	movf	Decode_RS232_CMD@BStr,w
 10638  0198  3E02               	addlw	2
 10639  0199  0086               	movwf	6
 10640  019A  3002               	movlw	2	; select bank4/5
 10641  019B  0087               	movwf	7
 10642  019C  304D               	movlw	77
 10643  019D  0601               	xorwf	1,w
 10644  019E  1D03               	btfss	3,2
 10645  019F  29A4               	goto	l7332
 10646                           
 10647                           ;main.c: 774: {
 10648                           ;main.c: 775: RUN_MESURE(3);
 10649  01A0  3003               	movlw	3
 10650  01A1  318A  22AB         	fcall	_RUN_MESURE
 10651                           
 10652                           ;main.c: 776: }
 10653  01A3  0008               	return
 10654  01A4                     l7332:	
 10655                           
 10656                           ;main.c: 777: else if(*(BStr+2) == 'S')
 10657  01A4  0020               	movlb	0	; select bank0
 10658  01A5  086D               	movf	Decode_RS232_CMD@BStr,w
 10659  01A6  3E02               	addlw	2
 10660  01A7  0086               	movwf	6
 10661  01A8  3002               	movlw	2	; select bank4/5
 10662  01A9  0087               	movwf	7
 10663  01AA  3053               	movlw	83
 10664  01AB  0601               	xorwf	1,w
 10665  01AC  1D03               	btfss	3,2
 10666  01AD  29C3               	goto	l7342
 10667                           
 10668                           ;main.c: 778: {
 10669                           ;main.c: 779: RUN_PWM_FLAG = (1 - RUN_PWM_FLAG);
 10670  01AE  0021               	movlb	1	; select bank1
 10671  01AF  0366               	decf	_RUN_PWM_FLAG^(0+128),w
 10672  01B0  3AFF               	xorlw	255
 10673  01B1  3E01               	addlw	1
 10674  01B2  0020               	movlb	0	; select bank0
 10675  01B3  00E9               	movwf	??_Decode_RS232_CMD
 10676  01B4  0869               	movf	??_Decode_RS232_CMD,w
 10677  01B5  0021               	movlb	1	; select bank1
 10678  01B6  00E6               	movwf	_RUN_PWM_FLAG^(0+128)
 10679                           
 10680                           ;main.c: 781: if(RUN_PWM_FLAG == 1)
 10681  01B7  0366               	decf	_RUN_PWM_FLAG^(0+128),w
 10682  01B8  1D03               	btfss	3,2
 10683  01B9  29BF               	goto	l7340
 10684                           
 10685                           ;main.c: 782: {
 10686                           ;main.c: 783: MES_TDS_FLAG = 1;
 10687  01BA  0022               	movlb	2	; select bank2
 10688  01BB  01D3               	clrf	_MES_TDS_FLAG^(0+256)
 10689  01BC  0AD3               	incf	_MES_TDS_FLAG^(0+256),f
 10690                           
 10691                           ;main.c: 784: PWM_1MS_COUNT = 0;
 10692  01BD  0021               	movlb	1	; select bank1
 10693  01BE  01E5               	clrf	_PWM_1MS_COUNT^(0+128)
 10694  01BF                     l7340:	
 10695                           
 10696                           ;main.c: 785: }
 10697                           ;main.c: 786: RUN_MESURE(5);
 10698  01BF  3005               	movlw	5
 10699  01C0  318A  22AB         	fcall	_RUN_MESURE
 10700                           
 10701                           ;main.c: 787: }
 10702  01C2  0008               	return
 10703  01C3                     l7342:	
 10704                           
 10705                           ;main.c: 788: else if(*(BStr+2) == 'D')
 10706  01C3  0020               	movlb	0	; select bank0
 10707  01C4  086D               	movf	Decode_RS232_CMD@BStr,w
 10708  01C5  3E02               	addlw	2
 10709  01C6  0086               	movwf	6
 10710  01C7  3002               	movlw	2	; select bank4/5
 10711  01C8  0087               	movwf	7
 10712  01C9  3044               	movlw	68
 10713  01CA  0601               	xorwf	1,w
 10714  01CB  1D03               	btfss	3,2
 10715  01CC  0008               	return
 10716                           
 10717                           ;main.c: 789: {
 10718                           ;main.c: 792: RUN_MESURE(6);
 10719  01CD  3006               	movlw	6
 10720  01CE  318A  22AB         	fcall	_RUN_MESURE
 10721                           
 10722                           ;main.c: 793: }
 10723                           ;main.c: 794: }
 10724  01D0  0008               	return
 10725  01D1                     l7346:	
 10726                           
 10727                           ;main.c: 797: else if((*(BStr+0) == 'W')&&
 10728                           ;main.c: 798: (*(BStr+1) == 'R')&&
 10729                           ;main.c: 799: (*(BStr+2) == 'I')&&
 10730                           ;main.c: 800: (*(BStr+3) == 'T')&&
 10731                           ;main.c: 801: (*(BStr+4) == 'E') )
 10732  01D1  0020               	movlb	0	; select bank0
 10733  01D2  086D               	movf	Decode_RS232_CMD@BStr,w
 10734  01D3  0086               	movwf	6
 10735  01D4  3002               	movlw	2	; select bank4/5
 10736  01D5  0087               	movwf	7
 10737  01D6  3057               	movlw	87
 10738  01D7  0601               	xorwf	1,w
 10739  01D8  1D03               	btfss	3,2
 10740  01D9  2A3E               	goto	l7370
 10741  01DA  0A6D               	incf	Decode_RS232_CMD@BStr,w
 10742  01DB  0086               	movwf	6
 10743  01DC  3002               	movlw	2	; select bank4/5
 10744  01DD  0087               	movwf	7
 10745  01DE  3052               	movlw	82
 10746  01DF  0601               	xorwf	1,w
 10747  01E0  1D03               	btfss	3,2
 10748  01E1  2A3E               	goto	l7370
 10749  01E2  086D               	movf	Decode_RS232_CMD@BStr,w
 10750  01E3  3E02               	addlw	2
 10751  01E4  0086               	movwf	6
 10752  01E5  3002               	movlw	2	; select bank4/5
 10753  01E6  0087               	movwf	7
 10754  01E7  3049               	movlw	73
 10755  01E8  0601               	xorwf	1,w
 10756  01E9  1D03               	btfss	3,2
 10757  01EA  2A3E               	goto	l7370
 10758  01EB  086D               	movf	Decode_RS232_CMD@BStr,w
 10759  01EC  3E03               	addlw	3
 10760  01ED  0086               	movwf	6
 10761  01EE  3002               	movlw	2	; select bank4/5
 10762  01EF  0087               	movwf	7
 10763  01F0  3054               	movlw	84
 10764  01F1  0601               	xorwf	1,w
 10765  01F2  1D03               	btfss	3,2
 10766  01F3  2A3E               	goto	l7370
 10767  01F4  086D               	movf	Decode_RS232_CMD@BStr,w
 10768  01F5  3E04               	addlw	4
 10769  01F6  0086               	movwf	6
 10770  01F7  3002               	movlw	2	; select bank4/5
 10771  01F8  0087               	movwf	7
 10772  01F9  3045               	movlw	69
 10773  01FA  0601               	xorwf	1,w
 10774  01FB  1D03               	btfss	3,2
 10775  01FC  2A3E               	goto	l7370
 10776                           
 10777                           ;main.c: 802: {
 10778                           ;main.c: 803: Adr = STR2HEX(BStr, 2);
 10779  01FD  3002               	movlw	2
 10780  01FE  00E9               	movwf	??_Decode_RS232_CMD
 10781  01FF  0869               	movf	??_Decode_RS232_CMD,w
 10782  0200  00F4               	movwf	STR2HEX@NumPoint
 10783  0201  086D               	movf	Decode_RS232_CMD@BStr,w
 10784  0202  319A  228F  3180   	fcall	_STR2HEX
 10785  0205  0020               	movlb	0	; select bank0
 10786  0206  00EA               	movwf	??_Decode_RS232_CMD+1
 10787  0207  086A               	movf	??_Decode_RS232_CMD+1,w
 10788  0208  00EB               	movwf	Decode_RS232_CMD@Adr
 10789                           
 10790                           ;main.c: 804: Data = STR2HEX(BStr, 5);
 10791  0209  3005               	movlw	5
 10792  020A  00E9               	movwf	??_Decode_RS232_CMD
 10793  020B  0869               	movf	??_Decode_RS232_CMD,w
 10794  020C  00F4               	movwf	STR2HEX@NumPoint
 10795  020D  086D               	movf	Decode_RS232_CMD@BStr,w
 10796  020E  319A  228F  3180   	fcall	_STR2HEX
 10797  0211  0020               	movlb	0	; select bank0
 10798  0212  00EA               	movwf	??_Decode_RS232_CMD+1
 10799  0213  086A               	movf	??_Decode_RS232_CMD+1,w
 10800  0214  00EC               	movwf	Decode_RS232_CMD@Data
 10801                           
 10802                           ;main.c: 806: DATAEE_WriteByte(Adr, Data);
 10803  0215  086C               	movf	Decode_RS232_CMD@Data,w
 10804  0216  00E9               	movwf	??_Decode_RS232_CMD
 10805  0217  0869               	movf	??_Decode_RS232_CMD,w
 10806  0218  00F2               	movwf	DATAEE_WriteByte@bData
 10807  0219  086B               	movf	Decode_RS232_CMD@Adr,w
 10808  021A  319A  2272  3180   	fcall	_DATAEE_WriteByte
 10809                           
 10810                           ;main.c: 808: Print_CHLN();
 10811  021D  3199  211C  3180   	fcall	_Print_CHLN
 10812                           
 10813                           ;main.c: 809: Print_String("Write EEPROM Adr:$", 0);
 10814  0220  30E1               	movlw	low (STR_13| (0+32768))
 10815  0221  00F4               	movwf	Print_String@BStr
 10816  0222  3091               	movlw	high (STR_13| (0+32768))
 10817  0223  00F5               	movwf	Print_String@BStr+1
 10818  0224  01F6               	clrf	Print_String@chln
 10819  0225  319B  238A  3180   	fcall	_Print_String
 10820                           
 10821                           ;main.c: 810: Print_HEX2Str(Adr, 1);
 10822  0228  01F7               	clrf	Print_HEX2Str@Chgln
 10823  0229  0AF7               	incf	Print_HEX2Str@Chgln,f
 10824  022A  0020               	movlb	0	; select bank0
 10825  022B  086B               	movf	Decode_RS232_CMD@Adr,w
 10826  022C  319F  270D  3180   	fcall	_Print_HEX2Str
 10827                           
 10828                           ;main.c: 811: Print_String("Data:$", 0);
 10829  022F  30E9               	movlw	low (STR_14| (0+32768))
 10830  0230  00F4               	movwf	Print_String@BStr
 10831  0231  3092               	movlw	high (STR_14| (0+32768))
 10832  0232  00F5               	movwf	Print_String@BStr+1
 10833  0233  01F6               	clrf	Print_String@chln
 10834  0234  319B  238A  3180   	fcall	_Print_String
 10835                           
 10836                           ;main.c: 812: Print_HEX2Str(Data, 1);
 10837  0237  01F7               	clrf	Print_HEX2Str@Chgln
 10838  0238  0AF7               	incf	Print_HEX2Str@Chgln,f
 10839  0239  0020               	movlb	0	; select bank0
 10840  023A  086C               	movf	Decode_RS232_CMD@Data,w
 10841  023B  319F  270D         	fcall	_Print_HEX2Str
 10842                           
 10843                           ;main.c: 813: }
 10844  023D  0008               	return
 10845  023E                     l7370:	
 10846                           
 10847                           ;main.c: 816: else if((*(BStr+0) == 'R')&&
 10848                           ;main.c: 817: (*(BStr+1) == 'E')&&
 10849                           ;main.c: 818: (*(BStr+2) == 'A')&&
 10850                           ;main.c: 819: (*(BStr+3) == 'D') )
 10851  023E  0020               	movlb	0	; select bank0
 10852  023F  086D               	movf	Decode_RS232_CMD@BStr,w
 10853  0240  0086               	movwf	6
 10854  0241  3002               	movlw	2	; select bank4/5
 10855  0242  0087               	movwf	7
 10856  0243  3052               	movlw	82
 10857  0244  0601               	xorwf	1,w
 10858  0245  1D03               	btfss	3,2
 10859  0246  2A96               	goto	l7392
 10860  0247  0A6D               	incf	Decode_RS232_CMD@BStr,w
 10861  0248  0086               	movwf	6
 10862  0249  3002               	movlw	2	; select bank4/5
 10863  024A  0087               	movwf	7
 10864  024B  3045               	movlw	69
 10865  024C  0601               	xorwf	1,w
 10866  024D  1D03               	btfss	3,2
 10867  024E  2A96               	goto	l7392
 10868  024F  086D               	movf	Decode_RS232_CMD@BStr,w
 10869  0250  3E02               	addlw	2
 10870  0251  0086               	movwf	6
 10871  0252  3002               	movlw	2	; select bank4/5
 10872  0253  0087               	movwf	7
 10873  0254  3041               	movlw	65
 10874  0255  0601               	xorwf	1,w
 10875  0256  1D03               	btfss	3,2
 10876  0257  2A96               	goto	l7392
 10877  0258  086D               	movf	Decode_RS232_CMD@BStr,w
 10878  0259  3E03               	addlw	3
 10879  025A  0086               	movwf	6
 10880  025B  3002               	movlw	2	; select bank4/5
 10881  025C  0087               	movwf	7
 10882  025D  3044               	movlw	68
 10883  025E  0601               	xorwf	1,w
 10884  025F  1D03               	btfss	3,2
 10885  0260  2A96               	goto	l7392
 10886                           
 10887                           ;main.c: 820: {
 10888                           ;main.c: 821: Adr = STR2HEX(BStr, 2);
 10889  0261  3002               	movlw	2
 10890  0262  00E9               	movwf	??_Decode_RS232_CMD
 10891  0263  0869               	movf	??_Decode_RS232_CMD,w
 10892  0264  00F4               	movwf	STR2HEX@NumPoint
 10893  0265  086D               	movf	Decode_RS232_CMD@BStr,w
 10894  0266  319A  228F  3180   	fcall	_STR2HEX
 10895  0269  0020               	movlb	0	; select bank0
 10896  026A  00EA               	movwf	??_Decode_RS232_CMD+1
 10897  026B  086A               	movf	??_Decode_RS232_CMD+1,w
 10898  026C  00EB               	movwf	Decode_RS232_CMD@Adr
 10899                           
 10900                           ;main.c: 823: Data = DATAEE_ReadByte(Adr);
 10901  026D  086B               	movf	Decode_RS232_CMD@Adr,w
 10902  026E  3199  2154  3180   	fcall	_DATAEE_ReadByte
 10903  0271  0020               	movlb	0	; select bank0
 10904  0272  00E9               	movwf	??_Decode_RS232_CMD
 10905  0273  0869               	movf	??_Decode_RS232_CMD,w
 10906  0274  00EC               	movwf	Decode_RS232_CMD@Data
 10907                           
 10908                           ;main.c: 825: Print_CHLN();
 10909  0275  3199  211C  3180   	fcall	_Print_CHLN
 10910                           
 10911                           ;main.c: 826: Print_String("Read EEPROM Adr:$", 0);
 10912  0278  3007               	movlw	low (STR_15| (0+32768))
 10913  0279  00F4               	movwf	Print_String@BStr
 10914  027A  3092               	movlw	high (STR_15| (0+32768))
 10915  027B  00F5               	movwf	Print_String@BStr+1
 10916  027C  01F6               	clrf	Print_String@chln
 10917  027D  319B  238A  3180   	fcall	_Print_String
 10918                           
 10919                           ;main.c: 827: Print_HEX2Str(Adr, 1);
 10920  0280  01F7               	clrf	Print_HEX2Str@Chgln
 10921  0281  0AF7               	incf	Print_HEX2Str@Chgln,f
 10922  0282  0020               	movlb	0	; select bank0
 10923  0283  086B               	movf	Decode_RS232_CMD@Adr,w
 10924  0284  319F  270D  3180   	fcall	_Print_HEX2Str
 10925                           
 10926                           ;main.c: 828: Print_String("Data:$", 0);
 10927  0287  30E9               	movlw	low (STR_14| (0+32768))
 10928  0288  00F4               	movwf	Print_String@BStr
 10929  0289  3092               	movlw	high (STR_14| (0+32768))
 10930  028A  00F5               	movwf	Print_String@BStr+1
 10931  028B  01F6               	clrf	Print_String@chln
 10932  028C  319B  238A  3180   	fcall	_Print_String
 10933                           
 10934                           ;main.c: 829: Print_HEX2Str(Data, 1);
 10935  028F  01F7               	clrf	Print_HEX2Str@Chgln
 10936  0290  0AF7               	incf	Print_HEX2Str@Chgln,f
 10937  0291  0020               	movlb	0	; select bank0
 10938  0292  086C               	movf	Decode_RS232_CMD@Data,w
 10939  0293  319F  270D         	fcall	_Print_HEX2Str
 10940                           
 10941                           ;main.c: 830: }
 10942  0295  0008               	return
 10943  0296                     l7392:	
 10944                           
 10945                           ;main.c: 833: else if((*(BStr+0) == 'I')&&
 10946                           ;main.c: 834: (*(BStr+1) == '2')&&
 10947                           ;main.c: 835: (*(BStr+2) == 'C') )
 10948  0296  0020               	movlb	0	; select bank0
 10949  0297  086D               	movf	Decode_RS232_CMD@BStr,w
 10950  0298  0086               	movwf	6
 10951  0299  3002               	movlw	2	; select bank4/5
 10952  029A  0087               	movwf	7
 10953  029B  3049               	movlw	73
 10954  029C  0601               	xorwf	1,w
 10955  029D  1D03               	btfss	3,2
 10956  029E  2AEC               	goto	l7408
 10957  029F  0A6D               	incf	Decode_RS232_CMD@BStr,w
 10958  02A0  0086               	movwf	6
 10959  02A1  3002               	movlw	2	; select bank4/5
 10960  02A2  0087               	movwf	7
 10961  02A3  3032               	movlw	50
 10962  02A4  0601               	xorwf	1,w
 10963  02A5  1D03               	btfss	3,2
 10964  02A6  2AEC               	goto	l7408
 10965  02A7  086D               	movf	Decode_RS232_CMD@BStr,w
 10966  02A8  3E02               	addlw	2
 10967  02A9  0086               	movwf	6
 10968  02AA  3002               	movlw	2	; select bank4/5
 10969  02AB  0087               	movwf	7
 10970  02AC  3043               	movlw	67
 10971  02AD  0601               	xorwf	1,w
 10972  02AE  1D03               	btfss	3,2
 10973  02AF  2AEC               	goto	l7408
 10974                           
 10975                           ;main.c: 837: {
 10976                           ;main.c: 839: I2C_mWrite(BStr+2, Strlen-1, 0x10);
 10977  02B0  086D               	movf	Decode_RS232_CMD@BStr,w
 10978  02B1  3E02               	addlw	2
 10979  02B2  00F6               	movwf	I2C_mWrite@value
 10980  02B3  3002               	movlw	2
 10981  02B4  00F7               	movwf	I2C_mWrite@value+1
 10982  02B5  0868               	movf	Decode_RS232_CMD@Strlen,w
 10983  02B6  3EFF               	addlw	255
 10984  02B7  00E9               	movwf	??_Decode_RS232_CMD
 10985  02B8  0869               	movf	??_Decode_RS232_CMD,w
 10986  02B9  00F8               	movwf	I2C_mWrite@Size
 10987  02BA  3010               	movlw	16
 10988  02BB  00EA               	movwf	??_Decode_RS232_CMD+1
 10989  02BC  086A               	movf	??_Decode_RS232_CMD+1,w
 10990  02BD  00F9               	movwf	I2C_mWrite@slave_addr
 10991  02BE  319E  2683  3180   	fcall	_I2C_mWrite
 10992                           
 10993                           ;main.c: 841: Print_CHLN();
 10994  02C1  3199  211C  3180   	fcall	_Print_CHLN
 10995                           
 10996                           ;main.c: 843: I2C_mREAD(BufferRec, 6, 0x10);
 10997  02C4  3006               	movlw	6
 10998  02C5  0020               	movlb	0	; select bank0
 10999  02C6  00E9               	movwf	??_Decode_RS232_CMD
 11000  02C7  0869               	movf	??_Decode_RS232_CMD,w
 11001  02C8  00F7               	movwf	I2C_mREAD@Size
 11002  02C9  3010               	movlw	16
 11003  02CA  00EA               	movwf	??_Decode_RS232_CMD+1
 11004  02CB  086A               	movf	??_Decode_RS232_CMD+1,w
 11005  02CC  00F8               	movwf	I2C_mREAD@slave_addr
 11006  02CD  30A8               	movlw	(low (_BufferRec| (0+256)))& (0+255)
 11007  02CE  319E  263E  3180   	fcall	_I2C_mREAD
 11008                           
 11009                           ;main.c: 845: *(BufferRec + 6) = '$';
 11010  02D1  3024               	movlw	36
 11011  02D2  0020               	movlb	0	; select bank0
 11012  02D3  00E9               	movwf	??_Decode_RS232_CMD
 11013  02D4  0869               	movf	??_Decode_RS232_CMD,w
 11014  02D5  0023               	movlb	3	; select bank3
 11015  02D6  00AE               	movwf	(_BufferRec^(0+384)+6)
 11016                           
 11017                           ;main.c: 848: Print_CHLN();
 11018  02D7  3199  211C  3180   	fcall	_Print_CHLN
 11019                           
 11020                           ;main.c: 849: Print_String("I2C String to Arduino$", 1);
 11021  02DA  3049               	movlw	low (STR_17| (0+32768))
 11022  02DB  00F4               	movwf	Print_String@BStr
 11023  02DC  3091               	movlw	high (STR_17| (0+32768))
 11024  02DD  00F5               	movwf	Print_String@BStr+1
 11025  02DE  01F6               	clrf	Print_String@chln
 11026  02DF  0AF6               	incf	Print_String@chln,f
 11027  02E0  319B  238A  3180   	fcall	_Print_String
 11028                           
 11029                           ;main.c: 850: Print_String(BufferRec, 1);
 11030  02E3  30A8               	movlw	low _BufferRec
 11031  02E4  00F4               	movwf	Print_String@BStr
 11032  02E5  3001               	movlw	high _BufferRec
 11033  02E6  00F5               	movwf	Print_String@BStr+1
 11034  02E7  01F6               	clrf	Print_String@chln
 11035  02E8  0AF6               	incf	Print_String@chln,f
 11036  02E9  319B  238A         	fcall	_Print_String
 11037                           
 11038                           ;main.c: 851: }
 11039  02EB  0008               	return
 11040  02EC                     l7408:	
 11041                           
 11042                           ;main.c: 854: else if((*(BStr+0) == 'R')&&
 11043                           ;main.c: 855: (*(BStr+1) == 'T')&&
 11044                           ;main.c: 856: (*(BStr+2) == 'C') )
 11045  02EC  0020               	movlb	0	; select bank0
 11046  02ED  086D               	movf	Decode_RS232_CMD@BStr,w
 11047  02EE  0086               	movwf	6
 11048  02EF  3002               	movlw	2	; select bank4/5
 11049  02F0  0087               	movwf	7
 11050  02F1  3052               	movlw	82
 11051  02F2  0601               	xorwf	1,w
 11052  02F3  1D03               	btfss	3,2
 11053  02F4  2B09               	goto	l7416
 11054  02F5  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11055  02F6  0086               	movwf	6
 11056  02F7  3002               	movlw	2	; select bank4/5
 11057  02F8  0087               	movwf	7
 11058  02F9  3054               	movlw	84
 11059  02FA  0601               	xorwf	1,w
 11060  02FB  1D03               	btfss	3,2
 11061  02FC  2B09               	goto	l7416
 11062  02FD  086D               	movf	Decode_RS232_CMD@BStr,w
 11063  02FE  3E02               	addlw	2
 11064  02FF  0086               	movwf	6
 11065  0300  3002               	movlw	2	; select bank4/5
 11066  0301  0087               	movwf	7
 11067  0302  3043               	movlw	67
 11068  0303  0601               	xorwf	1,w
 11069  0304  1D03               	btfss	3,2
 11070  0305  2B09               	goto	l7416
 11071                           
 11072                           ;main.c: 858: {
 11073                           ;main.c: 859: print_RTC();
 11074  0306  3193  23EA         	fcall	_print_RTC
 11075                           
 11076                           ;main.c: 860: }
 11077  0308  0008               	return
 11078  0309                     l7416:	
 11079                           
 11080                           ;main.c: 863: else if((*(BStr+0) == 'S')&&
 11081                           ;main.c: 864: (*(BStr+1) == 'S')&&
 11082                           ;main.c: 865: (*(BStr+2) == 'I')&&
 11083                           ;main.c: 866: (*(BStr+3) == 'D') )
 11084  0309  0020               	movlb	0	; select bank0
 11085  030A  086D               	movf	Decode_RS232_CMD@BStr,w
 11086  030B  0086               	movwf	6
 11087  030C  3002               	movlw	2	; select bank4/5
 11088  030D  0087               	movwf	7
 11089  030E  3053               	movlw	83
 11090  030F  0601               	xorwf	1,w
 11091  0310  1D03               	btfss	3,2
 11092  0311  2B63               	goto	l7432
 11093  0312  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11094  0313  0086               	movwf	6
 11095  0314  3002               	movlw	2	; select bank4/5
 11096  0315  0087               	movwf	7
 11097  0316  3053               	movlw	83
 11098  0317  0601               	xorwf	1,w
 11099  0318  1D03               	btfss	3,2
 11100  0319  2B63               	goto	l7432
 11101  031A  086D               	movf	Decode_RS232_CMD@BStr,w
 11102  031B  3E02               	addlw	2
 11103  031C  0086               	movwf	6
 11104  031D  3002               	movlw	2	; select bank4/5
 11105  031E  0087               	movwf	7
 11106  031F  3049               	movlw	73
 11107  0320  0601               	xorwf	1,w
 11108  0321  1D03               	btfss	3,2
 11109  0322  2B63               	goto	l7432
 11110  0323  086D               	movf	Decode_RS232_CMD@BStr,w
 11111  0324  3E03               	addlw	3
 11112  0325  0086               	movwf	6
 11113  0326  3002               	movlw	2	; select bank4/5
 11114  0327  0087               	movwf	7
 11115  0328  3044               	movlw	68
 11116  0329  0601               	xorwf	1,w
 11117  032A  1D03               	btfss	3,2
 11118  032B  2B63               	goto	l7432
 11119                           
 11120                           ;main.c: 867: {
 11121                           ;main.c: 868: *(BStr+2) = 0x01;
 11122  032C  086D               	movf	Decode_RS232_CMD@BStr,w
 11123  032D  3E02               	addlw	2
 11124  032E  0086               	movwf	6
 11125  032F  3002               	movlw	2	; select bank4/5
 11126  0330  0087               	movwf	7
 11127  0331  0181               	clrf	1
 11128  0332  0A81               	incf	1,f
 11129                           
 11130                           ;main.c: 869: *(BStr+3) = 0x11;
 11131  0333  3011               	movlw	17
 11132  0334  00E9               	movwf	??_Decode_RS232_CMD
 11133  0335  086D               	movf	Decode_RS232_CMD@BStr,w
 11134  0336  3E03               	addlw	3
 11135  0337  0086               	movwf	6
 11136  0338  3002               	movlw	2	; select bank4/5
 11137  0339  0087               	movwf	7
 11138  033A  0869               	movf	??_Decode_RS232_CMD,w
 11139  033B  0081               	movwf	1
 11140                           
 11141                           ;main.c: 870: *(BStr+4) = Strlen-5;
 11142  033C  0868               	movf	Decode_RS232_CMD@Strlen,w
 11143  033D  3EFB               	addlw	251
 11144  033E  00E9               	movwf	??_Decode_RS232_CMD
 11145  033F  086D               	movf	Decode_RS232_CMD@BStr,w
 11146  0340  3E04               	addlw	4
 11147  0341  0086               	movwf	6
 11148  0342  3002               	movlw	2	; select bank4/5
 11149  0343  0087               	movwf	7
 11150  0344  0869               	movf	??_Decode_RS232_CMD,w
 11151  0345  0081               	movwf	1
 11152                           
 11153                           ;main.c: 872: I2C_mWrite(BStr+2, Strlen-1, 0x10);
 11154  0346  086D               	movf	Decode_RS232_CMD@BStr,w
 11155  0347  3E02               	addlw	2
 11156  0348  00F6               	movwf	I2C_mWrite@value
 11157  0349  3002               	movlw	2
 11158  034A  00F7               	movwf	I2C_mWrite@value+1
 11159  034B  0868               	movf	Decode_RS232_CMD@Strlen,w
 11160  034C  3EFF               	addlw	255
 11161  034D  00E9               	movwf	??_Decode_RS232_CMD
 11162  034E  0869               	movf	??_Decode_RS232_CMD,w
 11163  034F  00F8               	movwf	I2C_mWrite@Size
 11164  0350  3010               	movlw	16
 11165  0351  00EA               	movwf	??_Decode_RS232_CMD+1
 11166  0352  086A               	movf	??_Decode_RS232_CMD+1,w
 11167  0353  00F9               	movwf	I2C_mWrite@slave_addr
 11168  0354  319E  2683  3180   	fcall	_I2C_mWrite
 11169                           
 11170                           ;main.c: 874: Print_CHLN();
 11171  0357  3199  211C  3180   	fcall	_Print_CHLN
 11172                           
 11173                           ;main.c: 875: Print_String("SET SSID OK$", 1);
 11174  035A  3095               	movlw	low (STR_18| (0+32768))
 11175  035B  00F4               	movwf	Print_String@BStr
 11176  035C  3092               	movlw	high (STR_18| (0+32768))
 11177  035D  00F5               	movwf	Print_String@BStr+1
 11178  035E  01F6               	clrf	Print_String@chln
 11179  035F  0AF6               	incf	Print_String@chln,f
 11180  0360  319B  238A         	fcall	_Print_String
 11181                           
 11182                           ;main.c: 876: }
 11183  0362  0008               	return
 11184  0363                     l7432:	
 11185                           
 11186                           ;main.c: 879: else if((*(BStr+0) == 'P')&&
 11187                           ;main.c: 880: (*(BStr+1) == 'A')&&
 11188                           ;main.c: 881: (*(BStr+2) == 'S')&&
 11189                           ;main.c: 882: (*(BStr+3) == 'S')&&
 11190                           ;main.c: 883: (*(BStr+4) == 'W')&&
 11191                           ;main.c: 884: (*(BStr+5) == 'O')&&
 11192                           ;main.c: 885: (*(BStr+6) == 'R')&&
 11193                           ;main.c: 886: (*(BStr+7) == 'D') )
 11194  0363  0020               	movlb	0	; select bank0
 11195  0364  086D               	movf	Decode_RS232_CMD@BStr,w
 11196  0365  0086               	movwf	6
 11197  0366  3002               	movlw	2	; select bank4/5
 11198  0367  0087               	movwf	7
 11199  0368  3050               	movlw	80
 11200  0369  0601               	xorwf	1,w
 11201  036A  1D03               	btfss	3,2
 11202  036B  2BE1               	goto	l7456
 11203  036C  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11204  036D  0086               	movwf	6
 11205  036E  3002               	movlw	2	; select bank4/5
 11206  036F  0087               	movwf	7
 11207  0370  3041               	movlw	65
 11208  0371  0601               	xorwf	1,w
 11209  0372  1D03               	btfss	3,2
 11210  0373  2BE1               	goto	l7456
 11211  0374  086D               	movf	Decode_RS232_CMD@BStr,w
 11212  0375  3E02               	addlw	2
 11213  0376  0086               	movwf	6
 11214  0377  3002               	movlw	2	; select bank4/5
 11215  0378  0087               	movwf	7
 11216  0379  3053               	movlw	83
 11217  037A  0601               	xorwf	1,w
 11218  037B  1D03               	btfss	3,2
 11219  037C  2BE1               	goto	l7456
 11220  037D  086D               	movf	Decode_RS232_CMD@BStr,w
 11221  037E  3E03               	addlw	3
 11222  037F  0086               	movwf	6
 11223  0380  3002               	movlw	2	; select bank4/5
 11224  0381  0087               	movwf	7
 11225  0382  3053               	movlw	83
 11226  0383  0601               	xorwf	1,w
 11227  0384  1D03               	btfss	3,2
 11228  0385  2BE1               	goto	l7456
 11229  0386  086D               	movf	Decode_RS232_CMD@BStr,w
 11230  0387  3E04               	addlw	4
 11231  0388  0086               	movwf	6
 11232  0389  3002               	movlw	2	; select bank4/5
 11233  038A  0087               	movwf	7
 11234  038B  3057               	movlw	87
 11235  038C  0601               	xorwf	1,w
 11236  038D  1D03               	btfss	3,2
 11237  038E  2BE1               	goto	l7456
 11238  038F  086D               	movf	Decode_RS232_CMD@BStr,w
 11239  0390  3E05               	addlw	5
 11240  0391  0086               	movwf	6
 11241  0392  3002               	movlw	2	; select bank4/5
 11242  0393  0087               	movwf	7
 11243  0394  304F               	movlw	79
 11244  0395  0601               	xorwf	1,w
 11245  0396  1D03               	btfss	3,2
 11246  0397  2BE1               	goto	l7456
 11247  0398  086D               	movf	Decode_RS232_CMD@BStr,w
 11248  0399  3E06               	addlw	6
 11249  039A  0086               	movwf	6
 11250  039B  3002               	movlw	2	; select bank4/5
 11251  039C  0087               	movwf	7
 11252  039D  3052               	movlw	82
 11253  039E  0601               	xorwf	1,w
 11254  039F  1D03               	btfss	3,2
 11255  03A0  2BE1               	goto	l7456
 11256  03A1  086D               	movf	Decode_RS232_CMD@BStr,w
 11257  03A2  3E07               	addlw	7
 11258  03A3  0086               	movwf	6
 11259  03A4  3002               	movlw	2	; select bank4/5
 11260  03A5  0087               	movwf	7
 11261  03A6  3044               	movlw	68
 11262  03A7  0601               	xorwf	1,w
 11263  03A8  1D03               	btfss	3,2
 11264  03A9  2BE1               	goto	l7456
 11265                           
 11266                           ;main.c: 887: {
 11267                           ;main.c: 888: *(BStr+6) = 0x01;
 11268  03AA  086D               	movf	Decode_RS232_CMD@BStr,w
 11269  03AB  3E06               	addlw	6
 11270  03AC  0086               	movwf	6
 11271  03AD  3002               	movlw	2	; select bank4/5
 11272  03AE  0087               	movwf	7
 11273  03AF  0181               	clrf	1
 11274  03B0  0A81               	incf	1,f
 11275                           
 11276                           ;main.c: 889: *(BStr+7) = 0x31;
 11277  03B1  3031               	movlw	49
 11278  03B2  00E9               	movwf	??_Decode_RS232_CMD
 11279  03B3  086D               	movf	Decode_RS232_CMD@BStr,w
 11280  03B4  3E07               	addlw	7
 11281  03B5  0086               	movwf	6
 11282  03B6  3002               	movlw	2	; select bank4/5
 11283  03B7  0087               	movwf	7
 11284  03B8  0869               	movf	??_Decode_RS232_CMD,w
 11285  03B9  0081               	movwf	1
 11286                           
 11287                           ;main.c: 890: *(BStr+8) = Strlen-9;
 11288  03BA  0868               	movf	Decode_RS232_CMD@Strlen,w
 11289  03BB  3EF7               	addlw	247
 11290  03BC  00E9               	movwf	??_Decode_RS232_CMD
 11291  03BD  086D               	movf	Decode_RS232_CMD@BStr,w
 11292  03BE  3E08               	addlw	8
 11293  03BF  0086               	movwf	6
 11294  03C0  3002               	movlw	2	; select bank4/5
 11295  03C1  0087               	movwf	7
 11296  03C2  0869               	movf	??_Decode_RS232_CMD,w
 11297  03C3  0081               	movwf	1
 11298                           
 11299                           ;main.c: 892: I2C_mWrite(BStr+6, Strlen-1-4, 0x10);
 11300  03C4  086D               	movf	Decode_RS232_CMD@BStr,w
 11301  03C5  3E06               	addlw	6
 11302  03C6  00F6               	movwf	I2C_mWrite@value
 11303  03C7  3002               	movlw	2
 11304  03C8  00F7               	movwf	I2C_mWrite@value+1
 11305  03C9  0868               	movf	Decode_RS232_CMD@Strlen,w
 11306  03CA  3EFB               	addlw	251
 11307  03CB  00E9               	movwf	??_Decode_RS232_CMD
 11308  03CC  0869               	movf	??_Decode_RS232_CMD,w
 11309  03CD  00F8               	movwf	I2C_mWrite@Size
 11310  03CE  3010               	movlw	16
 11311  03CF  00EA               	movwf	??_Decode_RS232_CMD+1
 11312  03D0  086A               	movf	??_Decode_RS232_CMD+1,w
 11313  03D1  00F9               	movwf	I2C_mWrite@slave_addr
 11314  03D2  319E  2683  3180   	fcall	_I2C_mWrite
 11315                           
 11316                           ;main.c: 894: Print_CHLN();
 11317  03D5  3199  211C  3180   	fcall	_Print_CHLN
 11318                           
 11319                           ;main.c: 895: Print_String("SET Password OK$", 1);
 11320  03D8  302B               	movlw	low (STR_19| (0+32768))
 11321  03D9  00F4               	movwf	Print_String@BStr
 11322  03DA  3092               	movlw	high (STR_19| (0+32768))
 11323  03DB  00F5               	movwf	Print_String@BStr+1
 11324  03DC  01F6               	clrf	Print_String@chln
 11325  03DD  0AF6               	incf	Print_String@chln,f
 11326  03DE  319B  238A         	fcall	_Print_String
 11327                           
 11328                           ;main.c: 896: }
 11329  03E0  0008               	return
 11330  03E1                     l7456:	
 11331                           
 11332                           ;main.c: 899: else if((*(BStr+0) == 'C')&&
 11333                           ;main.c: 900: (*(BStr+1) == 'H')&&
 11334                           ;main.c: 901: (*(BStr+2) == 'K')&&
 11335                           ;main.c: 902: (*(BStr+3) == 'A')&&
 11336                           ;main.c: 903: (*(BStr+4) == 'P') )
 11337  03E1  0020               	movlb	0	; select bank0
 11338  03E2  086D               	movf	Decode_RS232_CMD@BStr,w
 11339  03E3  0086               	movwf	6
 11340  03E4  3002               	movlw	2	; select bank4/5
 11341  03E5  0087               	movwf	7
 11342  03E6  3043               	movlw	67
 11343  03E7  0601               	xorwf	1,w
 11344  03E8  1D03               	btfss	3,2
 11345  03E9  2C47               	goto	l7480
 11346  03EA  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11347  03EB  0086               	movwf	6
 11348  03EC  3002               	movlw	2	; select bank4/5
 11349  03ED  0087               	movwf	7
 11350  03EE  3048               	movlw	72
 11351  03EF  0601               	xorwf	1,w
 11352  03F0  1D03               	btfss	3,2
 11353  03F1  2C47               	goto	l7480
 11354  03F2  086D               	movf	Decode_RS232_CMD@BStr,w
 11355  03F3  3E02               	addlw	2
 11356  03F4  0086               	movwf	6
 11357  03F5  3002               	movlw	2	; select bank4/5
 11358  03F6  0087               	movwf	7
 11359  03F7  304B               	movlw	75
 11360  03F8  0601               	xorwf	1,w
 11361  03F9  1D03               	btfss	3,2
 11362  03FA  2C47               	goto	l7480
 11363  03FB  086D               	movf	Decode_RS232_CMD@BStr,w
 11364  03FC  3E03               	addlw	3
 11365  03FD  0086               	movwf	6
 11366  03FE  3002               	movlw	2	; select bank4/5
 11367  03FF  0087               	movwf	7
 11368  0400  3041               	movlw	65
 11369  0401  0601               	xorwf	1,w
 11370  0402  1D03               	btfss	3,2
 11371  0403  2C47               	goto	l7480
 11372  0404  086D               	movf	Decode_RS232_CMD@BStr,w
 11373  0405  3E04               	addlw	4
 11374  0406  0086               	movwf	6
 11375  0407  3002               	movlw	2	; select bank4/5
 11376  0408  0087               	movwf	7
 11377  0409  3050               	movlw	80
 11378  040A  0601               	xorwf	1,w
 11379  040B  1D03               	btfss	3,2
 11380  040C  2C47               	goto	l7480
 11381                           
 11382                           ;main.c: 904: {
 11383                           ;main.c: 905: *(BStr+0) = 0x01;
 11384  040D  086D               	movf	Decode_RS232_CMD@BStr,w
 11385  040E  0086               	movwf	6
 11386  040F  3002               	movlw	2	; select bank4/5
 11387  0410  0087               	movwf	7
 11388  0411  0181               	clrf	1
 11389  0412  0A81               	incf	1,f
 11390                           
 11391                           ;main.c: 906: *(BStr+1) = 0xA1;
 11392  0413  30A1               	movlw	161
 11393  0414  00E9               	movwf	??_Decode_RS232_CMD
 11394  0415  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11395  0416  0086               	movwf	6
 11396  0417  3002               	movlw	2	; select bank4/5
 11397  0418  0087               	movwf	7
 11398  0419  0869               	movf	??_Decode_RS232_CMD,w
 11399  041A  0081               	movwf	1
 11400                           
 11401                           ;main.c: 907: *(BStr+2) = 0x01;
 11402  041B  086D               	movf	Decode_RS232_CMD@BStr,w
 11403  041C  3E02               	addlw	2
 11404  041D  0086               	movwf	6
 11405  041E  3002               	movlw	2	; select bank4/5
 11406  041F  0087               	movwf	7
 11407  0420  0181               	clrf	1
 11408  0421  0A81               	incf	1,f
 11409                           
 11410                           ;main.c: 908: *(BStr+3) = 0x01;
 11411  0422  086D               	movf	Decode_RS232_CMD@BStr,w
 11412  0423  3E03               	addlw	3
 11413  0424  0086               	movwf	6
 11414  0425  3002               	movlw	2	; select bank4/5
 11415  0426  0087               	movwf	7
 11416  0427  0181               	clrf	1
 11417  0428  0A81               	incf	1,f
 11418                           
 11419                           ;main.c: 910: I2C_mWrite(BStr, 4+1, 0x10);
 11420  0429  086D               	movf	Decode_RS232_CMD@BStr,w
 11421  042A  00F6               	movwf	I2C_mWrite@value
 11422  042B  3002               	movlw	2
 11423  042C  00F7               	movwf	I2C_mWrite@value+1
 11424  042D  3005               	movlw	5
 11425  042E  00E9               	movwf	??_Decode_RS232_CMD
 11426  042F  0869               	movf	??_Decode_RS232_CMD,w
 11427  0430  00F8               	movwf	I2C_mWrite@Size
 11428  0431  3010               	movlw	16
 11429  0432  00EA               	movwf	??_Decode_RS232_CMD+1
 11430  0433  086A               	movf	??_Decode_RS232_CMD+1,w
 11431  0434  00F9               	movwf	I2C_mWrite@slave_addr
 11432  0435  319E  2683  3180   	fcall	_I2C_mWrite
 11433                           
 11434                           ;main.c: 912: Print_CHLN();
 11435  0438  3199  211C  3180   	fcall	_Print_CHLN
 11436                           
 11437                           ;main.c: 913: Print_String("CHECK AP, need waiting feedback...$", 1);
 11438  043B  3000               	movlw	low (STR_20| (0+32768))
 11439  043C  00F4               	movwf	Print_String@BStr
 11440  043D  3090               	movlw	high (STR_20| (0+32768))
 11441  043E  00F5               	movwf	Print_String@BStr+1
 11442  043F  01F6               	clrf	Print_String@chln
 11443  0440  0AF6               	incf	Print_String@chln,f
 11444  0441  319B  238A         	fcall	_Print_String
 11445                           
 11446                           ;main.c: 915: exINT_Mode = 0x01;
 11447  0443  0021               	movlb	1	; select bank1
 11448  0444  01EF               	clrf	_exINT_Mode^(0+128)
 11449  0445  0AEF               	incf	_exINT_Mode^(0+128),f
 11450                           
 11451                           ;main.c: 916: }
 11452  0446  0008               	return
 11453  0447                     l7480:	
 11454                           
 11455                           ;main.c: 919: else if((*(BStr+0) == 'C')&&
 11456                           ;main.c: 920: (*(BStr+1) == 'N')&&
 11457                           ;main.c: 921: (*(BStr+2) == 'C')&&
 11458                           ;main.c: 922: (*(BStr+3) == 'T') )
 11459  0447  0020               	movlb	0	; select bank0
 11460  0448  086D               	movf	Decode_RS232_CMD@BStr,w
 11461  0449  0086               	movwf	6
 11462  044A  3002               	movlw	2	; select bank4/5
 11463  044B  0087               	movwf	7
 11464  044C  3043               	movlw	67
 11465  044D  0601               	xorwf	1,w
 11466  044E  1D03               	btfss	3,2
 11467  044F  2CA9               	goto	l7502
 11468  0450  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11469  0451  0086               	movwf	6
 11470  0452  3002               	movlw	2	; select bank4/5
 11471  0453  0087               	movwf	7
 11472  0454  304E               	movlw	78
 11473  0455  0601               	xorwf	1,w
 11474  0456  1D03               	btfss	3,2
 11475  0457  2CA9               	goto	l7502
 11476  0458  086D               	movf	Decode_RS232_CMD@BStr,w
 11477  0459  3E02               	addlw	2
 11478  045A  0086               	movwf	6
 11479  045B  3002               	movlw	2	; select bank4/5
 11480  045C  0087               	movwf	7
 11481  045D  3043               	movlw	67
 11482  045E  0601               	xorwf	1,w
 11483  045F  1D03               	btfss	3,2
 11484  0460  2CA9               	goto	l7502
 11485  0461  086D               	movf	Decode_RS232_CMD@BStr,w
 11486  0462  3E03               	addlw	3
 11487  0463  0086               	movwf	6
 11488  0464  3002               	movlw	2	; select bank4/5
 11489  0465  0087               	movwf	7
 11490  0466  3054               	movlw	84
 11491  0467  0601               	xorwf	1,w
 11492  0468  1D03               	btfss	3,2
 11493  0469  2CA9               	goto	l7502
 11494                           
 11495                           ;main.c: 923: {
 11496                           ;main.c: 924: *(BStr+0) = 0x01;
 11497  046A  086D               	movf	Decode_RS232_CMD@BStr,w
 11498  046B  0086               	movwf	6
 11499  046C  3002               	movlw	2	; select bank4/5
 11500  046D  0087               	movwf	7
 11501  046E  0181               	clrf	1
 11502  046F  0A81               	incf	1,f
 11503                           
 11504                           ;main.c: 925: *(BStr+1) = 0xA1;
 11505  0470  30A1               	movlw	161
 11506  0471  00E9               	movwf	??_Decode_RS232_CMD
 11507  0472  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11508  0473  0086               	movwf	6
 11509  0474  3002               	movlw	2	; select bank4/5
 11510  0475  0087               	movwf	7
 11511  0476  0869               	movf	??_Decode_RS232_CMD,w
 11512  0477  0081               	movwf	1
 11513                           
 11514                           ;main.c: 926: *(BStr+2) = 0x01;
 11515  0478  086D               	movf	Decode_RS232_CMD@BStr,w
 11516  0479  3E02               	addlw	2
 11517  047A  0086               	movwf	6
 11518  047B  3002               	movlw	2	; select bank4/5
 11519  047C  0087               	movwf	7
 11520  047D  0181               	clrf	1
 11521  047E  0A81               	incf	1,f
 11522                           
 11523                           ;main.c: 927: *(BStr+3) = 0x02;
 11524  047F  3002               	movlw	2
 11525  0480  00E9               	movwf	??_Decode_RS232_CMD
 11526  0481  086D               	movf	Decode_RS232_CMD@BStr,w
 11527  0482  3E03               	addlw	3
 11528  0483  0086               	movwf	6
 11529  0484  3002               	movlw	2	; select bank4/5
 11530  0485  0087               	movwf	7
 11531  0486  0869               	movf	??_Decode_RS232_CMD,w
 11532  0487  0081               	movwf	1
 11533                           
 11534                           ;main.c: 929: I2C_mWrite(BStr, 4+1, 0x10);
 11535  0488  086D               	movf	Decode_RS232_CMD@BStr,w
 11536  0489  00F6               	movwf	I2C_mWrite@value
 11537  048A  3002               	movlw	2
 11538  048B  00F7               	movwf	I2C_mWrite@value+1
 11539  048C  3005               	movlw	5
 11540  048D  00E9               	movwf	??_Decode_RS232_CMD
 11541  048E  0869               	movf	??_Decode_RS232_CMD,w
 11542  048F  00F8               	movwf	I2C_mWrite@Size
 11543  0490  3010               	movlw	16
 11544  0491  00EA               	movwf	??_Decode_RS232_CMD+1
 11545  0492  086A               	movf	??_Decode_RS232_CMD+1,w
 11546  0493  00F9               	movwf	I2C_mWrite@slave_addr
 11547  0494  319E  2683  3180   	fcall	_I2C_mWrite
 11548                           
 11549                           ;main.c: 931: Print_CHLN();
 11550  0497  3199  211C  3180   	fcall	_Print_CHLN
 11551                           
 11552                           ;main.c: 932: Print_String("SET CNCT, need waiting feedback...$", 1);
 11553  049A  3048               	movlw	low (STR_21| (0+32768))
 11554  049B  00F4               	movwf	Print_String@BStr
 11555  049C  3090               	movlw	high (STR_21| (0+32768))
 11556  049D  00F5               	movwf	Print_String@BStr+1
 11557  049E  01F6               	clrf	Print_String@chln
 11558  049F  0AF6               	incf	Print_String@chln,f
 11559  04A0  319B  238A         	fcall	_Print_String
 11560                           
 11561                           ;main.c: 934: exINT_Mode = 0x02;
 11562  04A2  3002               	movlw	2
 11563  04A3  0020               	movlb	0	; select bank0
 11564  04A4  00E9               	movwf	??_Decode_RS232_CMD
 11565  04A5  0869               	movf	??_Decode_RS232_CMD,w
 11566  04A6  0021               	movlb	1	; select bank1
 11567  04A7  00EF               	movwf	_exINT_Mode^(0+128)
 11568                           
 11569                           ;main.c: 935: }
 11570  04A8  0008               	return
 11571  04A9                     l7502:	
 11572                           
 11573                           ;main.c: 938: else if((*(BStr+0) == 'F')&&
 11574                           ;main.c: 939: (*(BStr+1) == 'I')&&
 11575                           ;main.c: 940: (*(BStr+2) == 'D') )
 11576  04A9  0020               	movlb	0	; select bank0
 11577  04AA  086D               	movf	Decode_RS232_CMD@BStr,w
 11578  04AB  0086               	movwf	6
 11579  04AC  3002               	movlw	2	; select bank4/5
 11580  04AD  0087               	movwf	7
 11581  04AE  3046               	movlw	70
 11582  04AF  0601               	xorwf	1,w
 11583  04B0  1D03               	btfss	3,2
 11584  04B1  2D2A               	goto	l7522
 11585  04B2  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11586  04B3  0086               	movwf	6
 11587  04B4  3002               	movlw	2	; select bank4/5
 11588  04B5  0087               	movwf	7
 11589  04B6  3049               	movlw	73
 11590  04B7  0601               	xorwf	1,w
 11591  04B8  1D03               	btfss	3,2
 11592  04B9  2D2A               	goto	l7522
 11593  04BA  086D               	movf	Decode_RS232_CMD@BStr,w
 11594  04BB  3E02               	addlw	2
 11595  04BC  0086               	movwf	6
 11596  04BD  3002               	movlw	2	; select bank4/5
 11597  04BE  0087               	movwf	7
 11598  04BF  3044               	movlw	68
 11599  04C0  0601               	xorwf	1,w
 11600  04C1  1D03               	btfss	3,2
 11601  04C2  2D2A               	goto	l7522
 11602                           
 11603                           ;main.c: 941: {
 11604                           ;main.c: 942: *(BStr+4) = STR2HEX(BStr, 4);
 11605  04C3  3004               	movlw	4
 11606  04C4  00E9               	movwf	??_Decode_RS232_CMD
 11607  04C5  0869               	movf	??_Decode_RS232_CMD,w
 11608  04C6  00F4               	movwf	STR2HEX@NumPoint
 11609  04C7  086D               	movf	Decode_RS232_CMD@BStr,w
 11610  04C8  319A  228F  3180   	fcall	_STR2HEX
 11611  04CB  0020               	movlb	0	; select bank0
 11612  04CC  00EA               	movwf	??_Decode_RS232_CMD+1
 11613  04CD  086D               	movf	Decode_RS232_CMD@BStr,w
 11614  04CE  3E04               	addlw	4
 11615  04CF  0086               	movwf	6
 11616  04D0  3002               	movlw	2	; select bank4/5
 11617  04D1  0087               	movwf	7
 11618  04D2  086A               	movf	??_Decode_RS232_CMD+1,w
 11619  04D3  0081               	movwf	1
 11620                           
 11621                           ;main.c: 943: *(BStr+5) = STR2HEX(BStr, 6);
 11622  04D4  3006               	movlw	6
 11623  04D5  00E9               	movwf	??_Decode_RS232_CMD
 11624  04D6  0869               	movf	??_Decode_RS232_CMD,w
 11625  04D7  00F4               	movwf	STR2HEX@NumPoint
 11626  04D8  086D               	movf	Decode_RS232_CMD@BStr,w
 11627  04D9  319A  228F  3180   	fcall	_STR2HEX
 11628  04DC  0020               	movlb	0	; select bank0
 11629  04DD  00EA               	movwf	??_Decode_RS232_CMD+1
 11630  04DE  086D               	movf	Decode_RS232_CMD@BStr,w
 11631  04DF  3E05               	addlw	5
 11632  04E0  0086               	movwf	6
 11633  04E1  3002               	movlw	2	; select bank4/5
 11634  04E2  0087               	movwf	7
 11635  04E3  086A               	movf	??_Decode_RS232_CMD+1,w
 11636  04E4  0081               	movwf	1
 11637                           
 11638                           ;main.c: 944: *(BStr+6) = STR2HEX(BStr, 8);
 11639  04E5  3008               	movlw	8
 11640  04E6  00E9               	movwf	??_Decode_RS232_CMD
 11641  04E7  0869               	movf	??_Decode_RS232_CMD,w
 11642  04E8  00F4               	movwf	STR2HEX@NumPoint
 11643  04E9  086D               	movf	Decode_RS232_CMD@BStr,w
 11644  04EA  319A  228F  3180   	fcall	_STR2HEX
 11645  04ED  0020               	movlb	0	; select bank0
 11646  04EE  00EA               	movwf	??_Decode_RS232_CMD+1
 11647  04EF  086D               	movf	Decode_RS232_CMD@BStr,w
 11648  04F0  3E06               	addlw	6
 11649  04F1  0086               	movwf	6
 11650  04F2  3002               	movlw	2	; select bank4/5
 11651  04F3  0087               	movwf	7
 11652  04F4  086A               	movf	??_Decode_RS232_CMD+1,w
 11653  04F5  0081               	movwf	1
 11654                           
 11655                           ;main.c: 946: *(BStr+1) = 0x01;
 11656  04F6  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11657  04F7  0086               	movwf	6
 11658  04F8  3002               	movlw	2	; select bank4/5
 11659  04F9  0087               	movwf	7
 11660  04FA  0181               	clrf	1
 11661  04FB  0A81               	incf	1,f
 11662                           
 11663                           ;main.c: 947: *(BStr+2) = 0x3D;
 11664  04FC  303D               	movlw	61
 11665  04FD  00E9               	movwf	??_Decode_RS232_CMD
 11666  04FE  086D               	movf	Decode_RS232_CMD@BStr,w
 11667  04FF  3E02               	addlw	2
 11668  0500  0086               	movwf	6
 11669  0501  3002               	movlw	2	; select bank4/5
 11670  0502  0087               	movwf	7
 11671  0503  0869               	movf	??_Decode_RS232_CMD,w
 11672  0504  0081               	movwf	1
 11673                           
 11674                           ;main.c: 948: *(BStr+3) = 0x03;
 11675  0505  3003               	movlw	3
 11676  0506  00E9               	movwf	??_Decode_RS232_CMD
 11677  0507  086D               	movf	Decode_RS232_CMD@BStr,w
 11678  0508  3E03               	addlw	3
 11679  0509  0086               	movwf	6
 11680  050A  3002               	movlw	2	; select bank4/5
 11681  050B  0087               	movwf	7
 11682  050C  0869               	movf	??_Decode_RS232_CMD,w
 11683  050D  0081               	movwf	1
 11684                           
 11685                           ;main.c: 950: I2C_mWrite(BStr+1, Strlen, 0x10);
 11686  050E  086D               	movf	Decode_RS232_CMD@BStr,w
 11687  050F  3E01               	addlw	1
 11688  0510  00F6               	movwf	I2C_mWrite@value
 11689  0511  3002               	movlw	2
 11690  0512  00F7               	movwf	I2C_mWrite@value+1
 11691  0513  0868               	movf	Decode_RS232_CMD@Strlen,w
 11692  0514  00E9               	movwf	??_Decode_RS232_CMD
 11693  0515  0869               	movf	??_Decode_RS232_CMD,w
 11694  0516  00F8               	movwf	I2C_mWrite@Size
 11695  0517  3010               	movlw	16
 11696  0518  00EA               	movwf	??_Decode_RS232_CMD+1
 11697  0519  086A               	movf	??_Decode_RS232_CMD+1,w
 11698  051A  00F9               	movwf	I2C_mWrite@slave_addr
 11699  051B  319E  2683  3180   	fcall	_I2C_mWrite
 11700                           
 11701                           ;main.c: 952: Print_CHLN();
 11702  051E  3199  211C  3180   	fcall	_Print_CHLN
 11703                           
 11704                           ;main.c: 953: Print_String("SET FID OK$", 1);
 11705  0521  30AE               	movlw	low (STR_22| (0+32768))
 11706  0522  00F4               	movwf	Print_String@BStr
 11707  0523  3092               	movlw	high (STR_22| (0+32768))
 11708  0524  00F5               	movwf	Print_String@BStr+1
 11709  0525  01F6               	clrf	Print_String@chln
 11710  0526  0AF6               	incf	Print_String@chln,f
 11711  0527  319B  238A         	fcall	_Print_String
 11712                           
 11713                           ;main.c: 954: }
 11714  0529  0008               	return
 11715  052A                     l7522:	
 11716                           
 11717                           ;main.c: 957: else if((*(BStr+0) == 'R')&&
 11718                           ;main.c: 958: (*(BStr+1) == 'E')&&
 11719                           ;main.c: 959: (*(BStr+2) == 'G') )
 11720  052A  0020               	movlb	0	; select bank0
 11721  052B  086D               	movf	Decode_RS232_CMD@BStr,w
 11722  052C  0086               	movwf	6
 11723  052D  3002               	movlw	2	; select bank4/5
 11724  052E  0087               	movwf	7
 11725  052F  3052               	movlw	82
 11726  0530  0601               	xorwf	1,w
 11727  0531  1D03               	btfss	3,2
 11728  0532  2D83               	goto	l7542
 11729  0533  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11730  0534  0086               	movwf	6
 11731  0535  3002               	movlw	2	; select bank4/5
 11732  0536  0087               	movwf	7
 11733  0537  3045               	movlw	69
 11734  0538  0601               	xorwf	1,w
 11735  0539  1D03               	btfss	3,2
 11736  053A  2D83               	goto	l7542
 11737  053B  086D               	movf	Decode_RS232_CMD@BStr,w
 11738  053C  3E02               	addlw	2
 11739  053D  0086               	movwf	6
 11740  053E  3002               	movlw	2	; select bank4/5
 11741  053F  0087               	movwf	7
 11742  0540  3047               	movlw	71
 11743  0541  0601               	xorwf	1,w
 11744  0542  1D03               	btfss	3,2
 11745  0543  2D83               	goto	l7542
 11746                           
 11747                           ;main.c: 960: {
 11748                           ;main.c: 961: *(BStr+0) = 0x01;
 11749  0544  086D               	movf	Decode_RS232_CMD@BStr,w
 11750  0545  0086               	movwf	6
 11751  0546  3002               	movlw	2	; select bank4/5
 11752  0547  0087               	movwf	7
 11753  0548  0181               	clrf	1
 11754  0549  0A81               	incf	1,f
 11755                           
 11756                           ;main.c: 962: *(BStr+1) = 0xA1;
 11757  054A  30A1               	movlw	161
 11758  054B  00E9               	movwf	??_Decode_RS232_CMD
 11759  054C  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11760  054D  0086               	movwf	6
 11761  054E  3002               	movlw	2	; select bank4/5
 11762  054F  0087               	movwf	7
 11763  0550  0869               	movf	??_Decode_RS232_CMD,w
 11764  0551  0081               	movwf	1
 11765                           
 11766                           ;main.c: 963: *(BStr+2) = 0x01;
 11767  0552  086D               	movf	Decode_RS232_CMD@BStr,w
 11768  0553  3E02               	addlw	2
 11769  0554  0086               	movwf	6
 11770  0555  3002               	movlw	2	; select bank4/5
 11771  0556  0087               	movwf	7
 11772  0557  0181               	clrf	1
 11773  0558  0A81               	incf	1,f
 11774                           
 11775                           ;main.c: 964: *(BStr+3) = 0x04;
 11776  0559  3004               	movlw	4
 11777  055A  00E9               	movwf	??_Decode_RS232_CMD
 11778  055B  086D               	movf	Decode_RS232_CMD@BStr,w
 11779  055C  3E03               	addlw	3
 11780  055D  0086               	movwf	6
 11781  055E  3002               	movlw	2	; select bank4/5
 11782  055F  0087               	movwf	7
 11783  0560  0869               	movf	??_Decode_RS232_CMD,w
 11784  0561  0081               	movwf	1
 11785                           
 11786                           ;main.c: 966: I2C_mWrite(BStr, 4+1, 0x10);
 11787  0562  086D               	movf	Decode_RS232_CMD@BStr,w
 11788  0563  00F6               	movwf	I2C_mWrite@value
 11789  0564  3002               	movlw	2
 11790  0565  00F7               	movwf	I2C_mWrite@value+1
 11791  0566  3005               	movlw	5
 11792  0567  00E9               	movwf	??_Decode_RS232_CMD
 11793  0568  0869               	movf	??_Decode_RS232_CMD,w
 11794  0569  00F8               	movwf	I2C_mWrite@Size
 11795  056A  3010               	movlw	16
 11796  056B  00EA               	movwf	??_Decode_RS232_CMD+1
 11797  056C  086A               	movf	??_Decode_RS232_CMD+1,w
 11798  056D  00F9               	movwf	I2C_mWrite@slave_addr
 11799  056E  319E  2683  3180   	fcall	_I2C_mWrite
 11800                           
 11801                           ;main.c: 968: Print_CHLN();
 11802  0571  3199  211C  3180   	fcall	_Print_CHLN
 11803                           
 11804                           ;main.c: 969: Print_String("REGISTER, need waiting feedback...$", 1);
 11805  0574  3024               	movlw	low (STR_23| (0+32768))
 11806  0575  00F4               	movwf	Print_String@BStr
 11807  0576  3090               	movlw	high (STR_23| (0+32768))
 11808  0577  00F5               	movwf	Print_String@BStr+1
 11809  0578  01F6               	clrf	Print_String@chln
 11810  0579  0AF6               	incf	Print_String@chln,f
 11811  057A  319B  238A         	fcall	_Print_String
 11812                           
 11813                           ;main.c: 971: exINT_Mode = 0x04;
 11814  057C  3004               	movlw	4
 11815  057D  0020               	movlb	0	; select bank0
 11816  057E  00E9               	movwf	??_Decode_RS232_CMD
 11817  057F  0869               	movf	??_Decode_RS232_CMD,w
 11818  0580  0021               	movlb	1	; select bank1
 11819  0581  00EF               	movwf	_exINT_Mode^(0+128)
 11820                           
 11821                           ;main.c: 972: }
 11822  0582  0008               	return
 11823  0583                     l7542:	
 11824                           
 11825                           ;main.c: 975: else if((*(BStr+0) == 'A')&&
 11826                           ;main.c: 976: (*(BStr+1) == 'D')&&
 11827                           ;main.c: 977: (*(BStr+2) == 'J') )
 11828  0583  0020               	movlb	0	; select bank0
 11829  0584  086D               	movf	Decode_RS232_CMD@BStr,w
 11830  0585  0086               	movwf	6
 11831  0586  3002               	movlw	2	; select bank4/5
 11832  0587  0087               	movwf	7
 11833  0588  3041               	movlw	65
 11834  0589  0601               	xorwf	1,w
 11835  058A  1D03               	btfss	3,2
 11836  058B  2DDC               	goto	l7562
 11837  058C  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11838  058D  0086               	movwf	6
 11839  058E  3002               	movlw	2	; select bank4/5
 11840  058F  0087               	movwf	7
 11841  0590  3044               	movlw	68
 11842  0591  0601               	xorwf	1,w
 11843  0592  1D03               	btfss	3,2
 11844  0593  2DDC               	goto	l7562
 11845  0594  086D               	movf	Decode_RS232_CMD@BStr,w
 11846  0595  3E02               	addlw	2
 11847  0596  0086               	movwf	6
 11848  0597  3002               	movlw	2	; select bank4/5
 11849  0598  0087               	movwf	7
 11850  0599  304A               	movlw	74
 11851  059A  0601               	xorwf	1,w
 11852  059B  1D03               	btfss	3,2
 11853  059C  2DDC               	goto	l7562
 11854                           
 11855                           ;main.c: 978: {
 11856                           ;main.c: 979: *(BStr+0) = 0x01;
 11857  059D  086D               	movf	Decode_RS232_CMD@BStr,w
 11858  059E  0086               	movwf	6
 11859  059F  3002               	movlw	2	; select bank4/5
 11860  05A0  0087               	movwf	7
 11861  05A1  0181               	clrf	1
 11862  05A2  0A81               	incf	1,f
 11863                           
 11864                           ;main.c: 980: *(BStr+1) = 0xA1;
 11865  05A3  30A1               	movlw	161
 11866  05A4  00E9               	movwf	??_Decode_RS232_CMD
 11867  05A5  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11868  05A6  0086               	movwf	6
 11869  05A7  3002               	movlw	2	; select bank4/5
 11870  05A8  0087               	movwf	7
 11871  05A9  0869               	movf	??_Decode_RS232_CMD,w
 11872  05AA  0081               	movwf	1
 11873                           
 11874                           ;main.c: 981: *(BStr+2) = 0x01;
 11875  05AB  086D               	movf	Decode_RS232_CMD@BStr,w
 11876  05AC  3E02               	addlw	2
 11877  05AD  0086               	movwf	6
 11878  05AE  3002               	movlw	2	; select bank4/5
 11879  05AF  0087               	movwf	7
 11880  05B0  0181               	clrf	1
 11881  05B1  0A81               	incf	1,f
 11882                           
 11883                           ;main.c: 982: *(BStr+3) = 0x08;
 11884  05B2  3008               	movlw	8
 11885  05B3  00E9               	movwf	??_Decode_RS232_CMD
 11886  05B4  086D               	movf	Decode_RS232_CMD@BStr,w
 11887  05B5  3E03               	addlw	3
 11888  05B6  0086               	movwf	6
 11889  05B7  3002               	movlw	2	; select bank4/5
 11890  05B8  0087               	movwf	7
 11891  05B9  0869               	movf	??_Decode_RS232_CMD,w
 11892  05BA  0081               	movwf	1
 11893                           
 11894                           ;main.c: 984: I2C_mWrite(BStr, 4+1, 0x10);
 11895  05BB  086D               	movf	Decode_RS232_CMD@BStr,w
 11896  05BC  00F6               	movwf	I2C_mWrite@value
 11897  05BD  3002               	movlw	2
 11898  05BE  00F7               	movwf	I2C_mWrite@value+1
 11899  05BF  3005               	movlw	5
 11900  05C0  00E9               	movwf	??_Decode_RS232_CMD
 11901  05C1  0869               	movf	??_Decode_RS232_CMD,w
 11902  05C2  00F8               	movwf	I2C_mWrite@Size
 11903  05C3  3010               	movlw	16
 11904  05C4  00EA               	movwf	??_Decode_RS232_CMD+1
 11905  05C5  086A               	movf	??_Decode_RS232_CMD+1,w
 11906  05C6  00F9               	movwf	I2C_mWrite@slave_addr
 11907  05C7  319E  2683  3180   	fcall	_I2C_mWrite
 11908                           
 11909                           ;main.c: 986: Print_CHLN();
 11910  05CA  3199  211C  3180   	fcall	_Print_CHLN
 11911                           
 11912                           ;main.c: 987: Print_String("Adjust, need waiting feedback...$", 1);
 11913  05CD  306C               	movlw	low (STR_24| (0+32768))
 11914  05CE  00F4               	movwf	Print_String@BStr
 11915  05CF  3090               	movlw	high (STR_24| (0+32768))
 11916  05D0  00F5               	movwf	Print_String@BStr+1
 11917  05D1  01F6               	clrf	Print_String@chln
 11918  05D2  0AF6               	incf	Print_String@chln,f
 11919  05D3  319B  238A         	fcall	_Print_String
 11920                           
 11921                           ;main.c: 989: exINT_Mode = 0x08;
 11922  05D5  3008               	movlw	8
 11923  05D6  0020               	movlb	0	; select bank0
 11924  05D7  00E9               	movwf	??_Decode_RS232_CMD
 11925  05D8  0869               	movf	??_Decode_RS232_CMD,w
 11926  05D9  0021               	movlb	1	; select bank1
 11927  05DA  00EF               	movwf	_exINT_Mode^(0+128)
 11928                           
 11929                           ;main.c: 990: }
 11930  05DB  0008               	return
 11931  05DC                     l7562:	
 11932                           
 11933                           ;main.c: 996: else if(*(BStr+0) == 'X')
 11934  05DC  0020               	movlb	0	; select bank0
 11935  05DD  086D               	movf	Decode_RS232_CMD@BStr,w
 11936  05DE  0086               	movwf	6
 11937  05DF  3002               	movlw	2	; select bank4/5
 11938  05E0  0087               	movwf	7
 11939  05E1  3058               	movlw	88
 11940  05E2  0601               	xorwf	1,w
 11941  05E3  1D03               	btfss	3,2
 11942  05E4  2E94               	goto	l7590
 11943                           
 11944                           ;main.c: 997: {
 11945                           ;main.c: 998: MT_LoopTime = *(BStr+1) - '0';
 11946  05E5  0A6D               	incf	Decode_RS232_CMD@BStr,w
 11947  05E6  0086               	movwf	6
 11948  05E7  3002               	movlw	2	; select bank4/5
 11949  05E8  0087               	movwf	7
 11950  05E9  0801               	movf	1,w
 11951  05EA  3ED0               	addlw	208
 11952  05EB  00E9               	movwf	??_Decode_RS232_CMD
 11953  05EC  0869               	movf	??_Decode_RS232_CMD,w
 11954  05ED  0021               	movlb	1	; select bank1
 11955  05EE  00EE               	movwf	_MT_LoopTime^(0+128)
 11956                           
 11957                           ;main.c: 999: MT_SecTime = (*(BStr+2) - '0') * 1000;
 11958  05EF  0020               	movlb	0	; select bank0
 11959  05F0  086D               	movf	Decode_RS232_CMD@BStr,w
 11960  05F1  3E02               	addlw	2
 11961  05F2  0086               	movwf	6
 11962  05F3  3002               	movlw	2	; select bank4/5
 11963  05F4  0087               	movwf	7
 11964  05F5  0801               	movf	1,w
 11965  05F6  3ED0               	addlw	208
 11966  05F7  00F2               	movwf	___wmul@multiplier
 11967  05F8  30FF               	movlw	255
 11968  05F9  1803               	skipnc
 11969  05FA  3000               	movlw	0
 11970  05FB  00F3               	movwf	___wmul@multiplier+1
 11971  05FC  30E8               	movlw	232
 11972  05FD  00F4               	movwf	___wmul@multiplicand
 11973  05FE  3003               	movlw	3
 11974  05FF  00F5               	movwf	___wmul@multiplicand+1
 11975  0600  319A  223B  3180   	fcall	___wmul
 11976  0603  0873               	movf	?___wmul+1,w
 11977  0604  0022               	movlb	2	; select bank2
 11978  0605  00C3               	movwf	(_MT_SecTime+1)^(0+256)
 11979  0606  0872               	movf	?___wmul,w
 11980  0607  00C2               	movwf	_MT_SecTime^(0+256)
 11981                           
 11982                           ;main.c: 1000: MT_SecTime += (*(BStr+3) - '0') * 100;
 11983  0608  0020               	movlb	0	; select bank0
 11984  0609  086D               	movf	Decode_RS232_CMD@BStr,w
 11985  060A  3E03               	addlw	3
 11986  060B  0086               	movwf	6
 11987  060C  3002               	movlw	2	; select bank4/5
 11988  060D  0087               	movwf	7
 11989  060E  0801               	movf	1,w
 11990  060F  3ED0               	addlw	208
 11991  0610  00F2               	movwf	___wmul@multiplier
 11992  0611  30FF               	movlw	255
 11993  0612  1803               	skipnc
 11994  0613  3000               	movlw	0
 11995  0614  00F3               	movwf	___wmul@multiplier+1
 11996  0615  3064               	movlw	100
 11997  0616  00F4               	movwf	___wmul@multiplicand
 11998  0617  3000               	movlw	0
 11999  0618  00F5               	movwf	___wmul@multiplicand+1
 12000  0619  319A  223B  3180   	fcall	___wmul
 12001  061C  0872               	movf	?___wmul,w
 12002  061D  0022               	movlb	2	; select bank2
 12003  061E  07C2               	addwf	_MT_SecTime^(0+256),f
 12004  061F  0873               	movf	?___wmul+1,w
 12005  0620  3DC3               	addwfc	(_MT_SecTime+1)^(0+256),f
 12006                           
 12007                           ;main.c: 1001: MT_SecTime += (*(BStr+4) - '0') * 10;
 12008  0621  0020               	movlb	0	; select bank0
 12009  0622  086D               	movf	Decode_RS232_CMD@BStr,w
 12010  0623  3E04               	addlw	4
 12011  0624  0086               	movwf	6
 12012  0625  3002               	movlw	2	; select bank4/5
 12013  0626  0087               	movwf	7
 12014  0627  0801               	movf	1,w
 12015  0628  3ED0               	addlw	208
 12016  0629  00F2               	movwf	___wmul@multiplier
 12017  062A  30FF               	movlw	255
 12018  062B  1803               	skipnc
 12019  062C  3000               	movlw	0
 12020  062D  00F3               	movwf	___wmul@multiplier+1
 12021  062E  300A               	movlw	10
 12022  062F  00F4               	movwf	___wmul@multiplicand
 12023  0630  3000               	movlw	0
 12024  0631  00F5               	movwf	___wmul@multiplicand+1
 12025  0632  319A  223B  3180   	fcall	___wmul
 12026  0635  0872               	movf	?___wmul,w
 12027  0636  0022               	movlb	2	; select bank2
 12028  0637  07C2               	addwf	_MT_SecTime^(0+256),f
 12029  0638  0873               	movf	?___wmul+1,w
 12030  0639  3DC3               	addwfc	(_MT_SecTime+1)^(0+256),f
 12031                           
 12032                           ;main.c: 1002: MT_SecTime += *(BStr+5) - '0';
 12033  063A  0020               	movlb	0	; select bank0
 12034  063B  086D               	movf	Decode_RS232_CMD@BStr,w
 12035  063C  3E05               	addlw	5
 12036  063D  0086               	movwf	6
 12037  063E  3002               	movlw	2	; select bank4/5
 12038  063F  0087               	movwf	7
 12039  0640  0801               	movf	1,w
 12040  0641  3ED0               	addlw	208
 12041  0642  00E9               	movwf	??_Decode_RS232_CMD
 12042  0643  30FF               	movlw	255
 12043  0644  1803               	skipnc
 12044  0645  3000               	movlw	0
 12045  0646  00EA               	movwf	??_Decode_RS232_CMD+1
 12046  0647  0869               	movf	??_Decode_RS232_CMD,w
 12047  0648  0022               	movlb	2	; select bank2
 12048  0649  07C2               	addwf	_MT_SecTime^(0+256),f
 12049  064A  0020               	movlb	0	; select bank0
 12050  064B  086A               	movf	??_Decode_RS232_CMD+1,w
 12051  064C  0022               	movlb	2	; select bank2
 12052  064D  3DC3               	addwfc	(_MT_SecTime+1)^(0+256),f
 12053                           
 12054                           ;main.c: 1004: print_RTC();
 12055  064E  3193  23EA  3180   	fcall	_print_RTC
 12056                           
 12057                           ;main.c: 1005: Print_CHLN();
 12058  0651  3199  211C  3180   	fcall	_Print_CHLN
 12059                           
 12060                           ;main.c: 1007: Print_String("Loop =  $", 0);
 12061  0654  30D0               	movlw	low (STR_25| (0+32768))
 12062  0655  00F4               	movwf	Print_String@BStr
 12063  0656  3092               	movlw	high (STR_25| (0+32768))
 12064  0657  00F5               	movwf	Print_String@BStr+1
 12065  0658  01F6               	clrf	Print_String@chln
 12066  0659  319B  238A  3180   	fcall	_Print_String
 12067                           
 12068                           ;main.c: 1008: Print_uint16Str(MT_LoopTime,0);
 12069  065C  0021               	movlb	1	; select bank1
 12070  065D  086E               	movf	_MT_LoopTime^(0+128),w
 12071  065E  0020               	movlb	0	; select bank0
 12072  065F  00E9               	movwf	??_Decode_RS232_CMD
 12073  0660  01EA               	clrf	??_Decode_RS232_CMD+1
 12074  0661  0869               	movf	??_Decode_RS232_CMD,w
 12075  0662  00A0               	movwf	Print_uint16Str@InputVol
 12076  0663  086A               	movf	??_Decode_RS232_CMD+1,w
 12077  0664  00A1               	movwf	Print_uint16Str@InputVol+1
 12078  0665  01A2               	clrf	Print_uint16Str@Chgln
 12079  0666  3196  2655  3180   	fcall	_Print_uint16Str
 12080                           
 12081                           ;main.c: 1009: Print_String(", Time =  $", 0);
 12082  0669  30A2               	movlw	low (STR_26| (0+32768))
 12083  066A  00F4               	movwf	Print_String@BStr
 12084  066B  3092               	movlw	high (STR_26| (0+32768))
 12085  066C  00F5               	movwf	Print_String@BStr+1
 12086  066D  01F6               	clrf	Print_String@chln
 12087  066E  319B  238A  3180   	fcall	_Print_String
 12088                           
 12089                           ;main.c: 1010: Print_uint16Str(MT_SecTime,1);
 12090  0671  0022               	movlb	2	; select bank2
 12091  0672  0843               	movf	(_MT_SecTime+1)^(0+256),w
 12092  0673  0020               	movlb	0	; select bank0
 12093  0674  00A1               	movwf	Print_uint16Str@InputVol+1
 12094  0675  0022               	movlb	2	; select bank2
 12095  0676  0842               	movf	_MT_SecTime^(0+256),w
 12096  0677  0020               	movlb	0	; select bank0
 12097  0678  00A0               	movwf	Print_uint16Str@InputVol
 12098  0679  01A2               	clrf	Print_uint16Str@Chgln
 12099  067A  0AA2               	incf	Print_uint16Str@Chgln,f
 12100  067B  3196  2655  3180   	fcall	_Print_uint16Str
 12101                           
 12102                           ;main.c: 1012: Print_String("Test Read PH $", 1);
 12103  067E  305C               	movlw	low (STR_27| (0+32768))
 12104  067F  00F4               	movwf	Print_String@BStr
 12105  0680  3092               	movlw	high (STR_27| (0+32768))
 12106  0681  00F5               	movwf	Print_String@BStr+1
 12107  0682  01F6               	clrf	Print_String@chln
 12108  0683  0AF6               	incf	Print_String@chln,f
 12109  0684  319B  238A         	fcall	_Print_String
 12110                           
 12111                           ;main.c: 1013: Flag_Mesure_Test = (1-Flag_Mesure_Test);
 12112  0686  0021               	movlb	1	; select bank1
 12113  0687  0363               	decf	_Flag_Mesure_Test^(0+128),w
 12114  0688  3AFF               	xorlw	255
 12115  0689  3E01               	addlw	1
 12116  068A  0020               	movlb	0	; select bank0
 12117  068B  00E9               	movwf	??_Decode_RS232_CMD
 12118  068C  0869               	movf	??_Decode_RS232_CMD,w
 12119  068D  0021               	movlb	1	; select bank1
 12120  068E  00E3               	movwf	_Flag_Mesure_Test^(0+128)
 12121                           
 12122                           ;main.c: 1014: Loop_Mesure_Test = 0;
 12123  068F  0022               	movlb	2	; select bank2
 12124  0690  01D1               	clrf	_Loop_Mesure_Test^(0+256)
 12125                           
 12126                           ;main.c: 1015: OneCount_MT = 0;
 12127  0691  01C6               	clrf	_OneCount_MT^(0+256)
 12128  0692  01C7               	clrf	(_OneCount_MT+1)^(0+256)
 12129                           
 12130                           ;main.c: 1016: }
 12131  0693  0008               	return
 12132  0694                     l7590:	
 12133                           
 12134                           ;main.c: 1022: else if(*(BStr+0) == 'Y')
 12135  0694  0020               	movlb	0	; select bank0
 12136  0695  086D               	movf	Decode_RS232_CMD@BStr,w
 12137  0696  0086               	movwf	6
 12138  0697  3002               	movlw	2	; select bank4/5
 12139  0698  0087               	movwf	7
 12140  0699  3059               	movlw	89
 12141  069A  0601               	xorwf	1,w
 12142  069B  1D03               	btfss	3,2
 12143  069C  2EAC               	goto	l7598
 12144                           
 12145                           ;main.c: 1023: {
 12146                           ;main.c: 1024: Print_CHLN();
 12147  069D  3199  211C  3180   	fcall	_Print_CHLN
 12148                           
 12149                           ;main.c: 1025: Print_String("Test I2C Write Adruino $", 1);
 12150  06A0  30E6               	movlw	low (STR_28| (0+32768))
 12151  06A1  00F4               	movwf	Print_String@BStr
 12152  06A2  3090               	movlw	high (STR_28| (0+32768))
 12153  06A3  00F5               	movwf	Print_String@BStr+1
 12154  06A4  01F6               	clrf	Print_String@chln
 12155  06A5  0AF6               	incf	Print_String@chln,f
 12156  06A6  319B  238A  3180   	fcall	_Print_String
 12157                           
 12158                           ;main.c: 1026: I2C_TEST_10();
 12159  06A9  3187  27A9         	fcall	_I2C_TEST_10
 12160                           
 12161                           ;main.c: 1027: }
 12162  06AB  0008               	return
 12163  06AC                     l7598:	
 12164                           
 12165                           ;main.c: 1033: else if(*(BStr+0) == 'Z')
 12166  06AC  0020               	movlb	0	; select bank0
 12167  06AD  086D               	movf	Decode_RS232_CMD@BStr,w
 12168  06AE  0086               	movwf	6
 12169  06AF  3002               	movlw	2	; select bank4/5
 12170  06B0  0087               	movwf	7
 12171  06B1  305A               	movlw	90
 12172  06B2  0601               	xorwf	1,w
 12173  06B3  1D03               	btfss	3,2
 12174  06B4  0008               	return
 12175                           
 12176                           ;main.c: 1034: {
 12177                           ;main.c: 1035: Print_CHLN();
 12178  06B5  3199  211C  3180   	fcall	_Print_CHLN
 12179                           
 12180                           ;main.c: 1036: Print_String("Test I2C EEPROM Write Read... $", 1);
 12181  06B8  308E               	movlw	low (STR_29| (0+32768))
 12182  06B9  00F4               	movwf	Print_String@BStr
 12183  06BA  3090               	movlw	high (STR_29| (0+32768))
 12184  06BB  00F5               	movwf	Print_String@BStr+1
 12185  06BC  01F6               	clrf	Print_String@chln
 12186  06BD  0AF6               	incf	Print_String@chln,f
 12187  06BE  319B  238A  3180   	fcall	_Print_String
 12188                           
 12189                           ;main.c: 1037: I2C_TEST_02();
 12190  06C1  3188  2002         	fcall	_I2C_TEST_02
 12191  06C3  0008               	return
 12192  06C4                     __end_of_Decode_RS232_CMD:	
 12193                           
 12194                           	psect	text20
 12195  1A3B                     __ptext20:	
 12196 ;; *************** function ___wmul *****************
 12197 ;; Defined at:
 12198 ;;		line 15 in file "/Applications/microchip/xc8/v1.35/sources/common/Umul16.c"
 12199 ;; Parameters:    Size  Location     Type
 12200 ;;  multiplier      2    2[COMMON] unsigned int 
 12201 ;;  multiplicand    2    4[COMMON] unsigned int 
 12202 ;; Auto vars:     Size  Location     Type
 12203 ;;  product         2    6[COMMON] unsigned int 
 12204 ;; Return value:  Size  Location     Type
 12205 ;;                  2    2[COMMON] unsigned int 
 12206 ;; Registers used:
 12207 ;;		wreg, status,2, status,0
 12208 ;; Tracked objects:
 12209 ;;		On entry : 0/0
 12210 ;;		On exit  : 0/0
 12211 ;;		Unchanged: 0/0
 12212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12213 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12214 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12216 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12217 ;;Total ram usage:        6 bytes
 12218 ;; Hardware stack levels used:    1
 12219 ;; Hardware stack levels required when called:    3
 12220 ;; This function calls:
 12221 ;;		Nothing
 12222 ;; This function is called by:
 12223 ;;		_main
 12224 ;;		_Decode_RS232_CMD
 12225 ;;		_PIC_SYNC_ADO_RTC
 12226 ;;		_Save_QMD_EEPROM
 12227 ;;		_Load_QMD_EEPROM
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           
 12232                           ;psect for function ___wmul
 12233  1A3B                     ___wmul:	
 12234                           
 12235                           ;incstack = 0
 12236                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12237  1A3B  01F6               	clrf	___wmul@product
 12238  1A3C  01F7               	clrf	___wmul@product+1
 12239  1A3D                     l5408:	
 12240  1A3D  1C72               	btfss	___wmul@multiplier,0
 12241  1A3E  2A43               	goto	l1266
 12242  1A3F  0874               	movf	___wmul@multiplicand,w
 12243  1A40  07F6               	addwf	___wmul@product,f
 12244  1A41  0875               	movf	___wmul@multiplicand+1,w
 12245  1A42  3DF7               	addwfc	___wmul@product+1,f
 12246  1A43                     l1266:	
 12247  1A43  3001               	movlw	1
 12248  1A44                     u5115:	
 12249  1A44  35F4               	lslf	___wmul@multiplicand,f
 12250  1A45  0DF5               	rlf	___wmul@multiplicand+1,f
 12251  1A46  0B89               	decfsz	9,f
 12252  1A47  2A44               	goto	u5115
 12253  1A48  3001               	movlw	1
 12254  1A49                     u5125:	
 12255  1A49  36F3               	lsrf	___wmul@multiplier+1,f
 12256  1A4A  0CF2               	rrf	___wmul@multiplier,f
 12257  1A4B  0B89               	decfsz	9,f
 12258  1A4C  2A49               	goto	u5125
 12259  1A4D  0872               	movf	___wmul@multiplier,w
 12260  1A4E  0473               	iorwf	___wmul@multiplier+1,w
 12261  1A4F  1D03               	btfss	3,2
 12262  1A50  2A3D               	goto	l5408
 12263  1A51  0877               	movf	___wmul@product+1,w
 12264  1A52  00F3               	movwf	?___wmul+1
 12265  1A53  0876               	movf	___wmul@product,w
 12266  1A54  00F2               	movwf	?___wmul
 12267  1A55  0008               	return
 12268  1A56                     __end_of___wmul:	
 12269                           
 12270                           	psect	text21
 12271  06C4                     __ptext21:	
 12272 ;; *************** function _UPLOAD_MESURE_REC *****************
 12273 ;; Defined at:
 12274 ;;		line 1290 in file "main.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;		None
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;  BufferString   26   46[BANK0 ] unsigned char [26]
 12279 ;;  LoopA           1   45[BANK0 ] unsigned char 
 12280 ;; Return value:  Size  Location     Type
 12281 ;;		None               void
 12282 ;; Registers used:
 12283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12290 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12291 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12292 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12293 ;;Total ram usage:       29 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    7
 12296 ;; This function calls:
 12297 ;;		_Convert_HMS
 12298 ;;		_Convert_YMD
 12299 ;;		_DS18B20_GetTemp
 12300 ;;		_I2C_mWrite
 12301 ;; This function is called by:
 12302 ;;		_main
 12303 ;;		_Decode_RS232_CMD
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           
 12308                           ;psect for function _UPLOAD_MESURE_REC
 12309  06C4                     _UPLOAD_MESURE_REC:	
 12310                           
 12311                           ;main.c: 1292: uint8_t LoopA = 0;
 12312                           
 12313                           ;incstack = 0
 12314                           ; Regs used in _UPLOAD_MESURE_REC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12315  06C4  0020               	movlb	0	; select bank0
 12316  06C5  01CD               	clrf	UPLOAD_MESURE_REC@LoopA
 12317                           
 12318                           ;main.c: 1295: uint8_t BufferString[26] = {
 12319                           ;main.c: 1296: 0x01,
 12320                           ;main.c: 1297: 0x60,
 12321                           ;main.c: 1298: 0x17,
 12322                           ;main.c: 1299: 0x20,0x16,0x01,0x26,0x12,0x34,0x56,
 12323                           ;main.c: 1300: 0x01,0x11,
 12324                           ;main.c: 1301: 0x02,0x22,
 12325                           ;main.c: 1302: 0x03,0x33,
 12326                           ;main.c: 1303: 0x04,0x44,
 12327                           ;main.c: 1304: 0x05,0x55,
 12328                           ;main.c: 1305: 0x06,0x66,
 12329                           ;main.c: 1306: 0x07,0x77,
 12330                           ;main.c: 1307: 0x08,0x88 };
 12331  06C6  30A0               	movlw	low UPLOAD_MESURE_REC@F7910
 12332  06C7  0086               	movwf	6
 12333  06C8  3002               	movlw	high UPLOAD_MESURE_REC@F7910
 12334  06C9  0087               	movwf	7
 12335  06CA  304E               	movlw	low UPLOAD_MESURE_REC@BufferString
 12336  06CB  0084               	movwf	4
 12337  06CC  3000               	movlw	high UPLOAD_MESURE_REC@BufferString
 12338  06CD  0085               	movwf	5
 12339  06CE  301A               	movlw	26
 12340  06CF  00CB               	movwf	??_UPLOAD_MESURE_REC
 12341  06D0                     u7700:	
 12342  06D0  0016               	moviw fsr1++
 12343  06D1  001A               	movwi fsr0++
 12344  06D2  0BCB               	decfsz	??_UPLOAD_MESURE_REC,f
 12345  06D3  2ED0               	goto	u7700
 12346                           
 12347                           ;main.c: 1313: if(FirstTimeSetup == 0)
 12348  06D4  0022               	movlb	2	; select bank2
 12349  06D5  084C               	movf	_FirstTimeSetup^(0+256),w
 12350  06D6  1903               	btfsc	3,2
 12351  06D7  0008               	return
 12352                           
 12353                           ;main.c: 1318: Convert_HMS(RTC_SecCount, &RTC_Clock);
 12354                           
 12355                           ;main.c: 1314: return;
 12356  06D8  0021               	movlb	1	; select bank1
 12357  06D9  0862               	movf	(_RTC_SecCount+3)^(0+128),w
 12358  06DA  0020               	movlb	0	; select bank0
 12359  06DB  00AD               	movwf	Convert_HMS@iCount+3
 12360  06DC  0021               	movlb	1	; select bank1
 12361  06DD  0861               	movf	(_RTC_SecCount+2)^(0+128),w
 12362  06DE  0020               	movlb	0	; select bank0
 12363  06DF  00AC               	movwf	Convert_HMS@iCount+2
 12364  06E0  0021               	movlb	1	; select bank1
 12365  06E1  0860               	movf	(_RTC_SecCount+1)^(0+128),w
 12366  06E2  0020               	movlb	0	; select bank0
 12367  06E3  00AB               	movwf	Convert_HMS@iCount+1
 12368  06E4  0021               	movlb	1	; select bank1
 12369  06E5  085F               	movf	_RTC_SecCount^(0+128),w
 12370  06E6  0020               	movlb	0	; select bank0
 12371  06E7  00AA               	movwf	Convert_HMS@iCount
 12372  06E8  3057               	movlw	(low (_RTC_Clock| (0+256)))& (0+255)
 12373  06E9  00CB               	movwf	??_UPLOAD_MESURE_REC
 12374  06EA  084B               	movf	??_UPLOAD_MESURE_REC,w
 12375  06EB  00AE               	movwf	Convert_HMS@rClock
 12376  06EC  3196  26C9  3186   	fcall	_Convert_HMS
 12377                           
 12378                           ;main.c: 1319: Convert_YMD(RTC_DayCount, &RTC_Clock);
 12379  06EF  0022               	movlb	2	; select bank2
 12380  06F0  0849               	movf	(_RTC_DayCount+1)^(0+256),w
 12381  06F1  0020               	movlb	0	; select bank0
 12382  06F2  00AB               	movwf	Convert_YMD@iCount+1
 12383  06F3  0022               	movlb	2	; select bank2
 12384  06F4  0848               	movf	_RTC_DayCount^(0+256),w
 12385  06F5  0020               	movlb	0	; select bank0
 12386  06F6  00AA               	movwf	Convert_YMD@iCount
 12387  06F7  3057               	movlw	(low (_RTC_Clock| (0+256)))& (0+255)
 12388  06F8  00CB               	movwf	??_UPLOAD_MESURE_REC
 12389  06F9  084B               	movf	??_UPLOAD_MESURE_REC,w
 12390  06FA  00AC               	movwf	Convert_YMD@rClock
 12391  06FB  3195  25E2  3186   	fcall	_Convert_YMD
 12392                           
 12393                           ;main.c: 1321: BufferString[3] = 0x20;
 12394  06FE  3020               	movlw	32
 12395  06FF  0020               	movlb	0	; select bank0
 12396  0700  00CB               	movwf	??_UPLOAD_MESURE_REC
 12397  0701  084B               	movf	??_UPLOAD_MESURE_REC,w
 12398  0702  00D1               	movwf	UPLOAD_MESURE_REC@BufferString+3
 12399                           
 12400                           ;main.c: 1322: BufferString[4] = RTC_Clock.RTC_Year;
 12401  0703  0022               	movlb	2	; select bank2
 12402  0704  0857               	movf	_RTC_Clock^(0+256),w
 12403  0705  0020               	movlb	0	; select bank0
 12404  0706  00CB               	movwf	??_UPLOAD_MESURE_REC
 12405  0707  084B               	movf	??_UPLOAD_MESURE_REC,w
 12406  0708  00D2               	movwf	UPLOAD_MESURE_REC@BufferString+4
 12407                           
 12408                           ;main.c: 1323: BufferString[5] = RTC_Clock.RTC_Month;
 12409  0709  0022               	movlb	2	; select bank2
 12410  070A  0858               	movf	(_RTC_Clock^(0+256)+1),w
 12411  070B  0020               	movlb	0	; select bank0
 12412  070C  00CB               	movwf	??_UPLOAD_MESURE_REC
 12413  070D  084B               	movf	??_UPLOAD_MESURE_REC,w
 12414  070E  00D3               	movwf	UPLOAD_MESURE_REC@BufferString+5
 12415                           
 12416                           ;main.c: 1324: BufferString[6] = RTC_Clock.RTC_Day;
 12417  070F  0022               	movlb	2	; select bank2
 12418  0710  0859               	movf	(_RTC_Clock^(0+256)+2),w
 12419  0711  0020               	movlb	0	; select bank0
 12420  0712  00CB               	movwf	??_UPLOAD_MESURE_REC
 12421  0713  084B               	movf	??_UPLOAD_MESURE_REC,w
 12422  0714  00D4               	movwf	UPLOAD_MESURE_REC@BufferString+6
 12423                           
 12424                           ;main.c: 1325: BufferString[7] = RTC_Clock.RTC_Hour;
 12425  0715  0022               	movlb	2	; select bank2
 12426  0716  085A               	movf	(_RTC_Clock^(0+256)+3),w
 12427  0717  0020               	movlb	0	; select bank0
 12428  0718  00CB               	movwf	??_UPLOAD_MESURE_REC
 12429  0719  084B               	movf	??_UPLOAD_MESURE_REC,w
 12430  071A  00D5               	movwf	UPLOAD_MESURE_REC@BufferString+7
 12431                           
 12432                           ;main.c: 1326: BufferString[8] = RTC_Clock.RTC_Min;
 12433  071B  0022               	movlb	2	; select bank2
 12434  071C  085B               	movf	(_RTC_Clock^(0+256)+4),w
 12435  071D  0020               	movlb	0	; select bank0
 12436  071E  00CB               	movwf	??_UPLOAD_MESURE_REC
 12437  071F  084B               	movf	??_UPLOAD_MESURE_REC,w
 12438  0720  00D6               	movwf	UPLOAD_MESURE_REC@BufferString+8
 12439                           
 12440                           ;main.c: 1327: BufferString[9] = RTC_Clock.RTC_Sec;
 12441  0721  0022               	movlb	2	; select bank2
 12442  0722  085C               	movf	(_RTC_Clock^(0+256)+5),w
 12443  0723  0020               	movlb	0	; select bank0
 12444  0724  00CB               	movwf	??_UPLOAD_MESURE_REC
 12445  0725  084B               	movf	??_UPLOAD_MESURE_REC,w
 12446  0726  00D7               	movwf	UPLOAD_MESURE_REC@BufferString+9
 12447                           
 12448                           ;main.c: 1330: DS18B20_GetTemp(BufferGetTemp);
 12449  0727  305D               	movlw	(low (_BufferGetTemp| (0+256)))& (0+255)
 12450  0728  3188  2090  3186   	fcall	_DS18B20_GetTemp
 12451                           
 12452                           ;main.c: 1332: BufferString[10] = *(BufferGetTemp+0);
 12453  072B  0022               	movlb	2	; select bank2
 12454  072C  085D               	movf	_BufferGetTemp^(0+256),w
 12455  072D  0020               	movlb	0	; select bank0
 12456  072E  00CB               	movwf	??_UPLOAD_MESURE_REC
 12457  072F  084B               	movf	??_UPLOAD_MESURE_REC,w
 12458  0730  00D8               	movwf	UPLOAD_MESURE_REC@BufferString+10
 12459                           
 12460                           ;main.c: 1333: BufferString[11] = *(BufferGetTemp+1);
 12461  0731  0022               	movlb	2	; select bank2
 12462  0732  085E               	movf	(_BufferGetTemp^(0+256)+1),w
 12463  0733  0020               	movlb	0	; select bank0
 12464  0734  00CB               	movwf	??_UPLOAD_MESURE_REC
 12465  0735  084B               	movf	??_UPLOAD_MESURE_REC,w
 12466  0736  00D9               	movwf	UPLOAD_MESURE_REC@BufferString+11
 12467                           
 12468                           ;main.c: 1343: BufferString[12] = REC_METER_VAL.Rec_NH3 / 256;
 12469  0737  0022               	movlb	2	; select bank2
 12470  0738  0823               	movf	((_REC_METER_VAL+1)^(0+256)+2),w
 12471  0739  0020               	movlb	0	; select bank0
 12472  073A  00CB               	movwf	??_UPLOAD_MESURE_REC
 12473  073B  084B               	movf	??_UPLOAD_MESURE_REC,w
 12474  073C  00DA               	movwf	UPLOAD_MESURE_REC@BufferString+12
 12475                           
 12476                           ;main.c: 1344: BufferString[13] = REC_METER_VAL.Rec_NH3 % 256;
 12477  073D  0022               	movlb	2	; select bank2
 12478  073E  0822               	movf	(_REC_METER_VAL^(0+256)+2),w
 12479  073F  0020               	movlb	0	; select bank0
 12480  0740  00CB               	movwf	??_UPLOAD_MESURE_REC
 12481  0741  084B               	movf	??_UPLOAD_MESURE_REC,w
 12482  0742  00DB               	movwf	UPLOAD_MESURE_REC@BufferString+13
 12483                           
 12484                           ;main.c: 1348: BufferString[14] = REC_METER_VAL.Rec_PH / 256;
 12485  0743  0022               	movlb	2	; select bank2
 12486  0744  0825               	movf	((_REC_METER_VAL+1)^(0+256)+4),w
 12487  0745  0020               	movlb	0	; select bank0
 12488  0746  00CB               	movwf	??_UPLOAD_MESURE_REC
 12489  0747  084B               	movf	??_UPLOAD_MESURE_REC,w
 12490  0748  00DC               	movwf	UPLOAD_MESURE_REC@BufferString+14
 12491                           
 12492                           ;main.c: 1349: BufferString[15] = REC_METER_VAL.Rec_PH % 256;
 12493  0749  0022               	movlb	2	; select bank2
 12494  074A  0824               	movf	(_REC_METER_VAL^(0+256)+4),w
 12495  074B  0020               	movlb	0	; select bank0
 12496  074C  00CB               	movwf	??_UPLOAD_MESURE_REC
 12497  074D  084B               	movf	??_UPLOAD_MESURE_REC,w
 12498  074E  00DD               	movwf	UPLOAD_MESURE_REC@BufferString+15
 12499                           
 12500                           ;main.c: 1351: BufferString[16] = REC_METER_VAL.Rec_TDS / 256;
 12501  074F  0022               	movlb	2	; select bank2
 12502  0750  0827               	movf	((_REC_METER_VAL+1)^(0+256)+6),w
 12503  0751  0020               	movlb	0	; select bank0
 12504  0752  00CB               	movwf	??_UPLOAD_MESURE_REC
 12505  0753  084B               	movf	??_UPLOAD_MESURE_REC,w
 12506  0754  00DE               	movwf	UPLOAD_MESURE_REC@BufferString+16
 12507                           
 12508                           ;main.c: 1352: BufferString[17] = REC_METER_VAL.Rec_TDS % 256;
 12509  0755  0022               	movlb	2	; select bank2
 12510  0756  0826               	movf	(_REC_METER_VAL^(0+256)+6),w
 12511  0757  0020               	movlb	0	; select bank0
 12512  0758  00CB               	movwf	??_UPLOAD_MESURE_REC
 12513  0759  084B               	movf	??_UPLOAD_MESURE_REC,w
 12514  075A  00DF               	movwf	UPLOAD_MESURE_REC@BufferString+17
 12515                           
 12516                           ;main.c: 1354: BufferString[18] = REC_METER_VAL.Rec_HGca / 256;
 12517  075B  0022               	movlb	2	; select bank2
 12518  075C  0829               	movf	((_REC_METER_VAL+1)^(0+256)+8),w
 12519  075D  0020               	movlb	0	; select bank0
 12520  075E  00CB               	movwf	??_UPLOAD_MESURE_REC
 12521  075F  084B               	movf	??_UPLOAD_MESURE_REC,w
 12522  0760  00E0               	movwf	UPLOAD_MESURE_REC@BufferString+18
 12523                           
 12524                           ;main.c: 1355: BufferString[19] = REC_METER_VAL.Rec_HGca % 256;
 12525  0761  0022               	movlb	2	; select bank2
 12526  0762  0828               	movf	(_REC_METER_VAL^(0+256)+8),w
 12527  0763  0020               	movlb	0	; select bank0
 12528  0764  00CB               	movwf	??_UPLOAD_MESURE_REC
 12529  0765  084B               	movf	??_UPLOAD_MESURE_REC,w
 12530  0766  00E1               	movwf	UPLOAD_MESURE_REC@BufferString+19
 12531                           
 12532                           ;main.c: 1357: BufferString[20] = REC_METER_VAL.Rec_GHmg / 256;
 12533  0767  0022               	movlb	2	; select bank2
 12534  0768  082B               	movf	((_REC_METER_VAL+1)^(0+256)+10),w
 12535  0769  0020               	movlb	0	; select bank0
 12536  076A  00CB               	movwf	??_UPLOAD_MESURE_REC
 12537  076B  084B               	movf	??_UPLOAD_MESURE_REC,w
 12538  076C  00E2               	movwf	UPLOAD_MESURE_REC@BufferString+20
 12539                           
 12540                           ;main.c: 1358: BufferString[21] = REC_METER_VAL.Rec_GHmg % 256;
 12541  076D  0022               	movlb	2	; select bank2
 12542  076E  082A               	movf	(_REC_METER_VAL^(0+256)+10),w
 12543  076F  0020               	movlb	0	; select bank0
 12544  0770  00CB               	movwf	??_UPLOAD_MESURE_REC
 12545  0771  084B               	movf	??_UPLOAD_MESURE_REC,w
 12546  0772  00E3               	movwf	UPLOAD_MESURE_REC@BufferString+21
 12547                           
 12548                           ;main.c: 1360: BufferString[22] = REC_METER_VAL.Rec_DO / 256;
 12549  0773  0022               	movlb	2	; select bank2
 12550  0774  082D               	movf	((_REC_METER_VAL+1)^(0+256)+12),w
 12551  0775  0020               	movlb	0	; select bank0
 12552  0776  00CB               	movwf	??_UPLOAD_MESURE_REC
 12553  0777  084B               	movf	??_UPLOAD_MESURE_REC,w
 12554  0778  00E4               	movwf	UPLOAD_MESURE_REC@BufferString+22
 12555                           
 12556                           ;main.c: 1361: BufferString[23] = REC_METER_VAL.Rec_DO % 256;
 12557  0779  0022               	movlb	2	; select bank2
 12558  077A  082C               	movf	(_REC_METER_VAL^(0+256)+12),w
 12559  077B  0020               	movlb	0	; select bank0
 12560  077C  00CB               	movwf	??_UPLOAD_MESURE_REC
 12561  077D  084B               	movf	??_UPLOAD_MESURE_REC,w
 12562  077E  00E5               	movwf	UPLOAD_MESURE_REC@BufferString+23
 12563                           
 12564                           ;main.c: 1363: BufferString[24] = REC_METER_VAL.Rec_ORP / 256;
 12565  077F  0022               	movlb	2	; select bank2
 12566  0780  082F               	movf	((_REC_METER_VAL+1)^(0+256)+14),w
 12567  0781  0020               	movlb	0	; select bank0
 12568  0782  00CB               	movwf	??_UPLOAD_MESURE_REC
 12569  0783  084B               	movf	??_UPLOAD_MESURE_REC,w
 12570  0784  00E6               	movwf	UPLOAD_MESURE_REC@BufferString+24
 12571                           
 12572                           ;main.c: 1364: BufferString[25] = REC_METER_VAL.Rec_ORP % 256;
 12573  0785  0022               	movlb	2	; select bank2
 12574  0786  082E               	movf	(_REC_METER_VAL^(0+256)+14),w
 12575  0787  0020               	movlb	0	; select bank0
 12576  0788  00CB               	movwf	??_UPLOAD_MESURE_REC
 12577  0789  084B               	movf	??_UPLOAD_MESURE_REC,w
 12578  078A  00E7               	movwf	UPLOAD_MESURE_REC@BufferString+25
 12579                           
 12580                           ;main.c: 1369: I2C_mWrite(BufferString, 26+1, 0x10);
 12581  078B  304E               	movlw	low UPLOAD_MESURE_REC@BufferString
 12582  078C  00F6               	movwf	I2C_mWrite@value
 12583  078D  3000               	movlw	high UPLOAD_MESURE_REC@BufferString
 12584  078E  00F7               	movwf	I2C_mWrite@value+1
 12585  078F  301B               	movlw	27
 12586  0790  00CB               	movwf	??_UPLOAD_MESURE_REC
 12587  0791  084B               	movf	??_UPLOAD_MESURE_REC,w
 12588  0792  00F8               	movwf	I2C_mWrite@Size
 12589  0793  3010               	movlw	16
 12590  0794  00CC               	movwf	??_UPLOAD_MESURE_REC+1
 12591  0795  084C               	movf	??_UPLOAD_MESURE_REC+1,w
 12592  0796  00F9               	movwf	I2C_mWrite@slave_addr
 12593  0797  319E  2683         	fcall	_I2C_mWrite
 12594                           
 12595                           ;main.c: 1372: MT_LoopTime = 1;
 12596  0799  0021               	movlb	1	; select bank1
 12597  079A  01EE               	clrf	_MT_LoopTime^(0+128)
 12598  079B  0AEE               	incf	_MT_LoopTime^(0+128),f
 12599                           
 12600                           ;main.c: 1373: MT_SecTime = 1;
 12601  079C  3001               	movlw	1
 12602  079D  0022               	movlb	2	; select bank2
 12603  079E  00C2               	movwf	_MT_SecTime^(0+256)
 12604  079F  3000               	movlw	0
 12605  07A0  00C3               	movwf	(_MT_SecTime^(0+256)+1)
 12606                           
 12607                           ;main.c: 1375: Flag_Mesure_Test = 1;
 12608  07A1  0021               	movlb	1	; select bank1
 12609  07A2  01E3               	clrf	_Flag_Mesure_Test^(0+128)
 12610  07A3  0AE3               	incf	_Flag_Mesure_Test^(0+128),f
 12611                           
 12612                           ;main.c: 1376: Loop_Mesure_Test = 0;
 12613  07A4  0022               	movlb	2	; select bank2
 12614  07A5  01D1               	clrf	_Loop_Mesure_Test^(0+256)
 12615                           
 12616                           ;main.c: 1377: OneCount_MT = 0;
 12617  07A6  01C6               	clrf	_OneCount_MT^(0+256)
 12618  07A7  01C7               	clrf	(_OneCount_MT+1)^(0+256)
 12619  07A8  0008               	return
 12620  07A9                     __end_of_UPLOAD_MESURE_REC:	
 12621                           
 12622                           	psect	text22
 12623  1C26                     __ptext22:	
 12624 ;; *************** function _TEST_PIC_ALL *****************
 12625 ;; Defined at:
 12626 ;;		line 1955 in file "main.c"
 12627 ;; Parameters:    Size  Location     Type
 12628 ;;		None
 12629 ;; Auto vars:     Size  Location     Type
 12630 ;;		None
 12631 ;; Return value:  Size  Location     Type
 12632 ;;		None               void
 12633 ;; Registers used:
 12634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12644 ;;Total ram usage:        0 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; Hardware stack levels required when called:    8
 12647 ;; This function calls:
 12648 ;;		_DS18B20_GetTemp
 12649 ;;		_Print_BreakLine
 12650 ;;		_Print_CHLN
 12651 ;;		_Print_String
 12652 ;;		_check_ADO_I2C
 12653 ;;		_print_RTC
 12654 ;; This function is called by:
 12655 ;;		_main
 12656 ;;		_Decode_RS232_CMD
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           
 12661                           ;psect for function _TEST_PIC_ALL
 12662  1C26                     _TEST_PIC_ALL:	
 12663                           
 12664                           ;main.c: 1957: Print_CHLN();
 12665                           
 12666                           ;incstack = 0
 12667                           ; Regs used in _TEST_PIC_ALL: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12668  1C26  3199  211C  319C   	fcall	_Print_CHLN
 12669                           
 12670                           ;main.c: 1959: Print_BreakLine();
 12671  1C29  319A  22AC  319C   	fcall	_Print_BreakLine
 12672                           
 12673                           ;main.c: 1961: Print_String("Akubic System Version: 1.10$", 1);
 12674  1C2C  30AE               	movlw	low (STR_40| (0+32768))
 12675  1C2D  00F4               	movwf	Print_String@BStr
 12676  1C2E  3090               	movlw	high (STR_40| (0+32768))
 12677  1C2F  00F5               	movwf	Print_String@BStr+1
 12678  1C30  01F6               	clrf	Print_String@chln
 12679  1C31  0AF6               	incf	Print_String@chln,f
 12680  1C32  319B  238A  319C   	fcall	_Print_String
 12681                           
 12682                           ;main.c: 1965: Print_String("Auto run self test$", 1);
 12683  1C35  30CD               	movlw	low (STR_41| (0+32768))
 12684  1C36  00F4               	movwf	Print_String@BStr
 12685  1C37  3091               	movlw	high (STR_41| (0+32768))
 12686  1C38  00F5               	movwf	Print_String@BStr+1
 12687  1C39  01F6               	clrf	Print_String@chln
 12688  1C3A  0AF6               	incf	Print_String@chln,f
 12689  1C3B  319B  238A  319C   	fcall	_Print_String
 12690                           
 12691                           ;main.c: 1967: print_RTC();
 12692  1C3E  3193  23EA  319C   	fcall	_print_RTC
 12693                           
 12694                           ;main.c: 1968: DS18B20_GetTemp(BufferGetTemp);
 12695  1C41  305D               	movlw	(low (_BufferGetTemp| (0+256)))& (0+255)
 12696  1C42  3188  2090  319C   	fcall	_DS18B20_GetTemp
 12697                           
 12698                           ;main.c: 1969: check_ADO_I2C();
 12699  1C45  3194  2449  319C   	fcall	_check_ADO_I2C
 12700                           
 12701                           ;main.c: 1971: Print_String("Check Finish$", 1);
 12702  1C48  3087               	movlw	low (STR_42| (0+32768))
 12703  1C49  00F4               	movwf	Print_String@BStr
 12704  1C4A  3092               	movlw	high (STR_42| (0+32768))
 12705  1C4B  00F5               	movwf	Print_String@BStr+1
 12706  1C4C  01F6               	clrf	Print_String@chln
 12707  1C4D  0AF6               	incf	Print_String@chln,f
 12708  1C4E  319B  238A  319C   	fcall	_Print_String
 12709                           
 12710                           ;main.c: 1972: Print_BreakLine();
 12711  1C51  319A  22AC         	fcall	_Print_BreakLine
 12712  1C53  0008               	return
 12713  1C54                     __end_of_TEST_PIC_ALL:	
 12714                           
 12715                           	psect	text23
 12716  13EA                     __ptext23:	
 12717 ;; *************** function _print_RTC *****************
 12718 ;; Defined at:
 12719 ;;		line 1980 in file "main.c"
 12720 ;; Parameters:    Size  Location     Type
 12721 ;;		None
 12722 ;; Auto vars:     Size  Location     Type
 12723 ;;		None
 12724 ;; Return value:  Size  Location     Type
 12725 ;;		None               void
 12726 ;; Registers used:
 12727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12728 ;; Tracked objects:
 12729 ;;		On entry : 0/0
 12730 ;;		On exit  : 0/0
 12731 ;;		Unchanged: 0/0
 12732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12736 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12737 ;;Total ram usage:        1 bytes
 12738 ;; Hardware stack levels used:    1
 12739 ;; Hardware stack levels required when called:    6
 12740 ;; This function calls:
 12741 ;;		_Convert_HMS
 12742 ;;		_Convert_YMD
 12743 ;;		_Print_CHLN
 12744 ;;		_Print_HMS
 12745 ;;		_Print_String
 12746 ;;		_Print_YMD
 12747 ;; This function is called by:
 12748 ;;		_Decode_RS232_CMD
 12749 ;;		_TEST_PIC_ALL
 12750 ;; This function uses a non-reentrant model
 12751 ;;
 12752                           
 12753                           
 12754                           ;psect for function _print_RTC
 12755  13EA                     _print_RTC:	
 12756                           
 12757                           ;main.c: 1982: Convert_YMD(RTC_DayCount, &RTC_Clock);
 12758                           
 12759                           ;incstack = 0
 12760                           ; Regs used in _print_RTC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12761  13EA  0022               	movlb	2	; select bank2
 12762  13EB  0849               	movf	(_RTC_DayCount+1)^(0+256),w
 12763  13EC  0020               	movlb	0	; select bank0
 12764  13ED  00AB               	movwf	Convert_YMD@iCount+1
 12765  13EE  0022               	movlb	2	; select bank2
 12766  13EF  0848               	movf	_RTC_DayCount^(0+256),w
 12767  13F0  0020               	movlb	0	; select bank0
 12768  13F1  00AA               	movwf	Convert_YMD@iCount
 12769  13F2  3057               	movlw	(low (_RTC_Clock| (0+256)))& (0+255)
 12770  13F3  00CB               	movwf	??_print_RTC
 12771  13F4  084B               	movf	??_print_RTC,w
 12772  13F5  00AC               	movwf	Convert_YMD@rClock
 12773  13F6  3195  25E2  3193   	fcall	_Convert_YMD
 12774                           
 12775                           ;main.c: 1983: Convert_HMS(RTC_SecCount, &RTC_Clock);
 12776  13F9  0021               	movlb	1	; select bank1
 12777  13FA  0862               	movf	(_RTC_SecCount+3)^(0+128),w
 12778  13FB  0020               	movlb	0	; select bank0
 12779  13FC  00AD               	movwf	Convert_HMS@iCount+3
 12780  13FD  0021               	movlb	1	; select bank1
 12781  13FE  0861               	movf	(_RTC_SecCount+2)^(0+128),w
 12782  13FF  0020               	movlb	0	; select bank0
 12783  1400  00AC               	movwf	Convert_HMS@iCount+2
 12784  1401  0021               	movlb	1	; select bank1
 12785  1402  0860               	movf	(_RTC_SecCount+1)^(0+128),w
 12786  1403  0020               	movlb	0	; select bank0
 12787  1404  00AB               	movwf	Convert_HMS@iCount+1
 12788  1405  0021               	movlb	1	; select bank1
 12789  1406  085F               	movf	_RTC_SecCount^(0+128),w
 12790  1407  0020               	movlb	0	; select bank0
 12791  1408  00AA               	movwf	Convert_HMS@iCount
 12792  1409  3057               	movlw	(low (_RTC_Clock| (0+256)))& (0+255)
 12793  140A  00CB               	movwf	??_print_RTC
 12794  140B  084B               	movf	??_print_RTC,w
 12795  140C  00AE               	movwf	Convert_HMS@rClock
 12796  140D  3196  26C9  3193   	fcall	_Convert_HMS
 12797                           
 12798                           ;main.c: 1985: Print_CHLN();
 12799  1410  3199  211C  3193   	fcall	_Print_CHLN
 12800                           
 12801                           ;main.c: 1986: Print_String("Check RTC = $", 0);
 12802  1413  306B               	movlw	low (STR_43| (0+32768))
 12803  1414  00F4               	movwf	Print_String@BStr
 12804  1415  3092               	movlw	high (STR_43| (0+32768))
 12805  1416  00F5               	movwf	Print_String@BStr+1
 12806  1417  01F6               	clrf	Print_String@chln
 12807  1418  319B  238A  3193   	fcall	_Print_String
 12808                           
 12809                           ;main.c: 1987: Print_YMD(RTC_Clock);
 12810  141B  3057               	movlw	low _RTC_Clock
 12811  141C  0086               	movwf	6
 12812  141D  3001               	movlw	high _RTC_Clock
 12813  141E  0087               	movwf	7
 12814  141F  3024               	movlw	low Print_YMD@rClock
 12815  1420  0084               	movwf	4
 12816  1421  3000               	movlw	high Print_YMD@rClock
 12817  1422  0085               	movwf	5
 12818  1423  3F40               	moviw [0]fsr1
 12819  1424  3F80               	movwi [0]fsr0
 12820  1425  3F41               	moviw [1]fsr1
 12821  1426  3F81               	movwi [1]fsr0
 12822  1427  3F42               	moviw [2]fsr1
 12823  1428  3F82               	movwi [2]fsr0
 12824  1429  3F43               	moviw [3]fsr1
 12825  142A  3F83               	movwi [3]fsr0
 12826  142B  3F44               	moviw [4]fsr1
 12827  142C  3F84               	movwi [4]fsr0
 12828  142D  3F45               	moviw [5]fsr1
 12829  142E  3F85               	movwi [5]fsr0
 12830  142F  3194  24AA  3193   	fcall	_Print_YMD
 12831                           
 12832                           ;main.c: 1988: Print_HMS(RTC_Clock);
 12833  1432  3057               	movlw	low _RTC_Clock
 12834  1433  0086               	movwf	6
 12835  1434  3001               	movlw	high _RTC_Clock
 12836  1435  0087               	movwf	7
 12837  1436  3024               	movlw	low Print_HMS@rClock
 12838  1437  0084               	movwf	4
 12839  1438  3000               	movlw	high Print_HMS@rClock
 12840  1439  0085               	movwf	5
 12841  143A  3F40               	moviw [0]fsr1
 12842  143B  3F80               	movwi [0]fsr0
 12843  143C  3F41               	moviw [1]fsr1
 12844  143D  3F81               	movwi [1]fsr0
 12845  143E  3F42               	moviw [2]fsr1
 12846  143F  3F82               	movwi [2]fsr0
 12847  1440  3F43               	moviw [3]fsr1
 12848  1441  3F83               	movwi [3]fsr0
 12849  1442  3F44               	moviw [4]fsr1
 12850  1443  3F84               	movwi [4]fsr0
 12851  1444  3F45               	moviw [5]fsr1
 12852  1445  3F85               	movwi [5]fsr0
 12853  1446  3193  238E         	fcall	_Print_HMS
 12854  1448  0008               	return
 12855  1449                     __end_of_print_RTC:	
 12856                           
 12857                           	psect	text24
 12858  14AA                     __ptext24:	
 12859 ;; *************** function _Print_YMD *****************
 12860 ;; Defined at:
 12861 ;;		line 1912 in file "main.c"
 12862 ;; Parameters:    Size  Location     Type
 12863 ;;  rClock          6    4[BANK0 ] struct .
 12864 ;; Auto vars:     Size  Location     Type
 12865 ;;		None
 12866 ;; Return value:  Size  Location     Type
 12867 ;;		None               void
 12868 ;; Registers used:
 12869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12870 ;; Tracked objects:
 12871 ;;		On entry : 0/0
 12872 ;;		On exit  : 0/0
 12873 ;;		Unchanged: 0/0
 12874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12875 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12877 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12878 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12879 ;;Total ram usage:        8 bytes
 12880 ;; Hardware stack levels used:    1
 12881 ;; Hardware stack levels required when called:    4
 12882 ;; This function calls:
 12883 ;;		_EUSART_Write
 12884 ;;		___awdiv
 12885 ;; This function is called by:
 12886 ;;		_print_RTC
 12887 ;; This function uses a non-reentrant model
 12888 ;;
 12889                           
 12890                           
 12891                           ;psect for function _Print_YMD
 12892  14AA                     _Print_YMD:	
 12893                           
 12894                           ;main.c: 1914: EUSART_Write('2');
 12895                           
 12896                           ;incstack = 0
 12897                           ; Regs used in _Print_YMD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12898  14AA  3032               	movlw	50
 12899  14AB  319B  2366  3194   	fcall	_EUSART_Write
 12900                           
 12901                           ;main.c: 1915: EUSART_Write('0');
 12902  14AE  3030               	movlw	48
 12903  14AF  319B  2366  3194   	fcall	_EUSART_Write
 12904                           
 12905                           ;main.c: 1916: EUSART_Write(0x30 + (rClock.RTC_Year / 16));
 12906  14B2  3010               	movlw	16
 12907  14B3  00F2               	movwf	___awdiv@divisor
 12908  14B4  3000               	movlw	0
 12909  14B5  00F3               	movwf	___awdiv@divisor+1
 12910  14B6  0020               	movlb	0	; select bank0
 12911  14B7  0824               	movf	Print_YMD@rClock,w
 12912  14B8  00F7               	movwf	??_Print_YMD
 12913  14B9  01F8               	clrf	??_Print_YMD+1
 12914  14BA  0877               	movf	??_Print_YMD,w
 12915  14BB  00F4               	movwf	___awdiv@dividend
 12916  14BC  0878               	movf	??_Print_YMD+1,w
 12917  14BD  00F5               	movwf	___awdiv@dividend+1
 12918  14BE  319F  275B  3194   	fcall	___awdiv
 12919  14C1  0872               	movf	?___awdiv,w
 12920  14C2  3E30               	addlw	48
 12921  14C3  319B  2366  3194   	fcall	_EUSART_Write
 12922                           
 12923                           ;main.c: 1917: EUSART_Write(0x30 + (rClock.RTC_Year % 16));
 12924  14C6  0020               	movlb	0	; select bank0
 12925  14C7  0824               	movf	Print_YMD@rClock,w
 12926  14C8  390F               	andlw	15
 12927  14C9  3E30               	addlw	48
 12928  14CA  319B  2366  3194   	fcall	_EUSART_Write
 12929                           
 12930                           ;main.c: 1918: EUSART_Write('-');
 12931  14CD  302D               	movlw	45
 12932  14CE  319B  2366  3194   	fcall	_EUSART_Write
 12933                           
 12934                           ;main.c: 1919: EUSART_Write(0x30 + (rClock.RTC_Month / 16));
 12935  14D1  3010               	movlw	16
 12936  14D2  00F2               	movwf	___awdiv@divisor
 12937  14D3  3000               	movlw	0
 12938  14D4  00F3               	movwf	___awdiv@divisor+1
 12939  14D5  0020               	movlb	0	; select bank0
 12940  14D6  0825               	movf	Print_YMD@rClock+1,w
 12941  14D7  00F7               	movwf	??_Print_YMD
 12942  14D8  01F8               	clrf	??_Print_YMD+1
 12943  14D9  0877               	movf	??_Print_YMD,w
 12944  14DA  00F4               	movwf	___awdiv@dividend
 12945  14DB  0878               	movf	??_Print_YMD+1,w
 12946  14DC  00F5               	movwf	___awdiv@dividend+1
 12947  14DD  319F  275B  3194   	fcall	___awdiv
 12948  14E0  0872               	movf	?___awdiv,w
 12949  14E1  3E30               	addlw	48
 12950  14E2  319B  2366  3194   	fcall	_EUSART_Write
 12951                           
 12952                           ;main.c: 1920: EUSART_Write(0x30 + (rClock.RTC_Month % 16));
 12953  14E5  0020               	movlb	0	; select bank0
 12954  14E6  0825               	movf	Print_YMD@rClock+1,w
 12955  14E7  390F               	andlw	15
 12956  14E8  3E30               	addlw	48
 12957  14E9  319B  2366  3194   	fcall	_EUSART_Write
 12958                           
 12959                           ;main.c: 1922: EUSART_Write('-');
 12960  14EC  302D               	movlw	45
 12961  14ED  319B  2366  3194   	fcall	_EUSART_Write
 12962                           
 12963                           ;main.c: 1923: EUSART_Write(0x30 + (rClock.RTC_Day / 16));
 12964  14F0  3010               	movlw	16
 12965  14F1  00F2               	movwf	___awdiv@divisor
 12966  14F2  3000               	movlw	0
 12967  14F3  00F3               	movwf	___awdiv@divisor+1
 12968  14F4  0020               	movlb	0	; select bank0
 12969  14F5  0826               	movf	Print_YMD@rClock+2,w
 12970  14F6  00F7               	movwf	??_Print_YMD
 12971  14F7  01F8               	clrf	??_Print_YMD+1
 12972  14F8  0877               	movf	??_Print_YMD,w
 12973  14F9  00F4               	movwf	___awdiv@dividend
 12974  14FA  0878               	movf	??_Print_YMD+1,w
 12975  14FB  00F5               	movwf	___awdiv@dividend+1
 12976  14FC  319F  275B  3194   	fcall	___awdiv
 12977  14FF  0872               	movf	?___awdiv,w
 12978  1500  3E30               	addlw	48
 12979  1501  319B  2366  3194   	fcall	_EUSART_Write
 12980                           
 12981                           ;main.c: 1924: EUSART_Write(0x30 + (rClock.RTC_Day % 16));
 12982  1504  0020               	movlb	0	; select bank0
 12983  1505  0826               	movf	Print_YMD@rClock+2,w
 12984  1506  390F               	andlw	15
 12985  1507  3E30               	addlw	48
 12986  1508  319B  2366  3194   	fcall	_EUSART_Write
 12987                           
 12988                           ;main.c: 1926: EUSART_Write(' ');
 12989  150B  3020               	movlw	32
 12990  150C  319B  2366         	fcall	_EUSART_Write
 12991  150E  0008               	return
 12992  150F                     __end_of_Print_YMD:	
 12993                           
 12994                           	psect	text25
 12995  138E                     __ptext25:	
 12996 ;; *************** function _Print_HMS *****************
 12997 ;; Defined at:
 12998 ;;		line 1838 in file "main.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  rClock          6    4[BANK0 ] struct .
 13001 ;; Auto vars:     Size  Location     Type
 13002 ;;		None
 13003 ;; Return value:  Size  Location     Type
 13004 ;;		None               void
 13005 ;; Registers used:
 13006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13007 ;; Tracked objects:
 13008 ;;		On entry : 0/0
 13009 ;;		On exit  : 0/0
 13010 ;;		Unchanged: 0/0
 13011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13012 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13014 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13015 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13016 ;;Total ram usage:        8 bytes
 13017 ;; Hardware stack levels used:    1
 13018 ;; Hardware stack levels required when called:    5
 13019 ;; This function calls:
 13020 ;;		_EUSART_Write
 13021 ;;		_Print_CHLN
 13022 ;;		___awdiv
 13023 ;; This function is called by:
 13024 ;;		_print_RTC
 13025 ;; This function uses a non-reentrant model
 13026 ;;
 13027                           
 13028                           
 13029                           ;psect for function _Print_HMS
 13030  138E                     _Print_HMS:	
 13031                           
 13032                           ;main.c: 1841: EUSART_Write(0x30 + (rClock.RTC_Hour / 16));
 13033                           
 13034                           ;incstack = 0
 13035                           ; Regs used in _Print_HMS: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13036  138E  3010               	movlw	16
 13037  138F  00F2               	movwf	___awdiv@divisor
 13038  1390  3000               	movlw	0
 13039  1391  00F3               	movwf	___awdiv@divisor+1
 13040  1392  0020               	movlb	0	; select bank0
 13041  1393  0827               	movf	Print_HMS@rClock+3,w
 13042  1394  00F7               	movwf	??_Print_HMS
 13043  1395  01F8               	clrf	??_Print_HMS+1
 13044  1396  0877               	movf	??_Print_HMS,w
 13045  1397  00F4               	movwf	___awdiv@dividend
 13046  1398  0878               	movf	??_Print_HMS+1,w
 13047  1399  00F5               	movwf	___awdiv@dividend+1
 13048  139A  319F  275B  3193   	fcall	___awdiv
 13049  139D  0872               	movf	?___awdiv,w
 13050  139E  3E30               	addlw	48
 13051  139F  319B  2366  3193   	fcall	_EUSART_Write
 13052                           
 13053                           ;main.c: 1842: EUSART_Write(0x30 + (rClock.RTC_Hour % 16));
 13054  13A2  0020               	movlb	0	; select bank0
 13055  13A3  0827               	movf	Print_HMS@rClock+3,w
 13056  13A4  390F               	andlw	15
 13057  13A5  3E30               	addlw	48
 13058  13A6  319B  2366  3193   	fcall	_EUSART_Write
 13059                           
 13060                           ;main.c: 1843: EUSART_Write(':');
 13061  13A9  303A               	movlw	58
 13062  13AA  319B  2366  3193   	fcall	_EUSART_Write
 13063                           
 13064                           ;main.c: 1844: EUSART_Write(0x30 + (rClock.RTC_Min / 16));
 13065  13AD  3010               	movlw	16
 13066  13AE  00F2               	movwf	___awdiv@divisor
 13067  13AF  3000               	movlw	0
 13068  13B0  00F3               	movwf	___awdiv@divisor+1
 13069  13B1  0020               	movlb	0	; select bank0
 13070  13B2  0828               	movf	Print_HMS@rClock+4,w
 13071  13B3  00F7               	movwf	??_Print_HMS
 13072  13B4  01F8               	clrf	??_Print_HMS+1
 13073  13B5  0877               	movf	??_Print_HMS,w
 13074  13B6  00F4               	movwf	___awdiv@dividend
 13075  13B7  0878               	movf	??_Print_HMS+1,w
 13076  13B8  00F5               	movwf	___awdiv@dividend+1
 13077  13B9  319F  275B  3193   	fcall	___awdiv
 13078  13BC  0872               	movf	?___awdiv,w
 13079  13BD  3E30               	addlw	48
 13080  13BE  319B  2366  3193   	fcall	_EUSART_Write
 13081                           
 13082                           ;main.c: 1845: EUSART_Write(0x30 + (rClock.RTC_Min % 16));
 13083  13C1  0020               	movlb	0	; select bank0
 13084  13C2  0828               	movf	Print_HMS@rClock+4,w
 13085  13C3  390F               	andlw	15
 13086  13C4  3E30               	addlw	48
 13087  13C5  319B  2366  3193   	fcall	_EUSART_Write
 13088                           
 13089                           ;main.c: 1846: EUSART_Write(':');
 13090  13C8  303A               	movlw	58
 13091  13C9  319B  2366  3193   	fcall	_EUSART_Write
 13092                           
 13093                           ;main.c: 1847: EUSART_Write(0x30 + (rClock.RTC_Sec / 16));
 13094  13CC  3010               	movlw	16
 13095  13CD  00F2               	movwf	___awdiv@divisor
 13096  13CE  3000               	movlw	0
 13097  13CF  00F3               	movwf	___awdiv@divisor+1
 13098  13D0  0020               	movlb	0	; select bank0
 13099  13D1  0829               	movf	Print_HMS@rClock+5,w
 13100  13D2  00F7               	movwf	??_Print_HMS
 13101  13D3  01F8               	clrf	??_Print_HMS+1
 13102  13D4  0877               	movf	??_Print_HMS,w
 13103  13D5  00F4               	movwf	___awdiv@dividend
 13104  13D6  0878               	movf	??_Print_HMS+1,w
 13105  13D7  00F5               	movwf	___awdiv@dividend+1
 13106  13D8  319F  275B  3193   	fcall	___awdiv
 13107  13DB  0872               	movf	?___awdiv,w
 13108  13DC  3E30               	addlw	48
 13109  13DD  319B  2366  3193   	fcall	_EUSART_Write
 13110                           
 13111                           ;main.c: 1848: EUSART_Write(0x30 + (rClock.RTC_Sec % 16));
 13112  13E0  0020               	movlb	0	; select bank0
 13113  13E1  0829               	movf	Print_HMS@rClock+5,w
 13114  13E2  390F               	andlw	15
 13115  13E3  3E30               	addlw	48
 13116  13E4  319B  2366  3193   	fcall	_EUSART_Write
 13117                           
 13118                           ;main.c: 1849: Print_CHLN();
 13119  13E7  3199  211C         	fcall	_Print_CHLN
 13120  13E9  0008               	return
 13121  13EA                     __end_of_Print_HMS:	
 13122                           
 13123                           	psect	text26
 13124  15E2                     __ptext26:	
 13125 ;; *************** function _Convert_YMD *****************
 13126 ;; Defined at:
 13127 ;;		line 1854 in file "main.c"
 13128 ;; Parameters:    Size  Location     Type
 13129 ;;  iCount          2   10[BANK0 ] unsigned int 
 13130 ;;  rClock          1   12[BANK0 ] PTR struct .
 13131 ;;		 -> RTC_Clock(6), 
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;  MonthTable     24   15[BANK0 ] unsigned int [12]
 13134 ;;  i               1   42[BANK0 ] unsigned char 
 13135 ;;  cYear           1   41[BANK0 ] unsigned char 
 13136 ;;  cMonth          1   40[BANK0 ] unsigned char 
 13137 ;;  cDay            1   39[BANK0 ] unsigned char 
 13138 ;; Return value:  Size  Location     Type
 13139 ;;		None               void
 13140 ;; Registers used:
 13141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13142 ;; Tracked objects:
 13143 ;;		On entry : 0/0
 13144 ;;		On exit  : 0/0
 13145 ;;		Unchanged: 0/0
 13146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13147 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13148 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13149 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13150 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13151 ;;Total ram usage:       33 bytes
 13152 ;; Hardware stack levels used:    1
 13153 ;; Hardware stack levels required when called:    5
 13154 ;; This function calls:
 13155 ;;		_Convert_2HB
 13156 ;; This function is called by:
 13157 ;;		_UPLOAD_MESURE_REC
 13158 ;;		_print_RTC
 13159 ;; This function uses a non-reentrant model
 13160 ;;
 13161                           
 13162                           
 13163                           ;psect for function _Convert_YMD
 13164  15E2                     _Convert_YMD:	
 13165                           
 13166                           ;main.c: 1856: uint16_t MonthTable[12]={
 13167                           ;main.c: 1857: 31,
 13168                           ;main.c: 1858: 28,
 13169                           ;main.c: 1859: 31,
 13170                           ;main.c: 1860: 30,
 13171                           ;main.c: 1861: 31,
 13172                           ;main.c: 1862: 30,
 13173                           ;main.c: 1863: 31,
 13174                           ;main.c: 1864: 31,
 13175                           ;main.c: 1865: 30,
 13176                           ;main.c: 1866: 31,
 13177                           ;main.c: 1867: 30,
 13178                           ;main.c: 1868: 31
 13179                           ;main.c: 1869: };
 13180                           
 13181                           ;incstack = 0
 13182                           ; Regs used in _Convert_YMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13183  15E2  3020               	movlw	low Convert_YMD@F7967
 13184  15E3  0086               	movwf	6
 13185  15E4  3002               	movlw	high Convert_YMD@F7967
 13186  15E5  0087               	movwf	7
 13187  15E6  302F               	movlw	low Convert_YMD@MonthTable
 13188  15E7  0084               	movwf	4
 13189  15E8  3000               	movlw	high Convert_YMD@MonthTable
 13190  15E9  0085               	movwf	5
 13191  15EA  3018               	movlw	24
 13192  15EB  0020               	movlb	0	; select bank0
 13193  15EC  00AD               	movwf	??_Convert_YMD
 13194  15ED                     u7370:	
 13195  15ED  0016               	moviw fsr1++
 13196  15EE  001A               	movwi fsr0++
 13197  15EF  0BAD               	decfsz	??_Convert_YMD,f
 13198  15F0  2DED               	goto	u7370
 13199                           
 13200                           ;main.c: 1871: uint8_t i =0;
 13201  15F1  01CA               	clrf	Convert_YMD@i
 13202                           
 13203                           ;main.c: 1872: uint8_t cDay = 0;
 13204  15F2  01C7               	clrf	Convert_YMD@cDay
 13205                           
 13206                           ;main.c: 1873: uint8_t cMonth = 0;
 13207  15F3  01C8               	clrf	Convert_YMD@cMonth
 13208                           
 13209                           ;main.c: 1874: uint8_t cYear = 0;
 13210  15F4  01C9               	clrf	Convert_YMD@cYear
 13211  15F5                     l6786:	
 13212                           ;main.c: 1877: while(iCount >= MonthTable[i])
 13213                           
 13214  15F5  354A               	lslf	Convert_YMD@i,w
 13215  15F6  3E2F               	addlw	(low (Convert_YMD@MonthTable| 0))& (0+255)
 13216  15F7  0086               	movwf	6
 13217  15F8  0187               	clrf	7
 13218  15F9  3F40               	moviw [0]fsr1
 13219  15FA  00AD               	movwf	??_Convert_YMD
 13220  15FB  3F41               	moviw [1]fsr1
 13221  15FC  00AE               	movwf	??_Convert_YMD+1
 13222  15FD  082E               	movf	??_Convert_YMD+1,w
 13223  15FE  022B               	subwf	Convert_YMD@iCount+1,w
 13224  15FF  1D03               	skipz
 13225  1600  2E03               	goto	u7395
 13226  1601  082D               	movf	??_Convert_YMD,w
 13227  1602  022A               	subwf	Convert_YMD@iCount,w
 13228  1603                     u7395:	
 13229  1603  1C03               	btfss	3,0
 13230  1604  2E23               	goto	l6788
 13231                           
 13232                           ;main.c: 1878: {
 13233                           ;main.c: 1879: iCount -= MonthTable[i];
 13234  1605  354A               	lslf	Convert_YMD@i,w
 13235  1606  3E2F               	addlw	(low (Convert_YMD@MonthTable| 0))& (0+255)
 13236  1607  0086               	movwf	6
 13237  1608  0187               	clrf	7
 13238  1609  3F40               	moviw [0]fsr1
 13239  160A  00AD               	movwf	??_Convert_YMD
 13240  160B  3F41               	moviw [1]fsr1
 13241  160C  00AE               	movwf	??_Convert_YMD+1
 13242  160D  082D               	movf	??_Convert_YMD,w
 13243  160E  02AA               	subwf	Convert_YMD@iCount,f
 13244  160F  082E               	movf	??_Convert_YMD+1,w
 13245  1610  3BAB               	subwfb	Convert_YMD@iCount+1,f
 13246                           
 13247                           ;main.c: 1880: i++;
 13248  1611  3001               	movlw	1
 13249  1612  00AD               	movwf	??_Convert_YMD
 13250  1613  082D               	movf	??_Convert_YMD,w
 13251  1614  07CA               	addwf	Convert_YMD@i,f
 13252                           
 13253                           ;main.c: 1882: if(i >= 12)
 13254  1615  300C               	movlw	12
 13255  1616  024A               	subwf	Convert_YMD@i,w
 13256  1617  1C03               	skipc
 13257  1618  2E1E               	goto	l6784
 13258                           
 13259                           ;main.c: 1883: {
 13260                           ;main.c: 1884: cYear++;
 13261  1619  3001               	movlw	1
 13262  161A  00AD               	movwf	??_Convert_YMD
 13263  161B  082D               	movf	??_Convert_YMD,w
 13264  161C  07C9               	addwf	Convert_YMD@cYear,f
 13265                           
 13266                           ;main.c: 1885: i = 0;
 13267  161D  01CA               	clrf	Convert_YMD@i
 13268  161E                     l6784:	
 13269                           
 13270                           ;main.c: 1886: }
 13271                           ;main.c: 1887: cMonth++;
 13272  161E  3001               	movlw	1
 13273  161F  00AD               	movwf	??_Convert_YMD
 13274  1620  082D               	movf	??_Convert_YMD,w
 13275  1621  07C8               	addwf	Convert_YMD@cMonth,f
 13276  1622  2DF5               	goto	l6786
 13277  1623                     l6788:	
 13278                           
 13279                           ;main.c: 1888: }
 13280                           ;main.c: 1890: cDay = iCount;
 13281  1623  082A               	movf	Convert_YMD@iCount,w
 13282  1624  00AD               	movwf	??_Convert_YMD
 13283  1625  082D               	movf	??_Convert_YMD,w
 13284  1626  00C7               	movwf	Convert_YMD@cDay
 13285                           
 13286                           ;main.c: 1892: rClock->RTC_Day =
 13287                           ;main.c: 1894: rClock->RTC_Day = Convert_2HB(cDay+1);
 13288  1627  082C               	movf	Convert_YMD@rClock,w
 13289  1628  3E02               	addlw	2
 13290  1629  0086               	movwf	6
 13291  162A  3001               	movlw	1	; select bank2/3
 13292  162B  0087               	movwf	7
 13293  162C  0847               	movf	Convert_YMD@cDay,w
 13294  162D  3E01               	addlw	1
 13295  162E  319D  2519  3195   	fcall	_Convert_2HB
 13296  1631  3FC0               	movwi [0]fsr1
 13297  1632  0020               	movlb	0	; select bank0
 13298  1633  00AD               	movwf	??_Convert_YMD
 13299  1634  082C               	movf	Convert_YMD@rClock,w
 13300  1635  3E02               	addlw	2
 13301  1636  0086               	movwf	6
 13302  1637  3001               	movlw	1	; select bank2/3
 13303  1638  0087               	movwf	7
 13304  1639  082D               	movf	??_Convert_YMD,w
 13305  163A  0081               	movwf	1
 13306                           
 13307                           ;main.c: 1896: rClock->RTC_Month = Convert_2HB(cMonth+1);
 13308  163B  0848               	movf	Convert_YMD@cMonth,w
 13309  163C  3E01               	addlw	1
 13310  163D  319D  2519  3195   	fcall	_Convert_2HB
 13311  1640  0020               	movlb	0	; select bank0
 13312  1641  00AD               	movwf	??_Convert_YMD
 13313  1642  0A2C               	incf	Convert_YMD@rClock,w
 13314  1643  0086               	movwf	6
 13315  1644  3001               	movlw	1	; select bank2/3
 13316  1645  0087               	movwf	7
 13317  1646  082D               	movf	??_Convert_YMD,w
 13318  1647  0081               	movwf	1
 13319                           
 13320                           ;main.c: 1898: rClock->RTC_Year = Convert_2HB(cYear + 16 );
 13321  1648  0849               	movf	Convert_YMD@cYear,w
 13322  1649  3E10               	addlw	16
 13323  164A  319D  2519         	fcall	_Convert_2HB
 13324  164C  0020               	movlb	0	; select bank0
 13325  164D  00AD               	movwf	??_Convert_YMD
 13326  164E  082C               	movf	Convert_YMD@rClock,w
 13327  164F  0086               	movwf	6
 13328  1650  3001               	movlw	1	; select bank2/3
 13329  1651  0087               	movwf	7
 13330  1652  082D               	movf	??_Convert_YMD,w
 13331  1653  0081               	movwf	1
 13332  1654  0008               	return
 13333  1655                     __end_of_Convert_YMD:	
 13334                           
 13335                           	psect	text27
 13336  16C9                     __ptext27:	
 13337 ;; *************** function _Convert_HMS *****************
 13338 ;; Defined at:
 13339 ;;		line 1825 in file "main.c"
 13340 ;; Parameters:    Size  Location     Type
 13341 ;;  iCount          4   10[BANK0 ] unsigned long 
 13342 ;;  rClock          1   14[BANK0 ] PTR struct .
 13343 ;;		 -> RTC_Clock(6), 
 13344 ;; Auto vars:     Size  Location     Type
 13345 ;;		None
 13346 ;; Return value:  Size  Location     Type
 13347 ;;		None               void
 13348 ;; Registers used:
 13349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13350 ;; Tracked objects:
 13351 ;;		On entry : 0/0
 13352 ;;		On exit  : 0/0
 13353 ;;		Unchanged: 0/0
 13354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13355 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13358 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13359 ;;Total ram usage:        6 bytes
 13360 ;; Hardware stack levels used:    1
 13361 ;; Hardware stack levels required when called:    5
 13362 ;; This function calls:
 13363 ;;		_Convert_2HB
 13364 ;;		___lldiv
 13365 ;;		___llmod
 13366 ;; This function is called by:
 13367 ;;		_UPLOAD_MESURE_REC
 13368 ;;		_print_RTC
 13369 ;; This function uses a non-reentrant model
 13370 ;;
 13371                           
 13372                           
 13373                           ;psect for function _Convert_HMS
 13374  16C9                     _Convert_HMS:	
 13375                           
 13376                           ;main.c: 1827: rClock->RTC_Sec = Convert_2HB(iCount % 60);
 13377                           
 13378                           ;incstack = 0
 13379                           ; Regs used in _Convert_HMS: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13380  16C9  3000               	movlw	0
 13381  16CA  00F5               	movwf	___llmod@divisor+3
 13382  16CB  3000               	movlw	0
 13383  16CC  00F4               	movwf	___llmod@divisor+2
 13384  16CD  3000               	movlw	0
 13385  16CE  00F3               	movwf	___llmod@divisor+1
 13386  16CF  303C               	movlw	60
 13387  16D0  00F2               	movwf	___llmod@divisor
 13388  16D1  0020               	movlb	0	; select bank0
 13389  16D2  082D               	movf	Convert_HMS@iCount+3,w
 13390  16D3  00F9               	movwf	___llmod@dividend+3
 13391  16D4  082C               	movf	Convert_HMS@iCount+2,w
 13392  16D5  00F8               	movwf	___llmod@dividend+2
 13393  16D6  082B               	movf	Convert_HMS@iCount+1,w
 13394  16D7  00F7               	movwf	___llmod@dividend+1
 13395  16D8  082A               	movf	Convert_HMS@iCount,w
 13396  16D9  00F6               	movwf	___llmod@dividend
 13397  16DA  319D  25FB  3196   	fcall	___llmod
 13398  16DD  0872               	movf	?___llmod,w
 13399  16DE  319D  2519  3196   	fcall	_Convert_2HB
 13400  16E1  0020               	movlb	0	; select bank0
 13401  16E2  00AF               	movwf	??_Convert_HMS
 13402  16E3  082E               	movf	Convert_HMS@rClock,w
 13403  16E4  3E05               	addlw	5
 13404  16E5  0086               	movwf	6
 13405  16E6  3001               	movlw	1	; select bank2/3
 13406  16E7  0087               	movwf	7
 13407  16E8  082F               	movf	??_Convert_HMS,w
 13408  16E9  0081               	movwf	1
 13409                           
 13410                           ;main.c: 1828: iCount /= 60;
 13411  16EA  3000               	movlw	0
 13412  16EB  00F5               	movwf	___lldiv@divisor+3
 13413  16EC  3000               	movlw	0
 13414  16ED  00F4               	movwf	___lldiv@divisor+2
 13415  16EE  3000               	movlw	0
 13416  16EF  00F3               	movwf	___lldiv@divisor+1
 13417  16F0  303C               	movlw	60
 13418  16F1  00F2               	movwf	___lldiv@divisor
 13419  16F2  082D               	movf	Convert_HMS@iCount+3,w
 13420  16F3  00F9               	movwf	___lldiv@dividend+3
 13421  16F4  082C               	movf	Convert_HMS@iCount+2,w
 13422  16F5  00F8               	movwf	___lldiv@dividend+2
 13423  16F6  082B               	movf	Convert_HMS@iCount+1,w
 13424  16F7  00F7               	movwf	___lldiv@dividend+1
 13425  16F8  082A               	movf	Convert_HMS@iCount,w
 13426  16F9  00F6               	movwf	___lldiv@dividend
 13427  16FA  319F  27AD  3196   	fcall	___lldiv
 13428  16FD  0875               	movf	?___lldiv+3,w
 13429  16FE  0020               	movlb	0	; select bank0
 13430  16FF  00AD               	movwf	Convert_HMS@iCount+3
 13431  1700  0874               	movf	?___lldiv+2,w
 13432  1701  00AC               	movwf	Convert_HMS@iCount+2
 13433  1702  0873               	movf	?___lldiv+1,w
 13434  1703  00AB               	movwf	Convert_HMS@iCount+1
 13435  1704  0872               	movf	?___lldiv,w
 13436  1705  00AA               	movwf	Convert_HMS@iCount
 13437                           
 13438                           ;main.c: 1830: rClock->RTC_Min = Convert_2HB(iCount % 60);
 13439  1706  3000               	movlw	0
 13440  1707  00F5               	movwf	___llmod@divisor+3
 13441  1708  3000               	movlw	0
 13442  1709  00F4               	movwf	___llmod@divisor+2
 13443  170A  3000               	movlw	0
 13444  170B  00F3               	movwf	___llmod@divisor+1
 13445  170C  303C               	movlw	60
 13446  170D  00F2               	movwf	___llmod@divisor
 13447  170E  082D               	movf	Convert_HMS@iCount+3,w
 13448  170F  00F9               	movwf	___llmod@dividend+3
 13449  1710  082C               	movf	Convert_HMS@iCount+2,w
 13450  1711  00F8               	movwf	___llmod@dividend+2
 13451  1712  082B               	movf	Convert_HMS@iCount+1,w
 13452  1713  00F7               	movwf	___llmod@dividend+1
 13453  1714  082A               	movf	Convert_HMS@iCount,w
 13454  1715  00F6               	movwf	___llmod@dividend
 13455  1716  319D  25FB  3196   	fcall	___llmod
 13456  1719  0872               	movf	?___llmod,w
 13457  171A  319D  2519  3196   	fcall	_Convert_2HB
 13458  171D  0020               	movlb	0	; select bank0
 13459  171E  00AF               	movwf	??_Convert_HMS
 13460  171F  082E               	movf	Convert_HMS@rClock,w
 13461  1720  3E04               	addlw	4
 13462  1721  0086               	movwf	6
 13463  1722  3001               	movlw	1	; select bank2/3
 13464  1723  0087               	movwf	7
 13465  1724  082F               	movf	??_Convert_HMS,w
 13466  1725  0081               	movwf	1
 13467                           
 13468                           ;main.c: 1831: iCount /= 60;
 13469  1726  3000               	movlw	0
 13470  1727  00F5               	movwf	___lldiv@divisor+3
 13471  1728  3000               	movlw	0
 13472  1729  00F4               	movwf	___lldiv@divisor+2
 13473  172A  3000               	movlw	0
 13474  172B  00F3               	movwf	___lldiv@divisor+1
 13475  172C  303C               	movlw	60
 13476  172D  00F2               	movwf	___lldiv@divisor
 13477  172E  082D               	movf	Convert_HMS@iCount+3,w
 13478  172F  00F9               	movwf	___lldiv@dividend+3
 13479  1730  082C               	movf	Convert_HMS@iCount+2,w
 13480  1731  00F8               	movwf	___lldiv@dividend+2
 13481  1732  082B               	movf	Convert_HMS@iCount+1,w
 13482  1733  00F7               	movwf	___lldiv@dividend+1
 13483  1734  082A               	movf	Convert_HMS@iCount,w
 13484  1735  00F6               	movwf	___lldiv@dividend
 13485  1736  319F  27AD  3196   	fcall	___lldiv
 13486  1739  0875               	movf	?___lldiv+3,w
 13487  173A  0020               	movlb	0	; select bank0
 13488  173B  00AD               	movwf	Convert_HMS@iCount+3
 13489  173C  0874               	movf	?___lldiv+2,w
 13490  173D  00AC               	movwf	Convert_HMS@iCount+2
 13491  173E  0873               	movf	?___lldiv+1,w
 13492  173F  00AB               	movwf	Convert_HMS@iCount+1
 13493  1740  0872               	movf	?___lldiv,w
 13494  1741  00AA               	movwf	Convert_HMS@iCount
 13495                           
 13496                           ;main.c: 1833: rClock->RTC_Hour = Convert_2HB(iCount % 24);
 13497  1742  3000               	movlw	0
 13498  1743  00F5               	movwf	___llmod@divisor+3
 13499  1744  3000               	movlw	0
 13500  1745  00F4               	movwf	___llmod@divisor+2
 13501  1746  3000               	movlw	0
 13502  1747  00F3               	movwf	___llmod@divisor+1
 13503  1748  3018               	movlw	24
 13504  1749  00F2               	movwf	___llmod@divisor
 13505  174A  082D               	movf	Convert_HMS@iCount+3,w
 13506  174B  00F9               	movwf	___llmod@dividend+3
 13507  174C  082C               	movf	Convert_HMS@iCount+2,w
 13508  174D  00F8               	movwf	___llmod@dividend+2
 13509  174E  082B               	movf	Convert_HMS@iCount+1,w
 13510  174F  00F7               	movwf	___llmod@dividend+1
 13511  1750  082A               	movf	Convert_HMS@iCount,w
 13512  1751  00F6               	movwf	___llmod@dividend
 13513  1752  319D  25FB  3196   	fcall	___llmod
 13514  1755  0872               	movf	?___llmod,w
 13515  1756  319D  2519         	fcall	_Convert_2HB
 13516  1758  0020               	movlb	0	; select bank0
 13517  1759  00AF               	movwf	??_Convert_HMS
 13518  175A  082E               	movf	Convert_HMS@rClock,w
 13519  175B  3E03               	addlw	3
 13520  175C  0086               	movwf	6
 13521  175D  3001               	movlw	1	; select bank2/3
 13522  175E  0087               	movwf	7
 13523  175F  082F               	movf	??_Convert_HMS,w
 13524  1760  0081               	movwf	1
 13525  1761  0008               	return
 13526  1762                     __end_of_Convert_HMS:	
 13527                           
 13528                           	psect	text28
 13529  1DFB                     __ptext28:	
 13530 ;; *************** function ___llmod *****************
 13531 ;; Defined at:
 13532 ;;		line 6 in file "/Applications/microchip/xc8/v1.35/sources/common/llmod.c"
 13533 ;; Parameters:    Size  Location     Type
 13534 ;;  divisor         4    2[COMMON] unsigned long 
 13535 ;;  dividend        4    6[COMMON] unsigned long 
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;  counter         1    1[BANK0 ] unsigned char 
 13538 ;; Return value:  Size  Location     Type
 13539 ;;                  4    2[COMMON] unsigned long 
 13540 ;; Registers used:
 13541 ;;		wreg, status,2, status,0
 13542 ;; Tracked objects:
 13543 ;;		On entry : 0/0
 13544 ;;		On exit  : 0/0
 13545 ;;		Unchanged: 0/0
 13546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13547 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13549 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13550 ;;      Totals:         8       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13551 ;;Total ram usage:       10 bytes
 13552 ;; Hardware stack levels used:    1
 13553 ;; Hardware stack levels required when called:    3
 13554 ;; This function calls:
 13555 ;;		Nothing
 13556 ;; This function is called by:
 13557 ;;		_Convert_HMS
 13558 ;; This function uses a non-reentrant model
 13559 ;;
 13560                           
 13561                           
 13562                           ;psect for function ___llmod
 13563  1DFB                     ___llmod:	
 13564                           
 13565                           ;incstack = 0
 13566                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 13567  1DFB  0875               	movf	___llmod@divisor+3,w
 13568  1DFC  0474               	iorwf	___llmod@divisor+2,w
 13569  1DFD  0473               	iorwf	___llmod@divisor+1,w
 13570  1DFE  0472               	iorwf	___llmod@divisor,w
 13571  1DFF  1903               	skipnz
 13572  1E00  2E35               	goto	l6616
 13573  1E01  0020               	movlb	0	; select bank0
 13574  1E02  01A1               	clrf	___llmod@counter
 13575  1E03  0AA1               	incf	___llmod@counter,f
 13576  1E04                     l6606:	
 13577  1E04  1BF5               	btfsc	___llmod@divisor+3,7
 13578  1E05  2E12               	goto	l6608
 13579  1E06  3001               	movlw	1
 13580  1E07                     u7105:	
 13581  1E07  35F2               	lslf	___llmod@divisor,f
 13582  1E08  0DF3               	rlf	___llmod@divisor+1,f
 13583  1E09  0DF4               	rlf	___llmod@divisor+2,f
 13584  1E0A  0DF5               	rlf	___llmod@divisor+3,f
 13585  1E0B  0B89               	decfsz	9,f
 13586  1E0C  2E07               	goto	u7105
 13587  1E0D  3001               	movlw	1
 13588  1E0E  00A0               	movwf	??___llmod
 13589  1E0F  0820               	movf	??___llmod,w
 13590  1E10  07A1               	addwf	___llmod@counter,f
 13591  1E11  2E04               	goto	l6606
 13592  1E12                     l6608:	
 13593  1E12  0875               	movf	___llmod@divisor+3,w
 13594  1E13  0279               	subwf	___llmod@dividend+3,w
 13595  1E14  1D03               	skipz
 13596  1E15  2E20               	goto	u7125
 13597  1E16  0874               	movf	___llmod@divisor+2,w
 13598  1E17  0278               	subwf	___llmod@dividend+2,w
 13599  1E18  1D03               	skipz
 13600  1E19  2E20               	goto	u7125
 13601  1E1A  0873               	movf	___llmod@divisor+1,w
 13602  1E1B  0277               	subwf	___llmod@dividend+1,w
 13603  1E1C  1D03               	skipz
 13604  1E1D  2E20               	goto	u7125
 13605  1E1E  0872               	movf	___llmod@divisor,w
 13606  1E1F  0276               	subwf	___llmod@dividend,w
 13607  1E20                     u7125:	
 13608  1E20  1C03               	skipc
 13609  1E21  2E2A               	goto	l6612
 13610  1E22  0872               	movf	___llmod@divisor,w
 13611  1E23  02F6               	subwf	___llmod@dividend,f
 13612  1E24  0873               	movf	___llmod@divisor+1,w
 13613  1E25  3BF7               	subwfb	___llmod@dividend+1,f
 13614  1E26  0874               	movf	___llmod@divisor+2,w
 13615  1E27  3BF8               	subwfb	___llmod@dividend+2,f
 13616  1E28  0875               	movf	___llmod@divisor+3,w
 13617  1E29  3BF9               	subwfb	___llmod@dividend+3,f
 13618  1E2A                     l6612:	
 13619  1E2A  3001               	movlw	1
 13620  1E2B                     u7135:	
 13621  1E2B  36F5               	lsrf	___llmod@divisor+3,f
 13622  1E2C  0CF4               	rrf	___llmod@divisor+2,f
 13623  1E2D  0CF3               	rrf	___llmod@divisor+1,f
 13624  1E2E  0CF2               	rrf	___llmod@divisor,f
 13625  1E2F  0B89               	decfsz	9,f
 13626  1E30  2E2B               	goto	u7135
 13627  1E31  3001               	movlw	1
 13628  1E32  02A1               	subwf	___llmod@counter,f
 13629  1E33  1D03               	btfss	3,2
 13630  1E34  2E12               	goto	l6608
 13631  1E35                     l6616:	
 13632  1E35  0879               	movf	___llmod@dividend+3,w
 13633  1E36  00F5               	movwf	?___llmod+3
 13634  1E37  0878               	movf	___llmod@dividend+2,w
 13635  1E38  00F4               	movwf	?___llmod+2
 13636  1E39  0877               	movf	___llmod@dividend+1,w
 13637  1E3A  00F3               	movwf	?___llmod+1
 13638  1E3B  0876               	movf	___llmod@dividend,w
 13639  1E3C  00F2               	movwf	?___llmod
 13640  1E3D  0008               	return
 13641  1E3E                     __end_of___llmod:	
 13642                           
 13643                           	psect	text29
 13644  1D19                     __ptext29:	
 13645 ;; *************** function _Convert_2HB *****************
 13646 ;; Defined at:
 13647 ;;		line 1932 in file "main.c"
 13648 ;; Parameters:    Size  Location     Type
 13649 ;;  iCount          1    wreg     unsigned char 
 13650 ;; Auto vars:     Size  Location     Type
 13651 ;;  iCount          1    9[BANK0 ] unsigned char 
 13652 ;;  lNib            1    8[BANK0 ] unsigned char 
 13653 ;;  hNib            1    7[BANK0 ] unsigned char 
 13654 ;; Return value:  Size  Location     Type
 13655 ;;                  1    wreg      unsigned char 
 13656 ;; Registers used:
 13657 ;;		wreg, status,2, status,0, pclath, cstack
 13658 ;; Tracked objects:
 13659 ;;		On entry : 0/0
 13660 ;;		On exit  : 0/0
 13661 ;;		Unchanged: 0/0
 13662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13664 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13665 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13666 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13667 ;;Total ram usage:        6 bytes
 13668 ;; Hardware stack levels used:    1
 13669 ;; Hardware stack levels required when called:    4
 13670 ;; This function calls:
 13671 ;;		___awdiv
 13672 ;;		___awmod
 13673 ;; This function is called by:
 13674 ;;		_Convert_HMS
 13675 ;;		_Convert_YMD
 13676 ;; This function uses a non-reentrant model
 13677 ;;
 13678                           
 13679                           
 13680                           ;psect for function _Convert_2HB
 13681  1D19                     _Convert_2HB:	
 13682                           
 13683                           ;incstack = 0
 13684                           ; Regs used in _Convert_2HB: [wreg+status,2+status,0+pclath+cstack]
 13685                           ;Convert_2HB@iCount stored from wreg
 13686  1D19  0020               	movlb	0	; select bank0
 13687  1D1A  00A9               	movwf	Convert_2HB@iCount
 13688                           
 13689                           ;main.c: 1934: uint8_t hNib = 0;
 13690  1D1B  01A7               	clrf	Convert_2HB@hNib
 13691                           
 13692                           ;main.c: 1935: uint8_t lNib = 0;
 13693  1D1C  01A8               	clrf	Convert_2HB@lNib
 13694                           
 13695                           ;main.c: 1937: hNib = iCount / 10;
 13696  1D1D  300A               	movlw	10
 13697  1D1E  00F2               	movwf	___awdiv@divisor
 13698  1D1F  3000               	movlw	0
 13699  1D20  00F3               	movwf	___awdiv@divisor+1
 13700  1D21  0829               	movf	Convert_2HB@iCount,w
 13701  1D22  00A4               	movwf	??_Convert_2HB
 13702  1D23  01A5               	clrf	??_Convert_2HB+1
 13703  1D24  0824               	movf	??_Convert_2HB,w
 13704  1D25  00F4               	movwf	___awdiv@dividend
 13705  1D26  0825               	movf	??_Convert_2HB+1,w
 13706  1D27  00F5               	movwf	___awdiv@dividend+1
 13707  1D28  319F  275B  319D   	fcall	___awdiv
 13708  1D2B  0872               	movf	?___awdiv,w
 13709  1D2C  0020               	movlb	0	; select bank0
 13710  1D2D  00A6               	movwf	??_Convert_2HB+2
 13711  1D2E  0826               	movf	??_Convert_2HB+2,w
 13712  1D2F  00A7               	movwf	Convert_2HB@hNib
 13713                           
 13714                           ;main.c: 1938: lNib = iCount % 10;
 13715  1D30  300A               	movlw	10
 13716  1D31  00F2               	movwf	___awmod@divisor
 13717  1D32  3000               	movlw	0
 13718  1D33  00F3               	movwf	___awmod@divisor+1
 13719  1D34  0829               	movf	Convert_2HB@iCount,w
 13720  1D35  00A4               	movwf	??_Convert_2HB
 13721  1D36  01A5               	clrf	??_Convert_2HB+1
 13722  1D37  0824               	movf	??_Convert_2HB,w
 13723  1D38  00F4               	movwf	___awmod@dividend
 13724  1D39  0825               	movf	??_Convert_2HB+1,w
 13725  1D3A  00F5               	movwf	___awmod@dividend+1
 13726  1D3B  319E  26C8  319D   	fcall	___awmod
 13727  1D3E  0872               	movf	?___awmod,w
 13728  1D3F  0020               	movlb	0	; select bank0
 13729  1D40  00A6               	movwf	??_Convert_2HB+2
 13730  1D41  0826               	movf	??_Convert_2HB+2,w
 13731  1D42  00A8               	movwf	Convert_2HB@lNib
 13732                           
 13733                           ;main.c: 1940: return ((hNib*16)+lNib);
 13734  1D43  0827               	movf	Convert_2HB@hNib,w
 13735  1D44  00A4               	movwf	??_Convert_2HB
 13736  1D45  3003               	movlw	3
 13737  1D46                     u7015:	
 13738  1D46  35A4               	lslf	??_Convert_2HB,f
 13739  1D47  3EFF               	addlw	-1
 13740  1D48  1D03               	skipz
 13741  1D49  2D46               	goto	u7015
 13742  1D4A  3524               	lslf	??_Convert_2HB,w
 13743  1D4B  0728               	addwf	Convert_2HB@lNib,w
 13744  1D4C  0008               	return
 13745  1D4D                     __end_of_Convert_2HB:	
 13746                           
 13747                           	psect	text30
 13748  1EC8                     __ptext30:	
 13749 ;; *************** function ___awmod *****************
 13750 ;; Defined at:
 13751 ;;		line 6 in file "/Applications/microchip/xc8/v1.35/sources/common/awmod.c"
 13752 ;; Parameters:    Size  Location     Type
 13753 ;;  divisor         2    2[COMMON] int 
 13754 ;;  dividend        2    4[COMMON] int 
 13755 ;; Auto vars:     Size  Location     Type
 13756 ;;  sign            1    8[COMMON] unsigned char 
 13757 ;;  counter         1    7[COMMON] unsigned char 
 13758 ;; Return value:  Size  Location     Type
 13759 ;;                  2    2[COMMON] int 
 13760 ;; Registers used:
 13761 ;;		wreg, status,2, status,0
 13762 ;; Tracked objects:
 13763 ;;		On entry : 0/0
 13764 ;;		On exit  : 0/0
 13765 ;;		Unchanged: 0/0
 13766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13767 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13768 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13769 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13770 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13771 ;;Total ram usage:        7 bytes
 13772 ;; Hardware stack levels used:    1
 13773 ;; Hardware stack levels required when called:    3
 13774 ;; This function calls:
 13775 ;;		Nothing
 13776 ;; This function is called by:
 13777 ;;		_Convert_2HB
 13778 ;; This function uses a non-reentrant model
 13779 ;;
 13780                           
 13781                           
 13782                           ;psect for function ___awmod
 13783  1EC8                     ___awmod:	
 13784                           
 13785                           ;incstack = 0
 13786                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 13787  1EC8  01F8               	clrf	___awmod@sign
 13788  1EC9  1FF5               	btfss	___awmod@dividend+1,7
 13789  1ECA  2ED2               	goto	l4234
 13790  1ECB  09F4               	comf	___awmod@dividend,f
 13791  1ECC  09F5               	comf	___awmod@dividend+1,f
 13792  1ECD  0AF4               	incf	___awmod@dividend,f
 13793  1ECE  1903               	skipnz
 13794  1ECF  0AF5               	incf	___awmod@dividend+1,f
 13795  1ED0  01F8               	clrf	___awmod@sign
 13796  1ED1  0AF8               	incf	___awmod@sign,f
 13797  1ED2                     l4234:	
 13798  1ED2  1FF3               	btfss	___awmod@divisor+1,7
 13799  1ED3  2ED9               	goto	l4238
 13800  1ED4  09F2               	comf	___awmod@divisor,f
 13801  1ED5  09F3               	comf	___awmod@divisor+1,f
 13802  1ED6  0AF2               	incf	___awmod@divisor,f
 13803  1ED7  1903               	skipnz
 13804  1ED8  0AF3               	incf	___awmod@divisor+1,f
 13805  1ED9                     l4238:	
 13806  1ED9  0872               	movf	___awmod@divisor,w
 13807  1EDA  0473               	iorwf	___awmod@divisor+1,w
 13808  1EDB  1903               	btfsc	3,2
 13809  1EDC  2F00               	goto	l4256
 13810  1EDD  01F7               	clrf	___awmod@counter
 13811  1EDE  0AF7               	incf	___awmod@counter,f
 13812  1EDF                     l4246:	
 13813  1EDF  1BF3               	btfsc	___awmod@divisor+1,7
 13814  1EE0  2EEB               	goto	l4248
 13815  1EE1  3001               	movlw	1
 13816  1EE2                     u3645:	
 13817  1EE2  35F2               	lslf	___awmod@divisor,f
 13818  1EE3  0DF3               	rlf	___awmod@divisor+1,f
 13819  1EE4  0B89               	decfsz	9,f
 13820  1EE5  2EE2               	goto	u3645
 13821  1EE6  3001               	movlw	1
 13822  1EE7  00F6               	movwf	??___awmod
 13823  1EE8  0876               	movf	??___awmod,w
 13824  1EE9  07F7               	addwf	___awmod@counter,f
 13825  1EEA  2EDF               	goto	l4246
 13826  1EEB                     l4248:	
 13827  1EEB  0873               	movf	___awmod@divisor+1,w
 13828  1EEC  0275               	subwf	___awmod@dividend+1,w
 13829  1EED  1D03               	skipz
 13830  1EEE  2EF1               	goto	u3665
 13831  1EEF  0872               	movf	___awmod@divisor,w
 13832  1EF0  0274               	subwf	___awmod@dividend,w
 13833  1EF1                     u3665:	
 13834  1EF1  1C03               	skipc
 13835  1EF2  2EF7               	goto	l4252
 13836  1EF3  0872               	movf	___awmod@divisor,w
 13837  1EF4  02F4               	subwf	___awmod@dividend,f
 13838  1EF5  0873               	movf	___awmod@divisor+1,w
 13839  1EF6  3BF5               	subwfb	___awmod@dividend+1,f
 13840  1EF7                     l4252:	
 13841  1EF7  3001               	movlw	1
 13842  1EF8                     u3675:	
 13843  1EF8  36F3               	lsrf	___awmod@divisor+1,f
 13844  1EF9  0CF2               	rrf	___awmod@divisor,f
 13845  1EFA  0B89               	decfsz	9,f
 13846  1EFB  2EF8               	goto	u3675
 13847  1EFC  3001               	movlw	1
 13848  1EFD  02F7               	subwf	___awmod@counter,f
 13849  1EFE  1D03               	btfss	3,2
 13850  1EFF  2EEB               	goto	l4248
 13851  1F00                     l4256:	
 13852  1F00  0878               	movf	___awmod@sign,w
 13853  1F01  1903               	btfsc	3,2
 13854  1F02  2F08               	goto	l4260
 13855  1F03  09F4               	comf	___awmod@dividend,f
 13856  1F04  09F5               	comf	___awmod@dividend+1,f
 13857  1F05  0AF4               	incf	___awmod@dividend,f
 13858  1F06  1903               	skipnz
 13859  1F07  0AF5               	incf	___awmod@dividend+1,f
 13860  1F08                     l4260:	
 13861  1F08  0875               	movf	___awmod@dividend+1,w
 13862  1F09  00F3               	movwf	?___awmod+1
 13863  1F0A  0874               	movf	___awmod@dividend,w
 13864  1F0B  00F2               	movwf	?___awmod
 13865  1F0C  0008               	return
 13866  1F0D                     __end_of___awmod:	
 13867                           
 13868                           	psect	text31
 13869  1449                     __ptext31:	
 13870 ;; *************** function _check_ADO_I2C *****************
 13871 ;; Defined at:
 13872 ;;		line 2989 in file "main.c"
 13873 ;; Parameters:    Size  Location     Type
 13874 ;;		None
 13875 ;; Auto vars:     Size  Location     Type
 13876 ;;		None
 13877 ;; Return value:  Size  Location     Type
 13878 ;;		None               void
 13879 ;; Registers used:
 13880 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13881 ;; Tracked objects:
 13882 ;;		On entry : 0/0
 13883 ;;		On exit  : 0/0
 13884 ;;		Unchanged: 0/0
 13885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13888 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13889 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13890 ;;Total ram usage:        2 bytes
 13891 ;; Hardware stack levels used:    1
 13892 ;; Hardware stack levels required when called:    7
 13893 ;; This function calls:
 13894 ;;		_I2C_mREAD
 13895 ;;		_I2C_mWrite
 13896 ;;		_Print_HEX2Str
 13897 ;;		_Print_String
 13898 ;; This function is called by:
 13899 ;;		_TEST_PIC_ALL
 13900 ;; This function uses a non-reentrant model
 13901 ;;
 13902                           
 13903                           
 13904                           ;psect for function _check_ADO_I2C
 13905  1449                     _check_ADO_I2C:	
 13906                           
 13907                           ;main.c: 2994: *(BufferRec+0) = 0x00;
 13908                           
 13909                           ;incstack = 0
 13910                           ; Regs used in _check_ADO_I2C: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13911  1449  0023               	movlb	3	; select bank3
 13912  144A  01A8               	clrf	_BufferRec^(0+384)
 13913                           
 13914                           ;main.c: 2995: *(BufferRec+1) = 0xC0;
 13915  144B  30C0               	movlw	192
 13916  144C  0020               	movlb	0	; select bank0
 13917  144D  00A8               	movwf	??_check_ADO_I2C
 13918  144E  0828               	movf	??_check_ADO_I2C,w
 13919  144F  0023               	movlb	3	; select bank3
 13920  1450  00A9               	movwf	(_BufferRec^(0+384)+1)
 13921                           
 13922                           ;main.c: 2996: *(BufferRec+2) = 0x02;
 13923  1451  3002               	movlw	2
 13924  1452  0020               	movlb	0	; select bank0
 13925  1453  00A8               	movwf	??_check_ADO_I2C
 13926  1454  0828               	movf	??_check_ADO_I2C,w
 13927  1455  0023               	movlb	3	; select bank3
 13928  1456  00AA               	movwf	(_BufferRec^(0+384)+2)
 13929                           
 13930                           ;main.c: 2997: I2C_mWrite(BufferRec, 3+1, 0x10);
 13931  1457  30A8               	movlw	low _BufferRec
 13932  1458  00F6               	movwf	I2C_mWrite@value
 13933  1459  3001               	movlw	high _BufferRec
 13934  145A  00F7               	movwf	I2C_mWrite@value+1
 13935  145B  3004               	movlw	4
 13936  145C  0020               	movlb	0	; select bank0
 13937  145D  00A8               	movwf	??_check_ADO_I2C
 13938  145E  0828               	movf	??_check_ADO_I2C,w
 13939  145F  00F8               	movwf	I2C_mWrite@Size
 13940  1460  3010               	movlw	16
 13941  1461  00A9               	movwf	??_check_ADO_I2C+1
 13942  1462  0829               	movf	??_check_ADO_I2C+1,w
 13943  1463  00F9               	movwf	I2C_mWrite@slave_addr
 13944  1464  319E  2683  3194   	fcall	_I2C_mWrite
 13945                           
 13946                           ;main.c: 2998: I2C_mREAD(BufferRec, 2, 0x10);
 13947  1467  3002               	movlw	2
 13948  1468  0020               	movlb	0	; select bank0
 13949  1469  00A8               	movwf	??_check_ADO_I2C
 13950  146A  0828               	movf	??_check_ADO_I2C,w
 13951  146B  00F7               	movwf	I2C_mREAD@Size
 13952  146C  3010               	movlw	16
 13953  146D  00A9               	movwf	??_check_ADO_I2C+1
 13954  146E  0829               	movf	??_check_ADO_I2C+1,w
 13955  146F  00F8               	movwf	I2C_mREAD@slave_addr
 13956  1470  30A8               	movlw	(low (_BufferRec| (0+256)))& (0+255)
 13957  1471  319E  263E  3194   	fcall	_I2C_mREAD
 13958                           
 13959                           ;main.c: 3001: Print_String("Check 0xC0 =0x$", 0);
 13960  1474  303C               	movlw	low (STR_48| (0+32768))
 13961  1475  00F4               	movwf	Print_String@BStr
 13962  1476  3092               	movlw	high (STR_48| (0+32768))
 13963  1477  00F5               	movwf	Print_String@BStr+1
 13964  1478  01F6               	clrf	Print_String@chln
 13965  1479  319B  238A  3194   	fcall	_Print_String
 13966                           
 13967                           ;main.c: 3002: Print_HEX2Str(*BufferRec, 1);
 13968  147C  01F7               	clrf	Print_HEX2Str@Chgln
 13969  147D  0AF7               	incf	Print_HEX2Str@Chgln,f
 13970  147E  0023               	movlb	3	; select bank3
 13971  147F  0828               	movf	_BufferRec^(0+384),w
 13972  1480  319F  270D  3194   	fcall	_Print_HEX2Str
 13973                           
 13974                           ;main.c: 3003: Print_String("Check 0xC1 =0x$", 0);
 13975  1483  304C               	movlw	low (STR_49| (0+32768))
 13976  1484  00F4               	movwf	Print_String@BStr
 13977  1485  3092               	movlw	high (STR_49| (0+32768))
 13978  1486  00F5               	movwf	Print_String@BStr+1
 13979  1487  01F6               	clrf	Print_String@chln
 13980  1488  319B  238A  3194   	fcall	_Print_String
 13981                           
 13982                           ;main.c: 3004: Print_HEX2Str(*(BufferRec+1), 1);
 13983  148B  01F7               	clrf	Print_HEX2Str@Chgln
 13984  148C  0AF7               	incf	Print_HEX2Str@Chgln,f
 13985  148D  0023               	movlb	3	; select bank3
 13986  148E  0829               	movf	(_BufferRec^(0+384)+1),w
 13987  148F  319F  270D  3194   	fcall	_Print_HEX2Str
 13988                           
 13989                           ;main.c: 3006: if( (*BufferRec != 0x73) || (*(BufferRec+1) != 0x10) )
 13990  1492  3073               	movlw	115
 13991  1493  0023               	movlb	3	; select bank3
 13992  1494  0628               	xorwf	_BufferRec^(0+384),w
 13993  1495  1D03               	btfss	3,2
 13994  1496  2C9B               	goto	l6896
 13995  1497  3010               	movlw	16
 13996  1498  0629               	xorwf	(_BufferRec^(0+384)+1),w
 13997  1499  1903               	btfsc	3,2
 13998  149A  0008               	return
 13999  149B                     l6896:	
 14000                           
 14001                           ;main.c: 3007: {
 14002                           ;main.c: 3008: ErrorFlag = 0x10;
 14003  149B  3010               	movlw	16
 14004  149C  0020               	movlb	0	; select bank0
 14005  149D  00A8               	movwf	??_check_ADO_I2C
 14006  149E  0828               	movf	??_check_ADO_I2C,w
 14007  149F  0022               	movlb	2	; select bank2
 14008  14A0  00CB               	movwf	_ErrorFlag^(0+256)
 14009                           
 14010                           ;main.c: 3009: Print_String("Set Error Flag = I2C$", 1);
 14011  14A1  308E               	movlw	low (STR_53| (0+32768))
 14012  14A2  00F4               	movwf	Print_String@BStr
 14013  14A3  3091               	movlw	high (STR_53| (0+32768))
 14014  14A4  00F5               	movwf	Print_String@BStr+1
 14015  14A5  01F6               	clrf	Print_String@chln
 14016  14A6  0AF6               	incf	Print_String@chln,f
 14017  14A7  319B  238A         	fcall	_Print_String
 14018  14A9  0008               	return
 14019  14AA                     __end_of_check_ADO_I2C:	
 14020                           
 14021                           	psect	text32
 14022  1AAC                     __ptext32:	
 14023 ;; *************** function _Print_BreakLine *****************
 14024 ;; Defined at:
 14025 ;;		line 1409 in file "main.c"
 14026 ;; Parameters:    Size  Location     Type
 14027 ;;		None
 14028 ;; Auto vars:     Size  Location     Type
 14029 ;;  loopA           2    4[COMMON] unsigned int 
 14030 ;; Return value:  Size  Location     Type
 14031 ;;		None               void
 14032 ;; Registers used:
 14033 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14034 ;; Tracked objects:
 14035 ;;		On entry : 0/0
 14036 ;;		On exit  : 0/0
 14037 ;;		Unchanged: 0/0
 14038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14040 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14043 ;;Total ram usage:        2 bytes
 14044 ;; Hardware stack levels used:    1
 14045 ;; Hardware stack levels required when called:    5
 14046 ;; This function calls:
 14047 ;;		_EUSART_Write
 14048 ;;		_Print_CHLN
 14049 ;; This function is called by:
 14050 ;;		_TEST_PIC_ALL
 14051 ;; This function uses a non-reentrant model
 14052 ;;
 14053                           
 14054                           
 14055                           ;psect for function _Print_BreakLine
 14056  1AAC                     _Print_BreakLine:	
 14057                           
 14058                           ;main.c: 1411: uint16_t loopA = 0;
 14059                           
 14060                           ;incstack = 0
 14061                           ; Regs used in _Print_BreakLine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14062  1AAC  01F4               	clrf	Print_BreakLine@loopA
 14063  1AAD  01F5               	clrf	Print_BreakLine@loopA+1
 14064                           
 14065                           ;main.c: 1413: for(loopA = 0; loopA < 60; loopA++)
 14066  1AAE  01F4               	clrf	Print_BreakLine@loopA
 14067  1AAF  01F5               	clrf	Print_BreakLine@loopA+1
 14068  1AB0  3000               	movlw	0
 14069  1AB1  0275               	subwf	Print_BreakLine@loopA+1,w
 14070  1AB2  303C               	movlw	60
 14071  1AB3  1903               	skipnz
 14072  1AB4  0274               	subwf	Print_BreakLine@loopA,w
 14073  1AB5  1803               	btfsc	3,0
 14074  1AB6  2AC6               	goto	l6872
 14075  1AB7                     l6866:	
 14076                           
 14077                           ;main.c: 1414: EUSART_Write('-');
 14078  1AB7  302D               	movlw	45
 14079  1AB8  319B  2366  319A   	fcall	_EUSART_Write
 14080  1ABB  3001               	movlw	1
 14081  1ABC  07F4               	addwf	Print_BreakLine@loopA,f
 14082  1ABD  3000               	movlw	0
 14083  1ABE  3DF5               	addwfc	Print_BreakLine@loopA+1,f
 14084  1ABF  3000               	movlw	0
 14085  1AC0  0275               	subwf	Print_BreakLine@loopA+1,w
 14086  1AC1  303C               	movlw	60
 14087  1AC2  1903               	skipnz
 14088  1AC3  0274               	subwf	Print_BreakLine@loopA,w
 14089  1AC4  1C03               	skipc
 14090  1AC5  2AB7               	goto	l6866
 14091  1AC6                     l6872:	
 14092                           
 14093                           ;main.c: 1416: Print_CHLN();
 14094  1AC6  3199  211C         	fcall	_Print_CHLN
 14095  1AC8  0008               	return
 14096  1AC9                     __end_of_Print_BreakLine:	
 14097                           
 14098                           	psect	text33
 14099  0890                     __ptext33:	
 14100 ;; *************** function _DS18B20_GetTemp *****************
 14101 ;; Defined at:
 14102 ;;		line 1711 in file "main.c"
 14103 ;; Parameters:    Size  Location     Type
 14104 ;;  rTwoByte        1    wreg     PTR unsigned char 
 14105 ;;		 -> BufferGetTemp(2), 
 14106 ;; Auto vars:     Size  Location     Type
 14107 ;;  rTwoByte        1   15[BANK0 ] PTR unsigned char 
 14108 ;;		 -> BufferGetTemp(2), 
 14109 ;;  xTemp           2   16[BANK0 ] unsigned int 
 14110 ;;  vByteHi         1   19[BANK0 ] unsigned char 
 14111 ;;  vByteLow        1   18[BANK0 ] unsigned char 
 14112 ;;  ack             1   14[BANK0 ] unsigned char 
 14113 ;; Return value:  Size  Location     Type
 14114 ;;		None               void
 14115 ;; Registers used:
 14116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14117 ;; Tracked objects:
 14118 ;;		On entry : 0/0
 14119 ;;		On exit  : 0/0
 14120 ;;		Unchanged: 0/0
 14121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14123 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14125 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14126 ;;Total ram usage:        8 bytes
 14127 ;; Hardware stack levels used:    1
 14128 ;; Hardware stack levels required when called:    6
 14129 ;; This function calls:
 14130 ;;		_DS18B20_Read
 14131 ;;		_DS18B20_Reset
 14132 ;;		_DS18B20_Write
 14133 ;;		_Delay480us
 14134 ;;		_Print_HEX2Str
 14135 ;;		_Print_String
 14136 ;;		_Print_uint16Str
 14137 ;; This function is called by:
 14138 ;;		_Decode_RS232_CMD
 14139 ;;		_UPLOAD_MESURE_REC
 14140 ;;		_TEST_PIC_ALL
 14141 ;; This function uses a non-reentrant model
 14142 ;;
 14143                           
 14144                           
 14145                           ;psect for function _DS18B20_GetTemp
 14146  0890                     _DS18B20_GetTemp:	
 14147                           
 14148                           ;incstack = 0
 14149                           ; Regs used in _DS18B20_GetTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14150                           ;DS18B20_GetTemp@rTwoByte stored from wreg
 14151  0890  0020               	movlb	0	; select bank0
 14152  0891  00AF               	movwf	DS18B20_GetTemp@rTwoByte
 14153                           
 14154                           ;main.c: 1713: uint8_t vByteHi = 0;
 14155  0892  01B3               	clrf	DS18B20_GetTemp@vByteHi
 14156                           
 14157                           ;main.c: 1714: uint8_t vByteLow = 0;
 14158  0893  01B2               	clrf	DS18B20_GetTemp@vByteLow
 14159                           
 14160                           ;main.c: 1715: uint8_t ack = 1;
 14161  0894  01AE               	clrf	DS18B20_GetTemp@ack
 14162  0895  0AAE               	incf	DS18B20_GetTemp@ack,f
 14163                           
 14164                           ;main.c: 1717: uint16_t xTemp = 0;
 14165  0896  01B0               	clrf	DS18B20_GetTemp@xTemp
 14166  0897  01B1               	clrf	DS18B20_GetTemp@xTemp+1
 14167                           
 14168                           ;main.c: 1719: DS18B20_Reset();
 14169  0898  3199  21DC  3188   	fcall	_DS18B20_Reset
 14170                           
 14171                           ;main.c: 1724: DS18B20_Write(0xcc);
 14172  089B  30CC               	movlw	204
 14173  089C  319C  2454  3188   	fcall	_DS18B20_Write
 14174                           
 14175                           ;main.c: 1725: DS18B20_Write(0x44);
 14176  089F  3044               	movlw	68
 14177  08A0  319C  2454  3188   	fcall	_DS18B20_Write
 14178                           
 14179                           ;main.c: 1727: Delay480us();
 14180  08A3  3199  2197  3188   	fcall	_Delay480us
 14181                           
 14182                           ;main.c: 1730: DS18B20_Reset();
 14183  08A6  3199  21DC  3188   	fcall	_DS18B20_Reset
 14184                           
 14185                           ;main.c: 1731: DS18B20_Write(0xcc);
 14186  08A9  30CC               	movlw	204
 14187  08AA  319C  2454  3188   	fcall	_DS18B20_Write
 14188                           
 14189                           ;main.c: 1732: DS18B20_Write(0xbe);
 14190  08AD  30BE               	movlw	190
 14191  08AE  319C  2454  3188   	fcall	_DS18B20_Write
 14192                           
 14193                           ;main.c: 1735: vByteLow = DS18B20_Read();
 14194  08B1  319B  23D4  3188   	fcall	_DS18B20_Read
 14195  08B4  0020               	movlb	0	; select bank0
 14196  08B5  00AC               	movwf	??_DS18B20_GetTemp
 14197  08B6  082C               	movf	??_DS18B20_GetTemp,w
 14198  08B7  00B2               	movwf	DS18B20_GetTemp@vByteLow
 14199                           
 14200                           ;main.c: 1736: vByteHi = DS18B20_Read();
 14201  08B8  319B  23D4  3188   	fcall	_DS18B20_Read
 14202  08BB  0020               	movlb	0	; select bank0
 14203  08BC  00AC               	movwf	??_DS18B20_GetTemp
 14204  08BD  082C               	movf	??_DS18B20_GetTemp,w
 14205  08BE  00B3               	movwf	DS18B20_GetTemp@vByteHi
 14206                           
 14207                           ;main.c: 1739: if(vByteHi && 0xF0)
 14208  08BF  0833               	movf	DS18B20_GetTemp@vByteHi,w
 14209  08C0  1903               	btfsc	3,2
 14210  08C1  28DE               	goto	l6826
 14211                           
 14212                           ;main.c: 1740: {
 14213                           ;main.c: 1741: Delay480us();
 14214  08C2  3199  2197  3188   	fcall	_Delay480us
 14215                           
 14216                           ;main.c: 1742: DS18B20_Reset();
 14217  08C5  3199  21DC  3188   	fcall	_DS18B20_Reset
 14218                           
 14219                           ;main.c: 1743: DS18B20_Write(0xcc);
 14220  08C8  30CC               	movlw	204
 14221  08C9  319C  2454  3188   	fcall	_DS18B20_Write
 14222                           
 14223                           ;main.c: 1744: DS18B20_Write(0xbe);
 14224  08CC  30BE               	movlw	190
 14225  08CD  319C  2454  3188   	fcall	_DS18B20_Write
 14226                           
 14227                           ;main.c: 1745: vByteLow = DS18B20_Read();
 14228  08D0  319B  23D4  3188   	fcall	_DS18B20_Read
 14229  08D3  0020               	movlb	0	; select bank0
 14230  08D4  00AC               	movwf	??_DS18B20_GetTemp
 14231  08D5  082C               	movf	??_DS18B20_GetTemp,w
 14232  08D6  00B2               	movwf	DS18B20_GetTemp@vByteLow
 14233                           
 14234                           ;main.c: 1746: vByteHi = DS18B20_Read();
 14235  08D7  319B  23D4  3188   	fcall	_DS18B20_Read
 14236  08DA  0020               	movlb	0	; select bank0
 14237  08DB  00AC               	movwf	??_DS18B20_GetTemp
 14238  08DC  082C               	movf	??_DS18B20_GetTemp,w
 14239  08DD  00B3               	movwf	DS18B20_GetTemp@vByteHi
 14240  08DE                     l6826:	
 14241                           
 14242                           ;main.c: 1747: }
 14243                           ;main.c: 1749: if(vByteHi && 0xF0)
 14244  08DE  0833               	movf	DS18B20_GetTemp@vByteHi,w
 14245  08DF  1903               	btfsc	3,2
 14246  08E0  28E6               	goto	l6830
 14247                           
 14248                           ;main.c: 1750: {
 14249                           ;main.c: 1751: ErrorFlag &= 0x01;
 14250  08E1  3001               	movlw	1
 14251  08E2  00AC               	movwf	??_DS18B20_GetTemp
 14252  08E3  082C               	movf	??_DS18B20_GetTemp,w
 14253  08E4  0022               	movlb	2	; select bank2
 14254  08E5  05CB               	andwf	_ErrorFlag^(0+256),f
 14255  08E6                     l6830:	
 14256                           
 14257                           ;main.c: 1752: }
 14258                           ;main.c: 1756: xTemp = vByteHi;
 14259  08E6  0020               	movlb	0	; select bank0
 14260  08E7  0833               	movf	DS18B20_GetTemp@vByteHi,w
 14261  08E8  00AC               	movwf	??_DS18B20_GetTemp
 14262  08E9  01AD               	clrf	??_DS18B20_GetTemp+1
 14263  08EA  082C               	movf	??_DS18B20_GetTemp,w
 14264  08EB  00B0               	movwf	DS18B20_GetTemp@xTemp
 14265  08EC  082D               	movf	??_DS18B20_GetTemp+1,w
 14266  08ED  00B1               	movwf	DS18B20_GetTemp@xTemp+1
 14267                           
 14268                           ;main.c: 1757: xTemp *= 256;
 14269  08EE  3008               	movlw	8
 14270  08EF                     u7425:	
 14271  08EF  35B0               	lslf	DS18B20_GetTemp@xTemp,f
 14272  08F0  0DB1               	rlf	DS18B20_GetTemp@xTemp+1,f
 14273  08F1  0B89               	decfsz	9,f
 14274  08F2  28EF               	goto	u7425
 14275                           
 14276                           ;main.c: 1758: xTemp += vByteLow;
 14277  08F3  0832               	movf	DS18B20_GetTemp@vByteLow,w
 14278  08F4  00AC               	movwf	??_DS18B20_GetTemp
 14279  08F5  01AD               	clrf	??_DS18B20_GetTemp+1
 14280  08F6  082C               	movf	??_DS18B20_GetTemp,w
 14281  08F7  07B0               	addwf	DS18B20_GetTemp@xTemp,f
 14282  08F8  082D               	movf	??_DS18B20_GetTemp+1,w
 14283  08F9  3DB1               	addwfc	DS18B20_GetTemp@xTemp+1,f
 14284                           
 14285                           ;main.c: 1759: xTemp /= 16;
 14286  08FA  3004               	movlw	4
 14287  08FB                     u7435:	
 14288  08FB  36B1               	lsrf	DS18B20_GetTemp@xTemp+1,f
 14289  08FC  0CB0               	rrf	DS18B20_GetTemp@xTemp,f
 14290  08FD  0B89               	decfsz	9,f
 14291  08FE  28FB               	goto	u7435
 14292                           
 14293                           ;main.c: 1763: *(rTwoByte + 0) = vByteHi;
 14294  08FF  0833               	movf	DS18B20_GetTemp@vByteHi,w
 14295  0900  00AC               	movwf	??_DS18B20_GetTemp
 14296  0901  082F               	movf	DS18B20_GetTemp@rTwoByte,w
 14297  0902  0086               	movwf	6
 14298  0903  3001               	movlw	1	; select bank2/3
 14299  0904  0087               	movwf	7
 14300  0905  082C               	movf	??_DS18B20_GetTemp,w
 14301  0906  0081               	movwf	1
 14302                           
 14303                           ;main.c: 1764: *(rTwoByte + 1) = vByteLow;
 14304  0907  0832               	movf	DS18B20_GetTemp@vByteLow,w
 14305  0908  00AC               	movwf	??_DS18B20_GetTemp
 14306  0909  0A2F               	incf	DS18B20_GetTemp@rTwoByte,w
 14307  090A  0086               	movwf	6
 14308  090B  3001               	movlw	1	; select bank2/3
 14309  090C  0087               	movwf	7
 14310  090D  082C               	movf	??_DS18B20_GetTemp,w
 14311  090E  0081               	movwf	1
 14312                           
 14313                           ;main.c: 1766: REC_METER_VAL.Rec_Temp = xTemp;
 14314  090F  0831               	movf	DS18B20_GetTemp@xTemp+1,w
 14315  0910  0022               	movlb	2	; select bank2
 14316  0911  00A1               	movwf	(_REC_METER_VAL+1)^(0+256)
 14317  0912  0020               	movlb	0	; select bank0
 14318  0913  0830               	movf	DS18B20_GetTemp@xTemp,w
 14319  0914  0022               	movlb	2	; select bank2
 14320  0915  00A0               	movwf	_REC_METER_VAL^(0+256)
 14321                           
 14322                           ;main.c: 1768: Print_String("Mesure Temp DATA = $", 0);
 14323  0916  30A4               	movlw	low (STR_37| (0+32768))
 14324  0917  00F4               	movwf	Print_String@BStr
 14325  0918  3091               	movlw	high (STR_37| (0+32768))
 14326  0919  00F5               	movwf	Print_String@BStr+1
 14327  091A  01F6               	clrf	Print_String@chln
 14328  091B  319B  238A  3188   	fcall	_Print_String
 14329                           
 14330                           ;main.c: 1769: Print_String("0x$", 0);
 14331  091E  30F2               	movlw	low ((STR_39+2)| (0+32768))
 14332  091F  00F4               	movwf	Print_String@BStr
 14333  0920  3092               	movlw	high ((STR_39+2)| (0+32768))
 14334  0921  00F5               	movwf	Print_String@BStr+1
 14335  0922  01F6               	clrf	Print_String@chln
 14336  0923  319B  238A  3188   	fcall	_Print_String
 14337                           
 14338                           ;main.c: 1770: Print_HEX2Str(vByteHi, 0);
 14339  0926  01F7               	clrf	Print_HEX2Str@Chgln
 14340  0927  0020               	movlb	0	; select bank0
 14341  0928  0833               	movf	DS18B20_GetTemp@vByteHi,w
 14342  0929  319F  270D  3188   	fcall	_Print_HEX2Str
 14343                           
 14344                           ;main.c: 1771: Print_String(", 0x$", 0);
 14345  092C  30F0               	movlw	low (STR_39| (0+32768))
 14346  092D  00F4               	movwf	Print_String@BStr
 14347  092E  3092               	movlw	high (STR_39| (0+32768))
 14348  092F  00F5               	movwf	Print_String@BStr+1
 14349  0930  01F6               	clrf	Print_String@chln
 14350  0931  319B  238A  3188   	fcall	_Print_String
 14351                           
 14352                           ;main.c: 1772: Print_HEX2Str(vByteLow, 1);
 14353  0934  01F7               	clrf	Print_HEX2Str@Chgln
 14354  0935  0AF7               	incf	Print_HEX2Str@Chgln,f
 14355  0936  0020               	movlb	0	; select bank0
 14356  0937  0832               	movf	DS18B20_GetTemp@vByteLow,w
 14357  0938  319F  270D  3188   	fcall	_Print_HEX2Str
 14358                           
 14359                           ;main.c: 1773: Print_uint16Str(xTemp,1);
 14360  093B  0020               	movlb	0	; select bank0
 14361  093C  0831               	movf	DS18B20_GetTemp@xTemp+1,w
 14362  093D  00A1               	movwf	Print_uint16Str@InputVol+1
 14363  093E  0830               	movf	DS18B20_GetTemp@xTemp,w
 14364  093F  00A0               	movwf	Print_uint16Str@InputVol
 14365  0940  01A2               	clrf	Print_uint16Str@Chgln
 14366  0941  0AA2               	incf	Print_uint16Str@Chgln,f
 14367  0942  3196  2655         	fcall	_Print_uint16Str
 14368  0944  0008               	return
 14369  0945                     __end_of_DS18B20_GetTemp:	
 14370                           
 14371                           	psect	text34
 14372  1C54                     __ptext34:	
 14373 ;; *************** function _DS18B20_Write *****************
 14374 ;; Defined at:
 14375 ;;		line 1595 in file "main.c"
 14376 ;; Parameters:    Size  Location     Type
 14377 ;;  vByte           1    wreg     unsigned char 
 14378 ;; Auto vars:     Size  Location     Type
 14379 ;;  vByte           1    6[COMMON] unsigned char 
 14380 ;;  i               1    7[COMMON] unsigned char 
 14381 ;; Return value:  Size  Location     Type
 14382 ;;		None               void
 14383 ;; Registers used:
 14384 ;;		wreg, status,2, status,0, pclath, cstack
 14385 ;; Tracked objects:
 14386 ;;		On entry : 0/0
 14387 ;;		On exit  : 0/0
 14388 ;;		Unchanged: 0/0
 14389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14391 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14392 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14393 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14394 ;;Total ram usage:        3 bytes
 14395 ;; Hardware stack levels used:    1
 14396 ;; Hardware stack levels required when called:    4
 14397 ;; This function calls:
 14398 ;;		_Delay100us
 14399 ;;		_Delay5us
 14400 ;; This function is called by:
 14401 ;;		_DS18B20_GetTemp
 14402 ;; This function uses a non-reentrant model
 14403 ;;
 14404                           
 14405                           
 14406                           ;psect for function _DS18B20_Write
 14407  1C54                     _DS18B20_Write:	
 14408                           
 14409                           ;incstack = 0
 14410                           ; Regs used in _DS18B20_Write: [wreg+status,2+status,0+pclath+cstack]
 14411                           ;DS18B20_Write@vByte stored from wreg
 14412  1C54  00F6               	movwf	DS18B20_Write@vByte
 14413                           
 14414                           ;main.c: 1597: uint8_t i;
 14415                           ;main.c: 1600: for(i=0;i<8;i++)
 14416  1C55  01F7               	clrf	DS18B20_Write@i
 14417  1C56  3008               	movlw	8
 14418  1C57  0277               	subwf	DS18B20_Write@i,w
 14419  1C58  1803               	btfsc	3,0
 14420  1C59  2C80               	goto	l4712
 14421  1C5A                     l881:	
 14422                           ;main.c: 1601: {
 14423                           ;main.c: 1602: do { LATD4 = 0; } while(0);
 14424                           
 14425  1C5A  0022               	movlb	2	; select bank2
 14426  1C5B  120F               	bcf	15,4	;volatile
 14427                           
 14428                           ;main.c: 1603: Delay5us();
 14429  1C5C  3180  2002  319C   	fcall	_Delay5us
 14430                           
 14431                           ;main.c: 1605: if( (vByte & 0x01) == 1)
 14432  1C5F  1C76               	btfss	DS18B20_Write@vByte,0
 14433  1C60  2C6C               	goto	l889
 14434                           
 14435                           ;main.c: 1606: {
 14436                           ;main.c: 1607: do { LATD4 = 0; } while(0);
 14437  1C61  0022               	movlb	2	; select bank2
 14438  1C62  120F               	bcf	15,4	;volatile
 14439                           
 14440                           ;main.c: 1608: Delay5us();
 14441  1C63  3180  2002  319C   	fcall	_Delay5us
 14442                           
 14443                           ;main.c: 1609: do { LATD4 = 1; } while(0);
 14444  1C66  0022               	movlb	2	; select bank2
 14445  1C67  160F               	bsf	15,4	;volatile
 14446                           
 14447                           ;main.c: 1610: Delay100us();
 14448  1C68  3199  2188  319C   	fcall	_Delay100us
 14449                           
 14450                           ;main.c: 1611: }
 14451  1C6B  2C76               	goto	l888
 14452  1C6C                     l889:	
 14453                           ;main.c: 1612: else
 14454                           ;main.c: 1613: {
 14455                           ;main.c: 1614: do { LATD4 = 0; } while(0);
 14456                           
 14457  1C6C  0022               	movlb	2	; select bank2
 14458  1C6D  120F               	bcf	15,4	;volatile
 14459                           
 14460                           ;main.c: 1615: Delay100us();
 14461  1C6E  3199  2188  319C   	fcall	_Delay100us
 14462                           
 14463                           ;main.c: 1616: do { LATD4 = 1; } while(0);
 14464  1C71  0022               	movlb	2	; select bank2
 14465  1C72  160F               	bsf	15,4	;volatile
 14466                           
 14467                           ;main.c: 1617: Delay5us();
 14468  1C73  3180  2002  319C   	fcall	_Delay5us
 14469  1C76                     l888:	
 14470                           
 14471                           ;main.c: 1618: }
 14472                           ;main.c: 1619: vByte >>= 1;
 14473  1C76  1003               	clrc
 14474  1C77  0CF6               	rrf	DS18B20_Write@vByte,f
 14475  1C78  3001               	movlw	1
 14476  1C79  00F5               	movwf	??_DS18B20_Write
 14477  1C7A  0875               	movf	??_DS18B20_Write,w
 14478  1C7B  07F7               	addwf	DS18B20_Write@i,f
 14479  1C7C  3008               	movlw	8
 14480  1C7D  0277               	subwf	DS18B20_Write@i,w
 14481  1C7E  1C03               	skipc
 14482  1C7F  2C5A               	goto	l881
 14483  1C80                     l4712:	
 14484                           
 14485                           ;main.c: 1620: }
 14486                           ;main.c: 1622: Delay5us();
 14487  1C80  3180  2002         	fcall	_Delay5us
 14488  1C82  0008               	return
 14489  1C83                     __end_of_DS18B20_Write:	
 14490                           
 14491                           	psect	text35
 14492  19DC                     __ptext35:	
 14493 ;; *************** function _DS18B20_Reset *****************
 14494 ;; Defined at:
 14495 ;;		line 1538 in file "main.c"
 14496 ;; Parameters:    Size  Location     Type
 14497 ;;		None
 14498 ;; Auto vars:     Size  Location     Type
 14499 ;;  vByte           1    5[COMMON] unsigned char 
 14500 ;; Return value:  Size  Location     Type
 14501 ;;                  1    wreg      unsigned char 
 14502 ;; Registers used:
 14503 ;;		wreg, status,2, status,0, pclath, cstack
 14504 ;; Tracked objects:
 14505 ;;		On entry : 0/0
 14506 ;;		On exit  : 0/0
 14507 ;;		Unchanged: 0/0
 14508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14510 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14512 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14513 ;;Total ram usage:        1 bytes
 14514 ;; Hardware stack levels used:    1
 14515 ;; Hardware stack levels required when called:    4
 14516 ;; This function calls:
 14517 ;;		_Delay480us
 14518 ;; This function is called by:
 14519 ;;		_DS18B20_GetTemp
 14520 ;; This function uses a non-reentrant model
 14521 ;;
 14522                           
 14523                           
 14524                           ;psect for function _DS18B20_Reset
 14525  19DC                     _DS18B20_Reset:	
 14526                           
 14527                           ;main.c: 1540: uint8_t vByte = 0;
 14528                           
 14529                           ;incstack = 0
 14530                           ; Regs used in _DS18B20_Reset: [wreg+status,2+status,0+pclath+cstack]
 14531  19DC  01F5               	clrf	DS18B20_Reset@vByte
 14532                           
 14533                           ;main.c: 1543: do { LATD4 = 0; } while(0);
 14534  19DD  0022               	movlb	2	; select bank2
 14535  19DE  120F               	bcf	15,4	;volatile
 14536                           
 14537                           ;main.c: 1544: Delay480us();
 14538  19DF  3199  2197  3199   	fcall	_Delay480us
 14539                           
 14540                           ;main.c: 1546: do { TRISD4 = 1; } while(0);
 14541  19E2  0021               	movlb	1	; select bank1
 14542  19E3  160F               	bsf	15,4	;volatile
 14543                           
 14544                           ;main.c: 1550: vByte = RD4;
 14545  19E4  3000               	movlw	0
 14546  19E5  0020               	movlb	0	; select bank0
 14547  19E6  1A0F               	btfsc	15,4	;volatile
 14548  19E7  3001               	movlw	1
 14549  19E8  00F5               	movwf	DS18B20_Reset@vByte
 14550                           
 14551                           ;main.c: 1553: do { TRISD4 = 0; } while(0);
 14552  19E9  0021               	movlb	1	; select bank1
 14553  19EA  120F               	bcf	15,4	;volatile
 14554                           
 14555                           ;main.c: 1555: do { LATD4 = 1; } while(0);
 14556  19EB  0022               	movlb	2	; select bank2
 14557  19EC  160F               	bsf	15,4	;volatile
 14558                           
 14559                           ;main.c: 1556: Delay480us();
 14560  19ED  3199  2197         	fcall	_Delay480us
 14561  19EF  0008               	return
 14562  19F0                     __end_of_DS18B20_Reset:	
 14563                           ;main.c: 1559: return vByte;
 14564                           ;	Return value of _DS18B20_Reset is never used
 14565                           
 14566                           
 14567                           	psect	text36
 14568  1997                     __ptext36:	
 14569 ;; *************** function _Delay480us *****************
 14570 ;; Defined at:
 14571 ;;		line 1787 in file "main.c"
 14572 ;; Parameters:    Size  Location     Type
 14573 ;;		None
 14574 ;; Auto vars:     Size  Location     Type
 14575 ;;  i               1    4[COMMON] unsigned char 
 14576 ;;  s               1    3[COMMON] unsigned char 
 14577 ;; Return value:  Size  Location     Type
 14578 ;;		None               void
 14579 ;; Registers used:
 14580 ;;		wreg, status,2, status,0
 14581 ;; Tracked objects:
 14582 ;;		On entry : 0/0
 14583 ;;		On exit  : 0/0
 14584 ;;		Unchanged: 0/0
 14585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14587 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14588 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14589 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14590 ;;Total ram usage:        3 bytes
 14591 ;; Hardware stack levels used:    1
 14592 ;; Hardware stack levels required when called:    3
 14593 ;; This function calls:
 14594 ;;		Nothing
 14595 ;; This function is called by:
 14596 ;;		_DS18B20_Reset
 14597 ;;		_DS18B20_GetTemp
 14598 ;; This function uses a non-reentrant model
 14599 ;;
 14600                           
 14601                           
 14602                           ;psect for function _Delay480us
 14603  1997                     _Delay480us:	
 14604                           
 14605                           ;main.c: 1789: uint8_t i;
 14606                           ;main.c: 1790: uint8_t s = 0;
 14607                           
 14608                           ;incstack = 0
 14609                           ; Regs used in _Delay480us: [wreg+status,2+status,0]
 14610  1997  01F3               	clrf	Delay480us@s
 14611                           
 14612                           ;main.c: 1792: for(i=0;i<80;i++)
 14613  1998  01F4               	clrf	Delay480us@i
 14614  1999                     L2:	
 14615  1999  3050               	movlw	80
 14616  199A  0274               	subwf	Delay480us@i,w
 14617  199B  1803               	btfsc	3,0
 14618  199C  0008               	return
 14619                           
 14620                           ;main.c: 1793: {
 14621                           ;main.c: 1794: s++;
 14622  199D  3001               	movlw	1
 14623  199E  00F2               	movwf	??_Delay480us
 14624  199F  0872               	movf	??_Delay480us,w
 14625  19A0  07F3               	addwf	Delay480us@s,f
 14626  19A1  3001               	movlw	1
 14627  19A2  00F2               	movwf	??_Delay480us
 14628  19A3  0872               	movf	??_Delay480us,w
 14629  19A4  07F4               	addwf	Delay480us@i,f
 14630  19A5  2999               	goto	L2
 14631  19A6                     __end_of_Delay480us:	
 14632                           
 14633                           	psect	text37
 14634  1BD4                     __ptext37:	
 14635 ;; *************** function _DS18B20_Read *****************
 14636 ;; Defined at:
 14637 ;;		line 1653 in file "main.c"
 14638 ;; Parameters:    Size  Location     Type
 14639 ;;		None
 14640 ;; Auto vars:     Size  Location     Type
 14641 ;;  i               1    7[COMMON] unsigned char 
 14642 ;;  vByte           1    6[COMMON] unsigned char 
 14643 ;; Return value:  Size  Location     Type
 14644 ;;                  1    wreg      unsigned char 
 14645 ;; Registers used:
 14646 ;;		wreg, status,2, status,0, pclath, cstack
 14647 ;; Tracked objects:
 14648 ;;		On entry : 0/0
 14649 ;;		On exit  : 0/0
 14650 ;;		Unchanged: 0/0
 14651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14654 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14655 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14656 ;;Total ram usage:        3 bytes
 14657 ;; Hardware stack levels used:    1
 14658 ;; Hardware stack levels required when called:    4
 14659 ;; This function calls:
 14660 ;;		_Delay100us
 14661 ;;		_Delay5us
 14662 ;; This function is called by:
 14663 ;;		_DS18B20_GetTemp
 14664 ;; This function uses a non-reentrant model
 14665 ;;
 14666                           
 14667                           
 14668                           ;psect for function _DS18B20_Read
 14669  1BD4                     _DS18B20_Read:	
 14670                           
 14671                           ;main.c: 1655: uint8_t i;
 14672                           ;main.c: 1656: uint8_t vByte = 0;
 14673                           
 14674                           ;incstack = 0
 14675                           ; Regs used in _DS18B20_Read: [wreg+status,2+status,0+pclath+cstack]
 14676  1BD4  01F6               	clrf	DS18B20_Read@vByte
 14677                           
 14678                           ;main.c: 1659: for(i=0;i<8;i++)
 14679  1BD5  01F7               	clrf	DS18B20_Read@i
 14680  1BD6  3008               	movlw	8
 14681  1BD7  0277               	subwf	DS18B20_Read@i,w
 14682  1BD8  1803               	btfsc	3,0
 14683  1BD9  2BF8               	goto	l4744
 14684                           
 14685                           ;main.c: 1660: {
 14686                           ;main.c: 1661: vByte >>= 1;
 14687  1BDA  1003               	clrc
 14688  1BDB                     L3:	
 14689  1BDB  0CF6               	rrf	DS18B20_Read@vByte,f
 14690                           
 14691                           ;main.c: 1662: do { LATD4 = 0; } while(0);
 14692  1BDC  0022               	movlb	2	; select bank2
 14693  1BDD  120F               	bcf	15,4	;volatile
 14694                           
 14695                           ;main.c: 1663: Delay5us();
 14696  1BDE  3180  2002  319B   	fcall	_Delay5us
 14697                           
 14698                           ;main.c: 1664: do { LATD4 = 1; } while(0);
 14699  1BE1  0022               	movlb	2	; select bank2
 14700  1BE2  160F               	bsf	15,4	;volatile
 14701                           
 14702                           ;main.c: 1667: do { TRISD4 = 1; } while(0);
 14703  1BE3  0021               	movlb	1	; select bank1
 14704  1BE4  160F               	bsf	15,4	;volatile
 14705                           
 14706                           ;main.c: 1668: Delay5us();
 14707  1BE5  3180  2002  319B   	fcall	_Delay5us
 14708                           
 14709                           ;main.c: 1670: if( RD4 == 1)
 14710  1BE8  0020               	movlb	0	; select bank0
 14711  1BE9  1A0F               	btfsc	15,4	;volatile
 14712                           
 14713                           ;main.c: 1671: vByte |= 0x80;
 14714  1BEA  17F6               	bsf	DS18B20_Read@vByte,7
 14715                           
 14716                           ;main.c: 1673: Delay100us();
 14717  1BEB  3199  2188  319B   	fcall	_Delay100us
 14718                           
 14719                           ;main.c: 1675: do { TRISD4 = 0; } while(0);
 14720  1BEE  0021               	movlb	1	; select bank1
 14721  1BEF  120F               	bcf	15,4	;volatile
 14722  1BF0  3001               	movlw	1
 14723  1BF1  00F5               	movwf	??_DS18B20_Read
 14724  1BF2  0875               	movf	??_DS18B20_Read,w
 14725  1BF3  07F7               	addwf	DS18B20_Read@i,f
 14726  1BF4  3008               	movlw	8
 14727  1BF5  0277               	subwf	DS18B20_Read@i,w
 14728  1BF6  1C03               	skipc
 14729  1BF7  2BDB               	goto	L3
 14730  1BF8                     l4744:	
 14731                           
 14732                           ;main.c: 1676: }
 14733                           ;main.c: 1677: return vByte;
 14734  1BF8  0876               	movf	DS18B20_Read@vByte,w
 14735  1BF9  0008               	return
 14736  1BFA                     __end_of_DS18B20_Read:	
 14737                           
 14738                           	psect	text38
 14739  1988                     __ptext38:	
 14740 ;; *************** function _Delay100us *****************
 14741 ;; Defined at:
 14742 ;;		line 1799 in file "main.c"
 14743 ;; Parameters:    Size  Location     Type
 14744 ;;		None
 14745 ;; Auto vars:     Size  Location     Type
 14746 ;;  i               1    4[COMMON] unsigned char 
 14747 ;;  s               1    3[COMMON] unsigned char 
 14748 ;; Return value:  Size  Location     Type
 14749 ;;		None               void
 14750 ;; Registers used:
 14751 ;;		wreg, status,2, status,0
 14752 ;; Tracked objects:
 14753 ;;		On entry : 0/0
 14754 ;;		On exit  : 0/0
 14755 ;;		Unchanged: 0/0
 14756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14758 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14759 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14760 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14761 ;;Total ram usage:        3 bytes
 14762 ;; Hardware stack levels used:    1
 14763 ;; Hardware stack levels required when called:    3
 14764 ;; This function calls:
 14765 ;;		Nothing
 14766 ;; This function is called by:
 14767 ;;		_DS18B20_Write
 14768 ;;		_DS18B20_Read
 14769 ;; This function uses a non-reentrant model
 14770 ;;
 14771                           
 14772                           
 14773                           ;psect for function _Delay100us
 14774  1988                     _Delay100us:	
 14775                           
 14776                           ;main.c: 1801: uint8_t i;
 14777                           ;main.c: 1802: uint8_t s = 0;
 14778                           
 14779                           ;incstack = 0
 14780                           ; Regs used in _Delay100us: [wreg+status,2+status,0]
 14781  1988  01F3               	clrf	Delay100us@s
 14782                           
 14783                           ;main.c: 1804: for(i=0;i<12;i++)
 14784  1989  01F4               	clrf	Delay100us@i
 14785  198A                     L4:	
 14786  198A  300C               	movlw	12
 14787  198B  0274               	subwf	Delay100us@i,w
 14788  198C  1803               	btfsc	3,0
 14789  198D  0008               	return
 14790                           
 14791                           ;main.c: 1805: {
 14792                           ;main.c: 1806: s++;
 14793  198E  3001               	movlw	1
 14794  198F  00F2               	movwf	??_Delay100us
 14795  1990  0872               	movf	??_Delay100us,w
 14796  1991  07F3               	addwf	Delay100us@s,f
 14797  1992  3001               	movlw	1
 14798  1993  00F2               	movwf	??_Delay100us
 14799  1994  0872               	movf	??_Delay100us,w
 14800  1995  07F4               	addwf	Delay100us@i,f
 14801  1996  298A               	goto	L4
 14802  1997                     __end_of_Delay100us:	
 14803                           
 14804                           	psect	text39
 14805  1A8F                     __ptext39:	
 14806 ;; *************** function _STR2HEX *****************
 14807 ;; Defined at:
 14808 ;;		line 1519 in file "main.c"
 14809 ;; Parameters:    Size  Location     Type
 14810 ;;  BStr            1    wreg     PTR unsigned char 
 14811 ;;		 -> BufferStr(32), 
 14812 ;;  NumPoint        1    4[COMMON] unsigned char 
 14813 ;; Auto vars:     Size  Location     Type
 14814 ;;  BStr            1    8[COMMON] PTR unsigned char 
 14815 ;;		 -> BufferStr(32), 
 14816 ;; Return value:  Size  Location     Type
 14817 ;;                  1    wreg      unsigned char 
 14818 ;; Registers used:
 14819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14820 ;; Tracked objects:
 14821 ;;		On entry : 0/0
 14822 ;;		On exit  : 0/0
 14823 ;;		Unchanged: 0/0
 14824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14825 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14827 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14828 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14829 ;;Total ram usage:        5 bytes
 14830 ;; Hardware stack levels used:    1
 14831 ;; Hardware stack levels required when called:    4
 14832 ;; This function calls:
 14833 ;;		_ASCII_OCT2HEX
 14834 ;; This function is called by:
 14835 ;;		_Decode_RS232_CMD
 14836 ;; This function uses a non-reentrant model
 14837 ;;
 14838                           
 14839                           
 14840                           ;psect for function _STR2HEX
 14841  1A8F                     _STR2HEX:	
 14842                           
 14843                           ;incstack = 0
 14844                           ; Regs used in _STR2HEX: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14845                           ;STR2HEX@BStr stored from wreg
 14846  1A8F  00F8               	movwf	STR2HEX@BStr
 14847                           
 14848                           ;main.c: 1521: return (ASCII_OCT2HEX(*(BStr + NumPoint)) * 16)+ ASCII_OCT2HEX(*(BStr + N
      +                          umPoint + 1));
 14849  1A90  0874               	movf	STR2HEX@NumPoint,w
 14850  1A91  0778               	addwf	STR2HEX@BStr,w
 14851  1A92  00F5               	movwf	??_STR2HEX
 14852  1A93  0875               	movf	??_STR2HEX,w
 14853  1A94  0086               	movwf	6
 14854  1A95  3002               	movlw	2	; select bank4/5
 14855  1A96  0087               	movwf	7
 14856  1A97  0801               	movf	1,w
 14857  1A98  319B  23AE  319A   	fcall	_ASCII_OCT2HEX
 14858  1A9B  00F6               	movwf	??_STR2HEX+1
 14859  1A9C  3004               	movlw	4
 14860  1A9D                     u5025:	
 14861  1A9D  35F6               	lslf	??_STR2HEX+1,f
 14862  1A9E  0B89               	decfsz	9,f
 14863  1A9F  2A9D               	goto	u5025
 14864  1AA0  0874               	movf	STR2HEX@NumPoint,w
 14865  1AA1  0778               	addwf	STR2HEX@BStr,w
 14866  1AA2  00F7               	movwf	??_STR2HEX+2
 14867  1AA3  0A77               	incf	??_STR2HEX+2,w
 14868  1AA4  0086               	movwf	6
 14869  1AA5  3002               	movlw	2	; select bank4/5
 14870  1AA6  0087               	movwf	7
 14871  1AA7  0801               	movf	1,w
 14872  1AA8  319B  23AE         	fcall	_ASCII_OCT2HEX
 14873  1AAA  0776               	addwf	??_STR2HEX+1,w
 14874  1AAB  0008               	return
 14875  1AAC                     __end_of_STR2HEX:	
 14876                           
 14877                           	psect	text40
 14878  1BAE                     __ptext40:	
 14879 ;; *************** function _ASCII_OCT2HEX *****************
 14880 ;; Defined at:
 14881 ;;		line 1524 in file "main.c"
 14882 ;; Parameters:    Size  Location     Type
 14883 ;;  ASCII_OCT       1    wreg     unsigned char 
 14884 ;; Auto vars:     Size  Location     Type
 14885 ;;  ASCII_OCT       1    3[COMMON] unsigned char 
 14886 ;; Return value:  Size  Location     Type
 14887 ;;                  1    wreg      unsigned char 
 14888 ;; Registers used:
 14889 ;;		wreg, status,2, status,0
 14890 ;; Tracked objects:
 14891 ;;		On entry : 0/0
 14892 ;;		On exit  : 0/0
 14893 ;;		Unchanged: 0/0
 14894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14896 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14897 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14898 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14899 ;;Total ram usage:        2 bytes
 14900 ;; Hardware stack levels used:    1
 14901 ;; Hardware stack levels required when called:    3
 14902 ;; This function calls:
 14903 ;;		Nothing
 14904 ;; This function is called by:
 14905 ;;		_STR2HEX
 14906 ;; This function uses a non-reentrant model
 14907 ;;
 14908                           
 14909                           
 14910                           ;psect for function _ASCII_OCT2HEX
 14911  1BAE                     _ASCII_OCT2HEX:	
 14912                           
 14913                           ;incstack = 0
 14914                           ; Regs used in _ASCII_OCT2HEX: [wreg+status,2+status,0]
 14915                           ;ASCII_OCT2HEX@ASCII_OCT stored from wreg
 14916  1BAE  00F3               	movwf	ASCII_OCT2HEX@ASCII_OCT
 14917                           
 14918                           ;main.c: 1526: if((ASCII_OCT >= '0')&&(ASCII_OCT <= '9'))
 14919  1BAF  3030               	movlw	48
 14920  1BB0  0273               	subwf	ASCII_OCT2HEX@ASCII_OCT,w
 14921  1BB1  1C03               	skipc
 14922  1BB2  2BBA               	goto	l4848
 14923  1BB3  303A               	movlw	58
 14924  1BB4  0273               	subwf	ASCII_OCT2HEX@ASCII_OCT,w
 14925  1BB5  1803               	skipnc
 14926  1BB6  2BBA               	goto	l4848
 14927                           
 14928                           ;main.c: 1527: ASCII_OCT = ASCII_OCT - '0';
 14929  1BB7  0873               	movf	ASCII_OCT2HEX@ASCII_OCT,w
 14930  1BB8  3ED0               	addlw	208
 14931  1BB9  2BCF               	goto	L6
 14932  1BBA                     l4848:	
 14933                           
 14934                           ;main.c: 1528: else if((ASCII_OCT >= 'a')&&(ASCII_OCT <= 'f'))
 14935  1BBA  3061               	movlw	97
 14936  1BBB  0273               	subwf	ASCII_OCT2HEX@ASCII_OCT,w
 14937  1BBC  1C03               	skipc
 14938  1BBD  2BC5               	goto	l4854
 14939  1BBE  3067               	movlw	103
 14940  1BBF  0273               	subwf	ASCII_OCT2HEX@ASCII_OCT,w
 14941  1BC0  1803               	skipnc
 14942  1BC1  2BC5               	goto	l4854
 14943                           
 14944                           ;main.c: 1529: ASCII_OCT = ASCII_OCT - 'a' + 10;
 14945  1BC2  0873               	movf	ASCII_OCT2HEX@ASCII_OCT,w
 14946  1BC3  3EA9               	addlw	169
 14947  1BC4  2BCF               	goto	L6
 14948  1BC5                     l4854:	
 14949                           
 14950                           ;main.c: 1530: else if((ASCII_OCT >= 'A')&&(ASCII_OCT <= 'F'))
 14951  1BC5  3041               	movlw	65
 14952  1BC6  0273               	subwf	ASCII_OCT2HEX@ASCII_OCT,w
 14953  1BC7  1C03               	skipc
 14954  1BC8  2BD2               	goto	l4860
 14955  1BC9  3047               	movlw	71
 14956  1BCA  0273               	subwf	ASCII_OCT2HEX@ASCII_OCT,w
 14957  1BCB  1803               	skipnc
 14958  1BCC  2BD2               	goto	l4860
 14959                           
 14960                           ;main.c: 1531: ASCII_OCT = ASCII_OCT - 'A' + 10;
 14961  1BCD  0873               	movf	ASCII_OCT2HEX@ASCII_OCT,w
 14962  1BCE  3EC9               	addlw	201
 14963  1BCF                     L6:	
 14964  1BCF  00F2               	movwf	??_ASCII_OCT2HEX
 14965  1BD0  0872               	movf	??_ASCII_OCT2HEX,w
 14966  1BD1  00F3               	movwf	ASCII_OCT2HEX@ASCII_OCT
 14967  1BD2                     l4860:	
 14968                           
 14969                           ;main.c: 1533: return ASCII_OCT;
 14970  1BD2  0873               	movf	ASCII_OCT2HEX@ASCII_OCT,w
 14971  1BD3  0008               	return
 14972  1BD4                     __end_of_ASCII_OCT2HEX:	
 14973                           
 14974                           	psect	text41
 14975  0AAB                     __ptext41:	
 14976 ;; *************** function _RUN_MESURE *****************
 14977 ;; Defined at:
 14978 ;;		line 1079 in file "main.c"
 14979 ;; Parameters:    Size  Location     Type
 14980 ;;  WhatStrip       1    wreg     unsigned char 
 14981 ;; Auto vars:     Size  Location     Type
 14982 ;;  WhatStrip       1   36[BANK0 ] unsigned char 
 14983 ;;  setup_table    63    0[BANK1 ] unsigned char [63]
 14984 ;;  setup_3t8      15   14[BANK0 ] unsigned char [15]
 14985 ;;  AVG100          4   30[BANK0 ] unsigned long 
 14986 ;;  lpi             2   34[BANK0 ] unsigned int 
 14987 ;;  tpWhatADC       1   29[BANK0 ] unsigned char 
 14988 ;; Return value:  Size  Location     Type
 14989 ;;		None               void
 14990 ;; Registers used:
 14991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14992 ;; Tracked objects:
 14993 ;;		On entry : 0/0
 14994 ;;		On exit  : 0/0
 14995 ;;		Unchanged: 0/0
 14996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14998 ;;      Locals:         0      23      63       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14999 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15000 ;;      Totals:         0      25      63       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15001 ;;Total ram usage:       88 bytes
 15002 ;; Hardware stack levels used:    1
 15003 ;; Hardware stack levels required when called:    6
 15004 ;; This function calls:
 15005 ;;		_ADC_GetConversion
 15006 ;;		_DAC1_SetOutput
 15007 ;;		_Print_CHLN
 15008 ;;		_Print_String
 15009 ;;		_Print_uint16Str
 15010 ;;		___bmul
 15011 ;;		___lldiv
 15012 ;; This function is called by:
 15013 ;;		_main
 15014 ;;		_Decode_RS232_CMD
 15015 ;; This function uses a non-reentrant model
 15016 ;;
 15017                           
 15018                           
 15019                           ;psect for function _RUN_MESURE
 15020  0AAB                     _RUN_MESURE:	
 15021                           
 15022                           ;incstack = 0
 15023                           ; Regs used in _RUN_MESURE: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15024                           ;RUN_MESURE@WhatStrip stored from wreg
 15025  0AAB  0020               	movlb	0	; select bank0
 15026  0AAC  00C4               	movwf	RUN_MESURE@WhatStrip
 15027                           
 15028                           ;main.c: 1082: uint8_t setup_table[9*7]={ 1, 1, 0, 0, 0, 0, 0, 0, 1,
 15029                           ;main.c: 1083: 1, 0, 1, 0, 0, 0, 0, 0, 1,
 15030                           ;main.c: 1084: 1, 0, 0, 1, 0, 0, 0, 0, 1,
 15031                           ;main.c: 1085: 1, 0, 0, 0, 1, 0, 0, 0, 1,
 15032                           ;main.c: 1086: 1, 0, 0, 0, 0, 1, 0, 0, 1,
 15033                           ;main.c: 1087: 0, 0, 0, 0, 0, 0, 1, 0, 0,
 15034                           ;main.c: 1088: 0, 0, 0, 0, 0, 0, 0, 1, 0};
 15035  0AAD  3020               	movlw	low RUN_MESURE@F7899
 15036  0AAE  0086               	movwf	6
 15037  0AAF  3003               	movlw	high RUN_MESURE@F7899
 15038  0AB0  0087               	movwf	7
 15039  0AB1  30A0               	movlw	low RUN_MESURE@setup_table
 15040  0AB2  0084               	movwf	4
 15041  0AB3  3000               	movlw	high RUN_MESURE@setup_table
 15042  0AB4  0085               	movwf	5
 15043  0AB5  303F               	movlw	63
 15044  0AB6  00AC               	movwf	??_RUN_MESURE
 15045  0AB7                     u7720:	
 15046  0AB7  0016               	moviw fsr1++
 15047  0AB8  001A               	movwi fsr0++
 15048  0AB9  0BAC               	decfsz	??_RUN_MESURE,f
 15049  0ABA  2AB7               	goto	u7720
 15050                           
 15051                           ;main.c: 1089: uint8_t tpWhatADC = 0;
 15052  0ABB  01BD               	clrf	RUN_MESURE@tpWhatADC
 15053                           
 15054                           ;main.c: 1093: uint8_t setup_3t8[3*5]={ 0, 1, 0,
 15055                           ;main.c: 1094: 0, 0, 1,
 15056                           ;main.c: 1095: 0, 0, 0,
 15057                           ;main.c: 1096: 1, 0, 0,
 15058                           ;main.c: 1097: 1, 1, 0};
 15059  0ABC  30D8               	movlw	low RUN_MESURE@F7902
 15060  0ABD  0086               	movwf	6
 15061  0ABE  3001               	movlw	high RUN_MESURE@F7902
 15062  0ABF  0087               	movwf	7
 15063  0AC0  302E               	movlw	low RUN_MESURE@setup_3t8
 15064  0AC1  0084               	movwf	4
 15065  0AC2  3000               	movlw	high RUN_MESURE@setup_3t8
 15066  0AC3  0085               	movwf	5
 15067  0AC4  300F               	movlw	15
 15068  0AC5  00AC               	movwf	??_RUN_MESURE
 15069  0AC6                     u7730:	
 15070  0AC6  0016               	moviw fsr1++
 15071  0AC7  001A               	movwi fsr0++
 15072  0AC8  0BAC               	decfsz	??_RUN_MESURE,f
 15073  0AC9  2AC6               	goto	u7730
 15074                           
 15075                           ;main.c: 1100: uint16_t lpi = 0;
 15076  0ACA  01C2               	clrf	RUN_MESURE@lpi
 15077  0ACB  01C3               	clrf	RUN_MESURE@lpi+1
 15078                           
 15079                           ;main.c: 1101: uint32_t AVG100 = 0;
 15080  0ACC  3000               	movlw	0
 15081  0ACD  00C1               	movwf	RUN_MESURE@AVG100+3
 15082  0ACE  3000               	movlw	0
 15083  0ACF  00C0               	movwf	RUN_MESURE@AVG100+2
 15084  0AD0  3000               	movlw	0
 15085  0AD1  00BF               	movwf	RUN_MESURE@AVG100+1
 15086  0AD2  3000               	movlw	0
 15087  0AD3  00BE               	movwf	RUN_MESURE@AVG100
 15088                           
 15089                           ;main.c: 1110: do { LATE0 = 0; } while(0);
 15090  0AD4  0022               	movlb	2	; select bank2
 15091  0AD5  1010               	bcf	16,0	;volatile
 15092                           
 15093                           ;main.c: 1111: do { LATE1 = 0; } while(0);
 15094  0AD6  1090               	bcf	16,1	;volatile
 15095                           
 15096                           ;main.c: 1148: {
 15097                           ;main.c: 1149: if(setup_table[(WhatStrip*9) + 0] == 0)
 15098  0AD7  3009               	movlw	9
 15099  0AD8  0020               	movlb	0	; select bank0
 15100  0AD9  00AC               	movwf	??_RUN_MESURE
 15101  0ADA  082C               	movf	??_RUN_MESURE,w
 15102  0ADB  00F7               	movwf	___bmul@multiplicand
 15103  0ADC  0844               	movf	RUN_MESURE@WhatStrip,w
 15104  0ADD  3199  21B6  318A   	fcall	___bmul
 15105  0AE0  3EA0               	addlw	(low (RUN_MESURE@setup_table| 0))& (0+255)
 15106  0AE1  0086               	movwf	6
 15107  0AE2  0187               	clrf	7
 15108  0AE3  0801               	movf	1,w
 15109  0AE4  1D03               	btfss	3,2
 15110  0AE5  2AE9               	goto	l731
 15111                           
 15112                           ;main.c: 1150: do { LATD7 = 0; } while(0);
 15113  0AE6  0022               	movlb	2	; select bank2
 15114  0AE7  138F               	bcf	15,7	;volatile
 15115  0AE8  2AEB               	goto	l7088
 15116  0AE9                     l731:	
 15117                           ;main.c: 1151: else
 15118                           ;main.c: 1152: do { LATD7 = 1; } while(0);
 15119                           
 15120  0AE9  0022               	movlb	2	; select bank2
 15121  0AEA  178F               	bsf	15,7	;volatile
 15122  0AEB                     l7088:	
 15123                           
 15124                           ;main.c: 1154: if(setup_table[(WhatStrip*9) + 1] == 0)
 15125  0AEB  3009               	movlw	9
 15126  0AEC  0020               	movlb	0	; select bank0
 15127  0AED  00AC               	movwf	??_RUN_MESURE
 15128  0AEE  082C               	movf	??_RUN_MESURE,w
 15129  0AEF  00F7               	movwf	___bmul@multiplicand
 15130  0AF0  0844               	movf	RUN_MESURE@WhatStrip,w
 15131  0AF1  3199  21B6  318A   	fcall	___bmul
 15132  0AF4  3E01               	addlw	1
 15133  0AF5  3EA0               	addlw	(low (RUN_MESURE@setup_table| 0))& (0+255)
 15134  0AF6  0086               	movwf	6
 15135  0AF7  0187               	clrf	7
 15136  0AF8  0801               	movf	1,w
 15137  0AF9  1D03               	btfss	3,2
 15138  0AFA  2AFE               	goto	l737
 15139                           
 15140                           ;main.c: 1155: do { LATA6 = 0; } while(0);
 15141  0AFB  0022               	movlb	2	; select bank2
 15142  0AFC  130C               	bcf	12,6	;volatile
 15143  0AFD  2B00               	goto	l7090
 15144  0AFE                     l737:	
 15145                           ;main.c: 1156: else
 15146                           ;main.c: 1157: do { LATA6 = 1; } while(0);
 15147                           
 15148  0AFE  0022               	movlb	2	; select bank2
 15149  0AFF  170C               	bsf	12,6	;volatile
 15150  0B00                     l7090:	
 15151                           
 15152                           ;main.c: 1159: if(setup_table[(WhatStrip*9) + 2] == 0)
 15153  0B00  3009               	movlw	9
 15154  0B01  0020               	movlb	0	; select bank0
 15155  0B02  00AC               	movwf	??_RUN_MESURE
 15156  0B03  082C               	movf	??_RUN_MESURE,w
 15157  0B04  00F7               	movwf	___bmul@multiplicand
 15158  0B05  0844               	movf	RUN_MESURE@WhatStrip,w
 15159  0B06  3199  21B6  318A   	fcall	___bmul
 15160  0B09  3E02               	addlw	2
 15161  0B0A  3EA0               	addlw	(low (RUN_MESURE@setup_table| 0))& (0+255)
 15162  0B0B  0086               	movwf	6
 15163  0B0C  0187               	clrf	7
 15164  0B0D  0801               	movf	1,w
 15165  0B0E  1D03               	btfss	3,2
 15166  0B0F  2B13               	goto	l743
 15167                           
 15168                           ;main.c: 1160: do { LATA7 = 0; } while(0);
 15169  0B10  0022               	movlb	2	; select bank2
 15170  0B11  138C               	bcf	12,7	;volatile
 15171  0B12  2B15               	goto	l7092
 15172  0B13                     l743:	
 15173                           ;main.c: 1161: else
 15174                           ;main.c: 1162: do { LATA7 = 1; } while(0);
 15175                           
 15176  0B13  0022               	movlb	2	; select bank2
 15177  0B14  178C               	bsf	12,7	;volatile
 15178  0B15                     l7092:	
 15179                           
 15180                           ;main.c: 1164: if(setup_table[(WhatStrip*9) + 3] == 0)
 15181  0B15  3009               	movlw	9
 15182  0B16  0020               	movlb	0	; select bank0
 15183  0B17  00AC               	movwf	??_RUN_MESURE
 15184  0B18  082C               	movf	??_RUN_MESURE,w
 15185  0B19  00F7               	movwf	___bmul@multiplicand
 15186  0B1A  0844               	movf	RUN_MESURE@WhatStrip,w
 15187  0B1B  3199  21B6  318A   	fcall	___bmul
 15188  0B1E  3E03               	addlw	3
 15189  0B1F  3EA0               	addlw	(low (RUN_MESURE@setup_table| 0))& (0+255)
 15190  0B20  0086               	movwf	6
 15191  0B21  0187               	clrf	7
 15192  0B22  0801               	movf	1,w
 15193  0B23  1D03               	btfss	3,2
 15194  0B24  2B28               	goto	l749
 15195                           
 15196                           ;main.c: 1165: do { LATE2 = 0; } while(0);
 15197  0B25  0022               	movlb	2	; select bank2
 15198  0B26  1110               	bcf	16,2	;volatile
 15199  0B27  2B2A               	goto	l7094
 15200  0B28                     l749:	
 15201                           ;main.c: 1166: else
 15202                           ;main.c: 1167: do { LATE2 = 1; } while(0);
 15203                           
 15204  0B28  0022               	movlb	2	; select bank2
 15205  0B29  1510               	bsf	16,2	;volatile
 15206  0B2A                     l7094:	
 15207                           
 15208                           ;main.c: 1169: if(setup_table[(WhatStrip*9) + 4] == 0)
 15209  0B2A  3009               	movlw	9
 15210  0B2B  0020               	movlb	0	; select bank0
 15211  0B2C  00AC               	movwf	??_RUN_MESURE
 15212  0B2D  082C               	movf	??_RUN_MESURE,w
 15213  0B2E  00F7               	movwf	___bmul@multiplicand
 15214  0B2F  0844               	movf	RUN_MESURE@WhatStrip,w
 15215  0B30  3199  21B6  318A   	fcall	___bmul
 15216  0B33  3E04               	addlw	4
 15217  0B34  3EA0               	addlw	(low (RUN_MESURE@setup_table| 0))& (0+255)
 15218  0B35  0086               	movwf	6
 15219  0B36  0187               	clrf	7
 15220  0B37  0801               	movf	1,w
 15221  0B38  1D03               	btfss	3,2
 15222  0B39  2B3D               	goto	l755
 15223                           
 15224                           ;main.c: 1170: do { LATC0 = 0; } while(0);
 15225  0B3A  0022               	movlb	2	; select bank2
 15226  0B3B  100E               	bcf	14,0	;volatile
 15227  0B3C  2B3F               	goto	l7096
 15228  0B3D                     l755:	
 15229                           ;main.c: 1171: else
 15230                           ;main.c: 1172: do { LATC0 = 1; } while(0);
 15231                           
 15232  0B3D  0022               	movlb	2	; select bank2
 15233  0B3E  140E               	bsf	14,0	;volatile
 15234  0B3F                     l7096:	
 15235                           
 15236                           ;main.c: 1174: if(setup_table[(WhatStrip*9) + 5] == 0)
 15237  0B3F  3009               	movlw	9
 15238  0B40  0020               	movlb	0	; select bank0
 15239  0B41  00AC               	movwf	??_RUN_MESURE
 15240  0B42  082C               	movf	??_RUN_MESURE,w
 15241  0B43  00F7               	movwf	___bmul@multiplicand
 15242  0B44  0844               	movf	RUN_MESURE@WhatStrip,w
 15243  0B45  3199  21B6  318A   	fcall	___bmul
 15244  0B48  3E05               	addlw	5
 15245  0B49  3EA0               	addlw	(low (RUN_MESURE@setup_table| 0))& (0+255)
 15246  0B4A  0086               	movwf	6
 15247  0B4B  0187               	clrf	7
 15248  0B4C  0801               	movf	1,w
 15249  0B4D  1D03               	btfss	3,2
 15250  0B4E  2B52               	goto	l761
 15251                           
 15252                           ;main.c: 1175: do { LATC1 = 0; } while(0);
 15253  0B4F  0022               	movlb	2	; select bank2
 15254  0B50  108E               	bcf	14,1	;volatile
 15255  0B51  2B54               	goto	l7098
 15256  0B52                     l761:	
 15257                           ;main.c: 1176: else
 15258                           ;main.c: 1177: do { LATC1 = 1; } while(0);
 15259                           
 15260  0B52  0022               	movlb	2	; select bank2
 15261  0B53  148E               	bsf	14,1	;volatile
 15262  0B54                     l7098:	
 15263                           
 15264                           ;main.c: 1179: if(setup_table[(WhatStrip*9) + 6] == 0)
 15265  0B54  3009               	movlw	9
 15266  0B55  0020               	movlb	0	; select bank0
 15267  0B56  00AC               	movwf	??_RUN_MESURE
 15268  0B57  082C               	movf	??_RUN_MESURE,w
 15269  0B58  00F7               	movwf	___bmul@multiplicand
 15270  0B59  0844               	movf	RUN_MESURE@WhatStrip,w
 15271  0B5A  3199  21B6  318A   	fcall	___bmul
 15272  0B5D  3E06               	addlw	6
 15273  0B5E  3EA0               	addlw	(low (RUN_MESURE@setup_table| 0))& (0+255)
 15274  0B5F  0086               	movwf	6
 15275  0B60  0187               	clrf	7
 15276  0B61  0801               	movf	1,w
 15277  0B62  1D03               	btfss	3,2
 15278  0B63  2B67               	goto	l767
 15279                           
 15280                           ;main.c: 1180: do { LATC2 = 0; } while(0);
 15281  0B64  0022               	movlb	2	; select bank2
 15282  0B65  110E               	bcf	14,2	;volatile
 15283  0B66  2B69               	goto	l7100
 15284  0B67                     l767:	
 15285                           ;main.c: 1181: else
 15286                           ;main.c: 1182: do { LATC2 = 1; } while(0);
 15287                           
 15288  0B67  0022               	movlb	2	; select bank2
 15289  0B68  150E               	bsf	14,2	;volatile
 15290  0B69                     l7100:	
 15291                           
 15292                           ;main.c: 1184: if(setup_table[(WhatStrip*9) + 7] == 0)
 15293  0B69  3009               	movlw	9
 15294  0B6A  0020               	movlb	0	; select bank0
 15295  0B6B  00AC               	movwf	??_RUN_MESURE
 15296  0B6C  082C               	movf	??_RUN_MESURE,w
 15297  0B6D  00F7               	movwf	___bmul@multiplicand
 15298  0B6E  0844               	movf	RUN_MESURE@WhatStrip,w
 15299  0B6F  3199  21B6  318A   	fcall	___bmul
 15300  0B72  3E07               	addlw	7
 15301  0B73  3EA0               	addlw	(low (RUN_MESURE@setup_table| 0))& (0+255)
 15302  0B74  0086               	movwf	6
 15303  0B75  0187               	clrf	7
 15304  0B76  0801               	movf	1,w
 15305  0B77  1D03               	btfss	3,2
 15306  0B78  2B7C               	goto	l773
 15307                           
 15308                           ;main.c: 1185: do { LATC5 = 0; } while(0);
 15309  0B79  0022               	movlb	2	; select bank2
 15310  0B7A  128E               	bcf	14,5	;volatile
 15311  0B7B  2B7E               	goto	l7102
 15312  0B7C                     l773:	
 15313                           ;main.c: 1186: else
 15314                           ;main.c: 1187: do { LATC5 = 1; } while(0);
 15315                           
 15316  0B7C  0022               	movlb	2	; select bank2
 15317  0B7D  168E               	bsf	14,5	;volatile
 15318  0B7E                     l7102:	
 15319                           
 15320                           ;main.c: 1189: if(setup_table[(WhatStrip*9) + 8] == 0)
 15321  0B7E  3009               	movlw	9
 15322  0B7F  0020               	movlb	0	; select bank0
 15323  0B80  00AC               	movwf	??_RUN_MESURE
 15324  0B81  082C               	movf	??_RUN_MESURE,w
 15325  0B82  00F7               	movwf	___bmul@multiplicand
 15326  0B83  0844               	movf	RUN_MESURE@WhatStrip,w
 15327  0B84  3199  21B6  318A   	fcall	___bmul
 15328  0B87  3E08               	addlw	8
 15329  0B88  3EA0               	addlw	(low (RUN_MESURE@setup_table| 0))& (0+255)
 15330  0B89  0086               	movwf	6
 15331  0B8A  0187               	clrf	7
 15332  0B8B  0801               	movf	1,w
 15333  0B8C  1D03               	btfss	3,2
 15334  0B8D  2B91               	goto	l779
 15335                           
 15336                           ;main.c: 1190: do { LATB5 = 0; } while(0);
 15337  0B8E  0022               	movlb	2	; select bank2
 15338  0B8F  128D               	bcf	13,5	;volatile
 15339  0B90  2B93               	goto	l7104
 15340  0B91                     l779:	
 15341                           ;main.c: 1191: else
 15342                           ;main.c: 1192: do { LATB5 = 1; } while(0);
 15343                           
 15344  0B91  0022               	movlb	2	; select bank2
 15345  0B92  168D               	bsf	13,5	;volatile
 15346  0B93                     l7104:	
 15347                           
 15348                           ;main.c: 1193: }
 15349                           ;main.c: 1195: if(WhatStrip < 5)
 15350  0B93  3005               	movlw	5
 15351  0B94  0020               	movlb	0	; select bank0
 15352  0B95  0244               	subwf	RUN_MESURE@WhatStrip,w
 15353  0B96  1803               	skipnc
 15354  0B97  2B9E               	goto	l7110
 15355                           
 15356                           ;main.c: 1196: {
 15357                           ;main.c: 1197: tpWhatADC = MESURE_ISE;
 15358  0B98  300C               	movlw	12
 15359  0B99  00AC               	movwf	??_RUN_MESURE
 15360  0B9A  082C               	movf	??_RUN_MESURE,w
 15361  0B9B  00BD               	movwf	RUN_MESURE@tpWhatADC
 15362                           
 15363                           ;main.c: 1199: DAC1_SetOutput(0x00);
 15364  0B9C  3000               	movlw	0
 15365  0B9D  2BB0               	goto	L7
 15366  0B9E                     l7110:	
 15367                           ;main.c: 1200: }
 15368                           
 15369                           
 15370                           ;main.c: 1201: else if(WhatStrip == 5)
 15371  0B9E  3005               	movlw	5
 15372  0B9F  0020               	movlb	0	; select bank0
 15373  0BA0  0644               	xorwf	RUN_MESURE@WhatStrip,w
 15374  0BA1  1D03               	btfss	3,2
 15375  0BA2  2BA9               	goto	l7116
 15376                           
 15377                           ;main.c: 1202: {
 15378                           ;main.c: 1203: tpWhatADC = MESURE_TDS;
 15379  0BA3  300B               	movlw	11
 15380  0BA4  00AC               	movwf	??_RUN_MESURE
 15381  0BA5  082C               	movf	??_RUN_MESURE,w
 15382  0BA6  00BD               	movwf	RUN_MESURE@tpWhatADC
 15383                           
 15384                           ;main.c: 1204: DAC1_SetOutput(0xC0);
 15385  0BA7  30C0               	movlw	192
 15386  0BA8  2BB0               	goto	L7
 15387  0BA9                     l7116:	
 15388                           ;main.c: 1205: }
 15389                           
 15390                           
 15391                           ;main.c: 1206: else if(WhatStrip == 6)
 15392  0BA9  3006               	movlw	6
 15393  0BAA  0020               	movlb	0	; select bank0
 15394  0BAB  0644               	xorwf	RUN_MESURE@WhatStrip,w
 15395  0BAC  1D03               	btfss	3,2
 15396  0BAD  2BB3               	goto	l7122
 15397                           
 15398                           ;main.c: 1207: {
 15399                           ;main.c: 1208: tpWhatADC = MESURE_DO;
 15400  0BAE  01BD               	clrf	RUN_MESURE@tpWhatADC
 15401                           
 15402                           ;main.c: 1209: DAC1_SetOutput(0x1b);
 15403  0BAF  301B               	movlw	27
 15404  0BB0                     L7:	
 15405  0BB0  3198  20FA  318A   	fcall	_DAC1_SetOutput
 15406  0BB3                     l7122:	
 15407                           
 15408                           ;main.c: 1210: }
 15409                           ;main.c: 1211: if(RUN_PWM_FLAG == 1)
 15410  0BB3  0021               	movlb	1	; select bank1
 15411  0BB4  0366               	decf	_RUN_PWM_FLAG^(0+128),w
 15412  0BB5  1903               	btfsc	3,2
 15413  0BB6  0008               	return
 15414  0BB7  2BFA               	goto	l7144
 15415  0BB8                     l7126:	
 15416                           ;main.c: 1217: {
 15417                           ;main.c: 1218: case 0:
 15418                           
 15419                           ;main.c: 1216: switch(WhatStrip)
 15420                           
 15421                           ;main.c: 1212: return;
 15422                           
 15423                           
 15424                           ;main.c: 1219: Print_String(",$", 0);
 15425  0BB8  30F6               	movlw	low (STR_30| (0+32768))
 15426  0BB9  00F4               	movwf	Print_String@BStr
 15427  0BBA  3092               	movlw	high (STR_30| (0+32768))
 15428  0BBB  00F5               	movwf	Print_String@BStr+1
 15429  0BBC  01F6               	clrf	Print_String@chln
 15430  0BBD  319B  238A  318A   	fcall	_Print_String
 15431                           
 15432                           ;main.c: 1220: Print_CHLN();
 15433  0BC0  3199  211C  318A   	fcall	_Print_CHLN
 15434                           
 15435                           ;main.c: 1221: break;
 15436  0BC3  2C05               	goto	l7146
 15437  0BC4                     l7130:	
 15438                           ;main.c: 1222: case 1:
 15439                           
 15440                           
 15441                           ;main.c: 1223: Print_String(",$", 0);
 15442  0BC4  30F6               	movlw	low (STR_30| (0+32768))
 15443  0BC5  00F4               	movwf	Print_String@BStr
 15444  0BC6  3092               	movlw	high (STR_30| (0+32768))
 15445  0BC7  00F5               	movwf	Print_String@BStr+1
 15446  0BC8  01F6               	clrf	Print_String@chln
 15447  0BC9  319B  238A  318A   	fcall	_Print_String
 15448                           
 15449                           ;main.c: 1224: break;
 15450  0BCC  2C05               	goto	l7146
 15451  0BCD                     l7132:	
 15452                           ;main.c: 1225: case 2:
 15453                           
 15454                           
 15455                           ;main.c: 1226: Print_String(",$", 0);
 15456  0BCD  30F6               	movlw	low (STR_30| (0+32768))
 15457  0BCE  00F4               	movwf	Print_String@BStr
 15458  0BCF  3092               	movlw	high (STR_30| (0+32768))
 15459  0BD0  00F5               	movwf	Print_String@BStr+1
 15460  0BD1  01F6               	clrf	Print_String@chln
 15461  0BD2  319B  238A  318A   	fcall	_Print_String
 15462                           
 15463                           ;main.c: 1227: break;
 15464  0BD5  2C05               	goto	l7146
 15465  0BD6                     l7134:	
 15466                           ;main.c: 1228: case 3:
 15467                           
 15468                           
 15469                           ;main.c: 1229: Print_String(",$", 0);
 15470  0BD6  30F6               	movlw	low (STR_30| (0+32768))
 15471  0BD7  00F4               	movwf	Print_String@BStr
 15472  0BD8  3092               	movlw	high (STR_30| (0+32768))
 15473  0BD9  00F5               	movwf	Print_String@BStr+1
 15474  0BDA  01F6               	clrf	Print_String@chln
 15475  0BDB  319B  238A  318A   	fcall	_Print_String
 15476                           
 15477                           ;main.c: 1230: break;
 15478  0BDE  2C05               	goto	l7146
 15479  0BDF                     l7136:	
 15480                           ;main.c: 1231: case 4:
 15481                           
 15482                           
 15483                           ;main.c: 1232: Print_String(",$", 0);
 15484  0BDF  30F6               	movlw	low (STR_30| (0+32768))
 15485  0BE0  00F4               	movwf	Print_String@BStr
 15486  0BE1  3092               	movlw	high (STR_30| (0+32768))
 15487  0BE2  00F5               	movwf	Print_String@BStr+1
 15488  0BE3  01F6               	clrf	Print_String@chln
 15489  0BE4  319B  238A  318A   	fcall	_Print_String
 15490                           
 15491                           ;main.c: 1233: break;
 15492  0BE7  2C05               	goto	l7146
 15493  0BE8                     l7138:	
 15494                           ;main.c: 1234: case 5:
 15495                           
 15496                           
 15497                           ;main.c: 1235: Print_String("TDS = $", 0);
 15498  0BE8  30DA               	movlw	low (STR_1| (0+32768))
 15499  0BE9  00F4               	movwf	Print_String@BStr
 15500  0BEA  3092               	movlw	high (STR_1| (0+32768))
 15501  0BEB  00F5               	movwf	Print_String@BStr+1
 15502  0BEC  01F6               	clrf	Print_String@chln
 15503  0BED  319B  238A  318A   	fcall	_Print_String
 15504                           
 15505                           ;main.c: 1236: break;
 15506  0BF0  2C05               	goto	l7146
 15507  0BF1                     l7140:	
 15508                           ;main.c: 1237: case 6:
 15509                           
 15510                           
 15511                           ;main.c: 1238: Print_String("DO = $", 0);
 15512  0BF1  30E2               	movlw	low (STR_36| (0+32768))
 15513  0BF2  00F4               	movwf	Print_String@BStr
 15514  0BF3  3092               	movlw	high (STR_36| (0+32768))
 15515  0BF4  00F5               	movwf	Print_String@BStr+1
 15516  0BF5  01F6               	clrf	Print_String@chln
 15517  0BF6  319B  238A  318A   	fcall	_Print_String
 15518                           
 15519                           ;main.c: 1240: }
 15520                           
 15521                           ;main.c: 1239: break;
 15522  0BF9  2C05               	goto	l7146
 15523  0BFA                     l7144:	
 15524  0BFA  0020               	movlb	0	; select bank0
 15525  0BFB  0844               	movf	RUN_MESURE@WhatStrip,w
 15526                           
 15527                           ; Switch size 1, requested type "space"
 15528                           ; Number of cases is 7, Range of values is 0 to 6
 15529                           ; switch strategies available:
 15530                           ; Name         Instructions Cycles
 15531                           ; direct_byte           20     6 (fixed)
 15532                           ; simple_byte           22    12 (average)
 15533                           ; jumptable            260     6 (fixed)
 15534                           ;	Chosen strategy is direct_byte
 15535  0BFC  0084               	movwf	4
 15536  0BFD  3007               	movlw	7
 15537  0BFE  0204               	subwf	4,w
 15538  0BFF  1803               	skipnc
 15539  0C00  2C05               	goto	l7146
 15540  0C01  3198               	movlp	high S8212
 15541  0C02  3504               	lslf	4,w
 15542  0C03  3E00               	addlw	low S8212
 15543  0C04  0082               	movwf	2
 15544  0C05                     l7146:	
 15545                           
 15546                           ;main.c: 1242: for(lpi =0; lpi<1000; lpi++)
 15547  0C05  0020               	movlb	0	; select bank0
 15548  0C06  01C2               	clrf	RUN_MESURE@lpi
 15549  0C07  01C3               	clrf	RUN_MESURE@lpi+1
 15550  0C08  3003               	movlw	3
 15551  0C09  0243               	subwf	RUN_MESURE@lpi+1,w
 15552  0C0A  30E8               	movlw	232
 15553  0C0B  1903               	skipnz
 15554  0C0C  0242               	subwf	RUN_MESURE@lpi,w
 15555  0C0D  1803               	btfsc	3,0
 15556  0C0E  2C33               	goto	l7160
 15557  0C0F                     l7152:	
 15558                           
 15559                           ;main.c: 1243: {
 15560                           ;main.c: 1244: ADC_Vol = ADC_GetConversion(tpWhatADC);
 15561  0C0F  083D               	movf	RUN_MESURE@tpWhatADC,w
 15562  0C10  319A  2207  318A   	fcall	_ADC_GetConversion
 15563  0C13  0873               	movf	?_ADC_GetConversion+1,w
 15564  0C14  00FB               	movwf	_ADC_Vol+1
 15565  0C15  0872               	movf	?_ADC_GetConversion,w
 15566  0C16  00FA               	movwf	_ADC_Vol
 15567                           
 15568                           ;main.c: 1245: AVG100 += (uint32_t)ADC_Vol/16;
 15569  0C17  087B               	movf	_ADC_Vol+1,w
 15570  0C18  0020               	movlb	0	; select bank0
 15571  0C19  00AD               	movwf	??_RUN_MESURE+1
 15572  0C1A  087A               	movf	_ADC_Vol,w
 15573  0C1B  00AC               	movwf	??_RUN_MESURE
 15574  0C1C  3004               	movlw	4
 15575  0C1D                     u7885:	
 15576  0C1D  36AD               	lsrf	??_RUN_MESURE+1,f
 15577  0C1E  0CAC               	rrf	??_RUN_MESURE,f
 15578  0C1F  0B89               	decfsz	9,f
 15579  0C20  2C1D               	goto	u7885
 15580  0C21  082C               	movf	??_RUN_MESURE,w
 15581  0C22  07BE               	addwf	RUN_MESURE@AVG100,f
 15582  0C23  082D               	movf	??_RUN_MESURE+1,w
 15583  0C24  3DBF               	addwfc	RUN_MESURE@AVG100+1,f
 15584  0C25  3000               	movlw	0
 15585  0C26  3DC0               	addwfc	RUN_MESURE@AVG100+2,f
 15586  0C27  3DC1               	addwfc	RUN_MESURE@AVG100+3,f
 15587  0C28  3001               	movlw	1
 15588  0C29  07C2               	addwf	RUN_MESURE@lpi,f
 15589  0C2A  3000               	movlw	0
 15590  0C2B  3DC3               	addwfc	RUN_MESURE@lpi+1,f
 15591  0C2C  3003               	movlw	3
 15592  0C2D  0243               	subwf	RUN_MESURE@lpi+1,w
 15593  0C2E  30E8               	movlw	232
 15594  0C2F  1903               	skipnz
 15595  0C30  0242               	subwf	RUN_MESURE@lpi,w
 15596  0C31  1C03               	skipc
 15597  0C32  2C0F               	goto	l7152
 15598  0C33                     l7160:	
 15599                           
 15600                           ;main.c: 1246: }
 15601                           ;main.c: 1248: AVG100 /= 1000;
 15602  0C33  3000               	movlw	0
 15603  0C34  00F5               	movwf	___lldiv@divisor+3
 15604  0C35  3000               	movlw	0
 15605  0C36  00F4               	movwf	___lldiv@divisor+2
 15606  0C37  3003               	movlw	3
 15607  0C38  00F3               	movwf	___lldiv@divisor+1
 15608  0C39  30E8               	movlw	232
 15609  0C3A  00F2               	movwf	___lldiv@divisor
 15610  0C3B  0841               	movf	RUN_MESURE@AVG100+3,w
 15611  0C3C  00F9               	movwf	___lldiv@dividend+3
 15612  0C3D  0840               	movf	RUN_MESURE@AVG100+2,w
 15613  0C3E  00F8               	movwf	___lldiv@dividend+2
 15614  0C3F  083F               	movf	RUN_MESURE@AVG100+1,w
 15615  0C40  00F7               	movwf	___lldiv@dividend+1
 15616  0C41  083E               	movf	RUN_MESURE@AVG100,w
 15617  0C42  00F6               	movwf	___lldiv@dividend
 15618  0C43  319F  27AD  318A   	fcall	___lldiv
 15619  0C46  0875               	movf	?___lldiv+3,w
 15620  0C47  0020               	movlb	0	; select bank0
 15621  0C48  00C1               	movwf	RUN_MESURE@AVG100+3
 15622  0C49  0874               	movf	?___lldiv+2,w
 15623  0C4A  00C0               	movwf	RUN_MESURE@AVG100+2
 15624  0C4B  0873               	movf	?___lldiv+1,w
 15625  0C4C  00BF               	movwf	RUN_MESURE@AVG100+1
 15626  0C4D  0872               	movf	?___lldiv,w
 15627  0C4E  00BE               	movwf	RUN_MESURE@AVG100
 15628                           
 15629                           ;main.c: 1250: ADC_Vol = (uint16_t)AVG100;
 15630  0C4F  083F               	movf	RUN_MESURE@AVG100+1,w
 15631  0C50  00FB               	movwf	_ADC_Vol+1
 15632  0C51  083E               	movf	RUN_MESURE@AVG100,w
 15633  0C52  00FA               	movwf	_ADC_Vol
 15634                           
 15635                           ;main.c: 1260: if(WhatStrip == 0)
 15636  0C53  0844               	movf	RUN_MESURE@WhatStrip,w
 15637  0C54  1D03               	btfss	3,2
 15638  0C55  2C5C               	goto	l7168
 15639                           
 15640                           ;main.c: 1261: REC_METER_VAL.Rec_PH = ADC_Vol;
 15641  0C56  087B               	movf	_ADC_Vol+1,w
 15642  0C57  0022               	movlb	2	; select bank2
 15643  0C58  00A5               	movwf	((_REC_METER_VAL+1)^(0+256)+4)
 15644  0C59  087A               	movf	_ADC_Vol,w
 15645  0C5A  00A4               	movwf	(_REC_METER_VAL^(0+256)+4)
 15646  0C5B  2C9C               	goto	l7192
 15647  0C5C                     l7168:	
 15648                           
 15649                           ;main.c: 1262: else if(WhatStrip == 1)
 15650  0C5C  0020               	movlb	0	; select bank0
 15651  0C5D  0344               	decf	RUN_MESURE@WhatStrip,w
 15652  0C5E  1D03               	btfss	3,2
 15653  0C5F  2C66               	goto	l7172
 15654                           
 15655                           ;main.c: 1263: REC_METER_VAL.Rec_NH3 = ADC_Vol;
 15656  0C60  087B               	movf	_ADC_Vol+1,w
 15657  0C61  0022               	movlb	2	; select bank2
 15658  0C62  00A3               	movwf	((_REC_METER_VAL+1)^(0+256)+2)
 15659  0C63  087A               	movf	_ADC_Vol,w
 15660  0C64  00A2               	movwf	(_REC_METER_VAL^(0+256)+2)
 15661  0C65  2C9C               	goto	l7192
 15662  0C66                     l7172:	
 15663                           
 15664                           ;main.c: 1264: else if(WhatStrip == 2)
 15665  0C66  3002               	movlw	2
 15666  0C67  0020               	movlb	0	; select bank0
 15667  0C68  0644               	xorwf	RUN_MESURE@WhatStrip,w
 15668  0C69  1D03               	btfss	3,2
 15669  0C6A  2C71               	goto	l7176
 15670                           
 15671                           ;main.c: 1265: REC_METER_VAL.Rec_ORP = ADC_Vol;
 15672  0C6B  087B               	movf	_ADC_Vol+1,w
 15673  0C6C  0022               	movlb	2	; select bank2
 15674  0C6D  00AF               	movwf	((_REC_METER_VAL+1)^(0+256)+14)
 15675  0C6E  087A               	movf	_ADC_Vol,w
 15676  0C6F  00AE               	movwf	(_REC_METER_VAL^(0+256)+14)
 15677  0C70  2C9C               	goto	l7192
 15678  0C71                     l7176:	
 15679                           
 15680                           ;main.c: 1266: else if(WhatStrip == 3)
 15681  0C71  3003               	movlw	3
 15682  0C72  0020               	movlb	0	; select bank0
 15683  0C73  0644               	xorwf	RUN_MESURE@WhatStrip,w
 15684  0C74  1D03               	btfss	3,2
 15685  0C75  2C7C               	goto	l7180
 15686                           
 15687                           ;main.c: 1267: REC_METER_VAL.Rec_GHmg = ADC_Vol;
 15688  0C76  087B               	movf	_ADC_Vol+1,w
 15689  0C77  0022               	movlb	2	; select bank2
 15690  0C78  00AB               	movwf	((_REC_METER_VAL+1)^(0+256)+10)
 15691  0C79  087A               	movf	_ADC_Vol,w
 15692  0C7A  00AA               	movwf	(_REC_METER_VAL^(0+256)+10)
 15693  0C7B  2C9C               	goto	l7192
 15694  0C7C                     l7180:	
 15695                           
 15696                           ;main.c: 1268: else if(WhatStrip == 4)
 15697  0C7C  3004               	movlw	4
 15698  0C7D  0020               	movlb	0	; select bank0
 15699  0C7E  0644               	xorwf	RUN_MESURE@WhatStrip,w
 15700  0C7F  1D03               	btfss	3,2
 15701  0C80  2C87               	goto	l7184
 15702                           
 15703                           ;main.c: 1269: REC_METER_VAL.Rec_HGca = ADC_Vol;
 15704  0C81  087B               	movf	_ADC_Vol+1,w
 15705  0C82  0022               	movlb	2	; select bank2
 15706  0C83  00A9               	movwf	((_REC_METER_VAL+1)^(0+256)+8)
 15707  0C84  087A               	movf	_ADC_Vol,w
 15708  0C85  00A8               	movwf	(_REC_METER_VAL^(0+256)+8)
 15709  0C86  2C9C               	goto	l7192
 15710  0C87                     l7184:	
 15711                           
 15712                           ;main.c: 1270: else if(WhatStrip == 5)
 15713  0C87  3005               	movlw	5
 15714  0C88  0020               	movlb	0	; select bank0
 15715  0C89  0644               	xorwf	RUN_MESURE@WhatStrip,w
 15716  0C8A  1D03               	btfss	3,2
 15717  0C8B  2C92               	goto	l7188
 15718                           
 15719                           ;main.c: 1271: REC_METER_VAL.Rec_TDS = ADC_Vol;
 15720  0C8C  087B               	movf	_ADC_Vol+1,w
 15721  0C8D  0022               	movlb	2	; select bank2
 15722  0C8E  00A7               	movwf	((_REC_METER_VAL+1)^(0+256)+6)
 15723  0C8F  087A               	movf	_ADC_Vol,w
 15724  0C90  00A6               	movwf	(_REC_METER_VAL^(0+256)+6)
 15725  0C91  2C9C               	goto	l7192
 15726  0C92                     l7188:	
 15727                           
 15728                           ;main.c: 1272: else if(WhatStrip == 6)
 15729  0C92  3006               	movlw	6
 15730  0C93  0020               	movlb	0	; select bank0
 15731  0C94  0644               	xorwf	RUN_MESURE@WhatStrip,w
 15732  0C95  1D03               	btfss	3,2
 15733  0C96  2C9C               	goto	l7192
 15734                           
 15735                           ;main.c: 1273: REC_METER_VAL.Rec_DO = ADC_Vol;
 15736  0C97  087B               	movf	_ADC_Vol+1,w
 15737  0C98  0022               	movlb	2	; select bank2
 15738  0C99  00AD               	movwf	((_REC_METER_VAL+1)^(0+256)+12)
 15739  0C9A  087A               	movf	_ADC_Vol,w
 15740  0C9B  00AC               	movwf	(_REC_METER_VAL^(0+256)+12)
 15741  0C9C                     l7192:	
 15742                           
 15743                           ;main.c: 1278: Print_uint16Str(ADC_Vol,0);
 15744  0C9C  087B               	movf	_ADC_Vol+1,w
 15745  0C9D  0020               	movlb	0	; select bank0
 15746  0C9E  00A1               	movwf	Print_uint16Str@InputVol+1
 15747  0C9F  087A               	movf	_ADC_Vol,w
 15748  0CA0  00A0               	movwf	Print_uint16Str@InputVol
 15749  0CA1  01A2               	clrf	Print_uint16Str@Chgln
 15750  0CA2  3196  2655         	fcall	_Print_uint16Str
 15751  0CA4  0008               	return
 15752  0CA5                     __end_of_RUN_MESURE:	
 15753                           
 15754                           	psect	swtext1
 15755  1800                     __pswtext1:	
 15756  1800                     S8212:	
 15757  1800  318B  2BB8         	ljmp	l7126
 15758  1802  318B  2BC4         	ljmp	l7130
 15759  1804  318B  2BCD         	ljmp	l7132
 15760  1806  318B  2BD6         	ljmp	l7134
 15761  1808  318B  2BDF         	ljmp	l7136
 15762  180A  318B  2BE8         	ljmp	l7138
 15763  180C  318B  2BF1         	ljmp	l7140
 15764                           
 15765                           	psect	text42
 15766  1FAD                     __ptext42:	
 15767 ;; *************** function ___lldiv *****************
 15768 ;; Defined at:
 15769 ;;		line 6 in file "/Applications/microchip/xc8/v1.35/sources/common/lldiv.c"
 15770 ;; Parameters:    Size  Location     Type
 15771 ;;  divisor         4    2[COMMON] unsigned long 
 15772 ;;  dividend        4    6[COMMON] unsigned long 
 15773 ;; Auto vars:     Size  Location     Type
 15774 ;;  quotient        4    1[BANK0 ] unsigned long 
 15775 ;;  counter         1    5[BANK0 ] unsigned char 
 15776 ;; Return value:  Size  Location     Type
 15777 ;;                  4    2[COMMON] unsigned long 
 15778 ;; Registers used:
 15779 ;;		wreg, status,2, status,0
 15780 ;; Tracked objects:
 15781 ;;		On entry : 0/0
 15782 ;;		On exit  : 0/0
 15783 ;;		Unchanged: 0/0
 15784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15785 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15786 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15788 ;;      Totals:         8       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15789 ;;Total ram usage:       14 bytes
 15790 ;; Hardware stack levels used:    1
 15791 ;; Hardware stack levels required when called:    3
 15792 ;; This function calls:
 15793 ;;		Nothing
 15794 ;; This function is called by:
 15795 ;;		_main
 15796 ;;		_RUN_MESURE
 15797 ;;		_Convert_HMS
 15798 ;; This function uses a non-reentrant model
 15799 ;;
 15800                           
 15801                           
 15802                           ;psect for function ___lldiv
 15803  1FAD                     ___lldiv:	
 15804                           
 15805                           ;incstack = 0
 15806                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 15807  1FAD  3000               	movlw	0
 15808  1FAE  0020               	movlb	0	; select bank0
 15809  1FAF  00A4               	movwf	___lldiv@quotient+3
 15810  1FB0  3000               	movlw	0
 15811  1FB1  00A3               	movwf	___lldiv@quotient+2
 15812  1FB2  3000               	movlw	0
 15813  1FB3  00A2               	movwf	___lldiv@quotient+1
 15814  1FB4  3000               	movlw	0
 15815  1FB5  00A1               	movwf	___lldiv@quotient
 15816  1FB6  0875               	movf	___lldiv@divisor+3,w
 15817  1FB7  0474               	iorwf	___lldiv@divisor+2,w
 15818  1FB8  0473               	iorwf	___lldiv@divisor+1,w
 15819  1FB9  0472               	iorwf	___lldiv@divisor,w
 15820  1FBA  1903               	skipnz
 15821  1FBB  2FF7               	goto	l6596
 15822  1FBC  01A5               	clrf	___lldiv@counter
 15823  1FBD  0AA5               	incf	___lldiv@counter,f
 15824  1FBE                     l6582:	
 15825  1FBE  1BF5               	btfsc	___lldiv@divisor+3,7
 15826  1FBF  2FCC               	goto	l6584
 15827  1FC0  3001               	movlw	1
 15828  1FC1                     u7035:	
 15829  1FC1  35F2               	lslf	___lldiv@divisor,f
 15830  1FC2  0DF3               	rlf	___lldiv@divisor+1,f
 15831  1FC3  0DF4               	rlf	___lldiv@divisor+2,f
 15832  1FC4  0DF5               	rlf	___lldiv@divisor+3,f
 15833  1FC5  0B89               	decfsz	9,f
 15834  1FC6  2FC1               	goto	u7035
 15835  1FC7  3001               	movlw	1
 15836  1FC8  00A0               	movwf	??___lldiv
 15837  1FC9  0820               	movf	??___lldiv,w
 15838  1FCA  07A5               	addwf	___lldiv@counter,f
 15839  1FCB  2FBE               	goto	l6582
 15840  1FCC                     l6584:	
 15841  1FCC  3001               	movlw	1
 15842  1FCD                     u7055:	
 15843  1FCD  35A1               	lslf	___lldiv@quotient,f
 15844  1FCE  0DA2               	rlf	___lldiv@quotient+1,f
 15845  1FCF  0DA3               	rlf	___lldiv@quotient+2,f
 15846  1FD0  0DA4               	rlf	___lldiv@quotient+3,f
 15847  1FD1  0B89               	decfsz	9,f
 15848  1FD2  2FCD               	goto	u7055
 15849  1FD3  0875               	movf	___lldiv@divisor+3,w
 15850  1FD4  0279               	subwf	___lldiv@dividend+3,w
 15851  1FD5  1D03               	skipz
 15852  1FD6  2FE1               	goto	u7065
 15853  1FD7  0874               	movf	___lldiv@divisor+2,w
 15854  1FD8  0278               	subwf	___lldiv@dividend+2,w
 15855  1FD9  1D03               	skipz
 15856  1FDA  2FE1               	goto	u7065
 15857  1FDB  0873               	movf	___lldiv@divisor+1,w
 15858  1FDC  0277               	subwf	___lldiv@dividend+1,w
 15859  1FDD  1D03               	skipz
 15860  1FDE  2FE1               	goto	u7065
 15861  1FDF  0872               	movf	___lldiv@divisor,w
 15862  1FE0  0276               	subwf	___lldiv@dividend,w
 15863  1FE1                     u7065:	
 15864  1FE1  1C03               	skipc
 15865  1FE2  2FEC               	goto	l6592
 15866  1FE3  0872               	movf	___lldiv@divisor,w
 15867  1FE4  02F6               	subwf	___lldiv@dividend,f
 15868  1FE5  0873               	movf	___lldiv@divisor+1,w
 15869  1FE6  3BF7               	subwfb	___lldiv@dividend+1,f
 15870  1FE7  0874               	movf	___lldiv@divisor+2,w
 15871  1FE8  3BF8               	subwfb	___lldiv@dividend+2,f
 15872  1FE9  0875               	movf	___lldiv@divisor+3,w
 15873  1FEA  3BF9               	subwfb	___lldiv@dividend+3,f
 15874  1FEB  1421               	bsf	___lldiv@quotient,0
 15875  1FEC                     l6592:	
 15876  1FEC  3001               	movlw	1
 15877  1FED                     u7075:	
 15878  1FED  36F5               	lsrf	___lldiv@divisor+3,f
 15879  1FEE  0CF4               	rrf	___lldiv@divisor+2,f
 15880  1FEF  0CF3               	rrf	___lldiv@divisor+1,f
 15881  1FF0  0CF2               	rrf	___lldiv@divisor,f
 15882  1FF1  0B89               	decfsz	9,f
 15883  1FF2  2FED               	goto	u7075
 15884  1FF3  3001               	movlw	1
 15885  1FF4  02A5               	subwf	___lldiv@counter,f
 15886  1FF5  1D03               	btfss	3,2
 15887  1FF6  2FCC               	goto	l6584
 15888  1FF7                     l6596:	
 15889  1FF7  0824               	movf	___lldiv@quotient+3,w
 15890  1FF8  00F5               	movwf	?___lldiv+3
 15891  1FF9  0823               	movf	___lldiv@quotient+2,w
 15892  1FFA  00F4               	movwf	?___lldiv+2
 15893  1FFB  0822               	movf	___lldiv@quotient+1,w
 15894  1FFC  00F3               	movwf	?___lldiv+1
 15895  1FFD  0821               	movf	___lldiv@quotient,w
 15896  1FFE  00F2               	movwf	?___lldiv
 15897  1FFF  0008               	return
 15898  2000                     __end_of___lldiv:	
 15899                           
 15900                           	psect	text43
 15901  19B6                     __ptext43:	
 15902 ;; *************** function ___bmul *****************
 15903 ;; Defined at:
 15904 ;;		line 4 in file "/Applications/microchip/xc8/v1.35/sources/common/Umul8.c"
 15905 ;; Parameters:    Size  Location     Type
 15906 ;;  multiplier      1    wreg     unsigned char 
 15907 ;;  multiplicand    1    7[COMMON] unsigned char 
 15908 ;; Auto vars:     Size  Location     Type
 15909 ;;  multiplier      1    5[BANK0 ] unsigned char 
 15910 ;;  product         1    4[BANK0 ] unsigned char 
 15911 ;; Return value:  Size  Location     Type
 15912 ;;                  1    wreg      unsigned char 
 15913 ;; Registers used:
 15914 ;;		wreg, status,2, status,0
 15915 ;; Tracked objects:
 15916 ;;		On entry : 0/0
 15917 ;;		On exit  : 0/0
 15918 ;;		Unchanged: 0/0
 15919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15920 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15921 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15922 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15923 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15924 ;;Total ram usage:        4 bytes
 15925 ;; Hardware stack levels used:    1
 15926 ;; Hardware stack levels required when called:    3
 15927 ;; This function calls:
 15928 ;;		Nothing
 15929 ;; This function is called by:
 15930 ;;		_RUN_MESURE
 15931 ;;		_Covert_BDC_2_OCT
 15932 ;;		_Save_QMD_EEPROM
 15933 ;;		_Load_QMD_EEPROM
 15934 ;; This function uses a non-reentrant model
 15935 ;;
 15936                           
 15937                           
 15938                           ;psect for function ___bmul
 15939  19B6                     ___bmul:	
 15940                           
 15941                           ;incstack = 0
 15942                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15943                           ;___bmul@multiplier stored from wreg
 15944  19B6  0020               	movlb	0	; select bank0
 15945  19B7  00A5               	movwf	___bmul@multiplier
 15946  19B8  01A4               	clrf	___bmul@product
 15947  19B9                     l6980:	
 15948  19B9  1C25               	btfss	___bmul@multiplier,0
 15949  19BA  29BF               	goto	l6984
 15950  19BB  0877               	movf	___bmul@multiplicand,w
 15951  19BC  00F8               	movwf	??___bmul
 15952  19BD  0878               	movf	??___bmul,w
 15953  19BE  07A4               	addwf	___bmul@product,f
 15954  19BF                     l6984:	
 15955  19BF  1003               	clrc
 15956  19C0  0DF7               	rlf	___bmul@multiplicand,f
 15957  19C1  1003               	clrc
 15958  19C2  0CA5               	rrf	___bmul@multiplier,f
 15959  19C3  0825               	movf	___bmul@multiplier,w
 15960  19C4  1D03               	btfss	3,2
 15961  19C5  29B9               	goto	l6980
 15962  19C6  0824               	movf	___bmul@product,w
 15963  19C7  0008               	return
 15964  19C8                     __end_of___bmul:	
 15965                           
 15966                           	psect	text44
 15967  1655                     __ptext44:	
 15968 ;; *************** function _Print_uint16Str *****************
 15969 ;; Defined at:
 15970 ;;		line 1440 in file "main.c"
 15971 ;; Parameters:    Size  Location     Type
 15972 ;;  InputVol        2    0[BANK0 ] unsigned int 
 15973 ;;  Chgln           1    2[BANK0 ] unsigned char 
 15974 ;; Auto vars:     Size  Location     Type
 15975 ;;  DIVA            2    9[BANK0 ] unsigned int 
 15976 ;;  CalVol          2    7[BANK0 ] unsigned int 
 15977 ;;  loopA           2    5[BANK0 ] unsigned int 
 15978 ;;  wOneByte        1   11[BANK0 ] unsigned char 
 15979 ;;  Chk19           1    4[BANK0 ] unsigned char 
 15980 ;; Return value:  Size  Location     Type
 15981 ;;		None               void
 15982 ;; Registers used:
 15983 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15984 ;; Tracked objects:
 15985 ;;		On entry : 0/0
 15986 ;;		On exit  : 0/0
 15987 ;;		Unchanged: 0/0
 15988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15989 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15990 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15992 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15993 ;;Total ram usage:       12 bytes
 15994 ;; Hardware stack levels used:    1
 15995 ;; Hardware stack levels required when called:    5
 15996 ;; This function calls:
 15997 ;;		_EUSART_Write
 15998 ;;		_Print_CHLN
 15999 ;;		___lwdiv
 16000 ;;		___lwmod
 16001 ;; This function is called by:
 16002 ;;		_main
 16003 ;;		_Decode_RS232_CMD
 16004 ;;		_RUN_MESURE
 16005 ;;		_DS18B20_GetTemp
 16006 ;;		_PIC_SYNC_ADO_ULSR
 16007 ;; This function uses a non-reentrant model
 16008 ;;
 16009                           
 16010                           
 16011                           ;psect for function _Print_uint16Str
 16012  1655                     _Print_uint16Str:	
 16013                           
 16014                           ;main.c: 1442: uint16_t loopA = 0;
 16015                           
 16016                           ;incstack = 0
 16017                           ; Regs used in _Print_uint16Str: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16018  1655  0020               	movlb	0	; select bank0
 16019  1656  01A5               	clrf	Print_uint16Str@loopA
 16020  1657  01A6               	clrf	Print_uint16Str@loopA+1
 16021                           
 16022                           ;main.c: 1443: uint8_t wOneByte = 0x41;
 16023  1658  3041               	movlw	65
 16024  1659  00A3               	movwf	??_Print_uint16Str
 16025  165A  0823               	movf	??_Print_uint16Str,w
 16026  165B  00AB               	movwf	Print_uint16Str@wOneByte
 16027                           
 16028                           ;main.c: 1444: uint16_t CalVol = InputVol;
 16029  165C  0821               	movf	Print_uint16Str@InputVol+1,w
 16030  165D  00A8               	movwf	Print_uint16Str@CalVol+1
 16031  165E  0820               	movf	Print_uint16Str@InputVol,w
 16032  165F  00A7               	movwf	Print_uint16Str@CalVol
 16033                           
 16034                           ;main.c: 1446: uint16_t DIVA = 10000;
 16035  1660  3010               	movlw	16
 16036  1661  00A9               	movwf	Print_uint16Str@DIVA
 16037  1662  3027               	movlw	39
 16038  1663  00AA               	movwf	Print_uint16Str@DIVA+1
 16039                           
 16040                           ;main.c: 1448: uint8_t Chk19 = 0;
 16041  1664  01A4               	clrf	Print_uint16Str@Chk19
 16042                           
 16043                           ;main.c: 1451: for(loopA = 0; loopA < 4; loopA++)
 16044  1665  01A5               	clrf	Print_uint16Str@loopA
 16045  1666  01A6               	clrf	Print_uint16Str@loopA+1
 16046  1667  3000               	movlw	0
 16047  1668  0226               	subwf	Print_uint16Str@loopA+1,w
 16048  1669  3004               	movlw	4
 16049  166A  1903               	skipnz
 16050  166B  0225               	subwf	Print_uint16Str@loopA,w
 16051  166C  1803               	btfsc	3,0
 16052  166D  2EB9               	goto	l6668
 16053  166E                     l6652:	
 16054                           
 16055                           ;main.c: 1452: {
 16056                           ;main.c: 1453: wOneByte = CalVol / DIVA;
 16057  166E  082A               	movf	Print_uint16Str@DIVA+1,w
 16058  166F  00F3               	movwf	___lwdiv@divisor+1
 16059  1670  0829               	movf	Print_uint16Str@DIVA,w
 16060  1671  00F2               	movwf	___lwdiv@divisor
 16061  1672  0828               	movf	Print_uint16Str@CalVol+1,w
 16062  1673  00F5               	movwf	___lwdiv@dividend+1
 16063  1674  0827               	movf	Print_uint16Str@CalVol,w
 16064  1675  00F4               	movwf	___lwdiv@dividend
 16065  1676  319C  24E5  3196   	fcall	___lwdiv
 16066  1679  0872               	movf	?___lwdiv,w
 16067  167A  0020               	movlb	0	; select bank0
 16068  167B  00A3               	movwf	??_Print_uint16Str
 16069  167C  0823               	movf	??_Print_uint16Str,w
 16070  167D  00AB               	movwf	Print_uint16Str@wOneByte
 16071                           
 16072                           ;main.c: 1454: CalVol %= DIVA;
 16073  167E  082A               	movf	Print_uint16Str@DIVA+1,w
 16074  167F  00F3               	movwf	___lwmod@divisor+1
 16075  1680  0829               	movf	Print_uint16Str@DIVA,w
 16076  1681  00F2               	movwf	___lwmod@divisor
 16077  1682  0828               	movf	Print_uint16Str@CalVol+1,w
 16078  1683  00F5               	movwf	___lwmod@dividend+1
 16079  1684  0827               	movf	Print_uint16Str@CalVol,w
 16080  1685  00F4               	movwf	___lwmod@dividend
 16081  1686  319B  23FA  3196   	fcall	___lwmod
 16082  1689  0873               	movf	?___lwmod+1,w
 16083  168A  0020               	movlb	0	; select bank0
 16084  168B  00A8               	movwf	Print_uint16Str@CalVol+1
 16085  168C  0872               	movf	?___lwmod,w
 16086  168D  00A7               	movwf	Print_uint16Str@CalVol
 16087                           
 16088                           ;main.c: 1455: if((Chk19 == 0)&&(wOneByte == 0))
 16089  168E  0824               	movf	Print_uint16Str@Chk19,w
 16090  168F  1D03               	btfss	3,2
 16091  1690  2E96               	goto	l840
 16092  1691  082B               	movf	Print_uint16Str@wOneByte,w
 16093  1692  1D03               	btfss	3,2
 16094  1693  2E96               	goto	l840
 16095                           
 16096                           ;main.c: 1456: {
 16097                           ;main.c: 1457: EUSART_Write(' ');
 16098  1694  3020               	movlw	32
 16099  1695  2E9A               	goto	L8
 16100  1696                     l840:	
 16101                           ;main.c: 1459: }
 16102                           
 16103                           
 16104                           ;main.c: 1460: else
 16105                           ;main.c: 1461: {
 16106                           ;main.c: 1462: Chk19 = 1;
 16107  1696  01A4               	clrf	Print_uint16Str@Chk19
 16108  1697  0AA4               	incf	Print_uint16Str@Chk19,f
 16109                           
 16110                           ;main.c: 1463: EUSART_Write(wOneByte+0x30);
 16111  1698  082B               	movf	Print_uint16Str@wOneByte,w
 16112  1699  3E30               	addlw	48
 16113  169A                     L8:	
 16114  169A  319B  2366  3196   	fcall	_EUSART_Write
 16115                           
 16116                           ;main.c: 1464: }
 16117                           ;main.c: 1466: DIVA /=10;
 16118  169D  300A               	movlw	10
 16119  169E  00F2               	movwf	___lwdiv@divisor
 16120  169F  3000               	movlw	0
 16121  16A0  00F3               	movwf	___lwdiv@divisor+1
 16122  16A1  0020               	movlb	0	; select bank0
 16123  16A2  082A               	movf	Print_uint16Str@DIVA+1,w
 16124  16A3  00F5               	movwf	___lwdiv@dividend+1
 16125  16A4  0829               	movf	Print_uint16Str@DIVA,w
 16126  16A5  00F4               	movwf	___lwdiv@dividend
 16127  16A6  319C  24E5  3196   	fcall	___lwdiv
 16128  16A9  0873               	movf	?___lwdiv+1,w
 16129  16AA  0020               	movlb	0	; select bank0
 16130  16AB  00AA               	movwf	Print_uint16Str@DIVA+1
 16131  16AC  0872               	movf	?___lwdiv,w
 16132  16AD  00A9               	movwf	Print_uint16Str@DIVA
 16133  16AE  3001               	movlw	1
 16134  16AF  07A5               	addwf	Print_uint16Str@loopA,f
 16135  16B0  3000               	movlw	0
 16136  16B1  3DA6               	addwfc	Print_uint16Str@loopA+1,f
 16137  16B2  3000               	movlw	0
 16138  16B3  0226               	subwf	Print_uint16Str@loopA+1,w
 16139  16B4  3004               	movlw	4
 16140  16B5  1903               	skipnz
 16141  16B6  0225               	subwf	Print_uint16Str@loopA,w
 16142  16B7  1C03               	skipc
 16143  16B8  2E6E               	goto	l6652
 16144  16B9                     l6668:	
 16145                           
 16146                           ;main.c: 1467: }
 16147                           ;main.c: 1469: wOneByte = CalVol;
 16148  16B9  0827               	movf	Print_uint16Str@CalVol,w
 16149  16BA  00A3               	movwf	??_Print_uint16Str
 16150  16BB  0823               	movf	??_Print_uint16Str,w
 16151  16BC  00AB               	movwf	Print_uint16Str@wOneByte
 16152                           
 16153                           ;main.c: 1470: EUSART_Write(wOneByte+0x30);
 16154  16BD  082B               	movf	Print_uint16Str@wOneByte,w
 16155  16BE  3E30               	addlw	48
 16156  16BF  319B  2366  3196   	fcall	_EUSART_Write
 16157                           
 16158                           ;main.c: 1472: if(Chgln == 1)
 16159  16C2  0020               	movlb	0	; select bank0
 16160  16C3  0322               	decf	Print_uint16Str@Chgln,w
 16161  16C4  1D03               	btfss	3,2
 16162  16C5  0008               	return
 16163                           
 16164                           ;main.c: 1473: Print_CHLN();
 16165  16C6  3199  211C         	fcall	_Print_CHLN
 16166  16C8  0008               	return
 16167  16C9                     __end_of_Print_uint16Str:	
 16168                           
 16169                           	psect	text45
 16170  1BFA                     __ptext45:	
 16171 ;; *************** function ___lwmod *****************
 16172 ;; Defined at:
 16173 ;;		line 6 in file "/Applications/microchip/xc8/v1.35/sources/common/lwmod.c"
 16174 ;; Parameters:    Size  Location     Type
 16175 ;;  divisor         2    2[COMMON] unsigned int 
 16176 ;;  dividend        2    4[COMMON] unsigned int 
 16177 ;; Auto vars:     Size  Location     Type
 16178 ;;  counter         1    7[COMMON] unsigned char 
 16179 ;; Return value:  Size  Location     Type
 16180 ;;                  2    2[COMMON] unsigned int 
 16181 ;; Registers used:
 16182 ;;		wreg, status,2, status,0
 16183 ;; Tracked objects:
 16184 ;;		On entry : 0/0
 16185 ;;		On exit  : 0/0
 16186 ;;		Unchanged: 0/0
 16187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16188 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16189 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16190 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16191 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16192 ;;Total ram usage:        6 bytes
 16193 ;; Hardware stack levels used:    1
 16194 ;; Hardware stack levels required when called:    3
 16195 ;; This function calls:
 16196 ;;		Nothing
 16197 ;; This function is called by:
 16198 ;;		_Print_uint16Str
 16199 ;; This function uses a non-reentrant model
 16200 ;;
 16201                           
 16202                           
 16203                           ;psect for function ___lwmod
 16204  1BFA                     ___lwmod:	
 16205                           
 16206                           ;incstack = 0
 16207                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 16208  1BFA  0872               	movf	___lwmod@divisor,w
 16209  1BFB  0473               	iorwf	___lwmod@divisor+1,w
 16210  1BFC  1903               	btfsc	3,2
 16211  1BFD  2C21               	goto	l4488
 16212  1BFE  01F7               	clrf	___lwmod@counter
 16213  1BFF  0AF7               	incf	___lwmod@counter,f
 16214  1C00                     l4478:	
 16215  1C00  1BF3               	btfsc	___lwmod@divisor+1,7
 16216  1C01  2C0C               	goto	l4480
 16217  1C02  3001               	movlw	1
 16218  1C03                     u4015:	
 16219  1C03  35F2               	lslf	___lwmod@divisor,f
 16220  1C04  0DF3               	rlf	___lwmod@divisor+1,f
 16221  1C05  0B89               	decfsz	9,f
 16222  1C06  2C03               	goto	u4015
 16223  1C07  3001               	movlw	1
 16224  1C08  00F6               	movwf	??___lwmod
 16225  1C09  0876               	movf	??___lwmod,w
 16226  1C0A  07F7               	addwf	___lwmod@counter,f
 16227  1C0B  2C00               	goto	l4478
 16228  1C0C                     l4480:	
 16229  1C0C  0873               	movf	___lwmod@divisor+1,w
 16230  1C0D  0275               	subwf	___lwmod@dividend+1,w
 16231  1C0E  1D03               	skipz
 16232  1C0F  2C12               	goto	u4035
 16233  1C10  0872               	movf	___lwmod@divisor,w
 16234  1C11  0274               	subwf	___lwmod@dividend,w
 16235  1C12                     u4035:	
 16236  1C12  1C03               	skipc
 16237  1C13  2C18               	goto	l4484
 16238  1C14  0872               	movf	___lwmod@divisor,w
 16239  1C15  02F4               	subwf	___lwmod@dividend,f
 16240  1C16  0873               	movf	___lwmod@divisor+1,w
 16241  1C17  3BF5               	subwfb	___lwmod@dividend+1,f
 16242  1C18                     l4484:	
 16243  1C18  3001               	movlw	1
 16244  1C19                     u4045:	
 16245  1C19  36F3               	lsrf	___lwmod@divisor+1,f
 16246  1C1A  0CF2               	rrf	___lwmod@divisor,f
 16247  1C1B  0B89               	decfsz	9,f
 16248  1C1C  2C19               	goto	u4045
 16249  1C1D  3001               	movlw	1
 16250  1C1E  02F7               	subwf	___lwmod@counter,f
 16251  1C1F  1D03               	btfss	3,2
 16252  1C20  2C0C               	goto	l4480
 16253  1C21                     l4488:	
 16254  1C21  0875               	movf	___lwmod@dividend+1,w
 16255  1C22  00F3               	movwf	?___lwmod+1
 16256  1C23  0874               	movf	___lwmod@dividend,w
 16257  1C24  00F2               	movwf	?___lwmod
 16258  1C25  0008               	return
 16259  1C26                     __end_of___lwmod:	
 16260                           
 16261                           	psect	text46
 16262  1CE5                     __ptext46:	
 16263 ;; *************** function ___lwdiv *****************
 16264 ;; Defined at:
 16265 ;;		line 6 in file "/Applications/microchip/xc8/v1.35/sources/common/lwdiv.c"
 16266 ;; Parameters:    Size  Location     Type
 16267 ;;  divisor         2    2[COMMON] unsigned int 
 16268 ;;  dividend        2    4[COMMON] unsigned int 
 16269 ;; Auto vars:     Size  Location     Type
 16270 ;;  quotient        2    7[COMMON] unsigned int 
 16271 ;;  counter         1    9[COMMON] unsigned char 
 16272 ;; Return value:  Size  Location     Type
 16273 ;;                  2    2[COMMON] unsigned int 
 16274 ;; Registers used:
 16275 ;;		wreg, status,2, status,0
 16276 ;; Tracked objects:
 16277 ;;		On entry : 0/0
 16278 ;;		On exit  : 0/0
 16279 ;;		Unchanged: 0/0
 16280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16281 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16282 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16283 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16284 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16285 ;;Total ram usage:        8 bytes
 16286 ;; Hardware stack levels used:    1
 16287 ;; Hardware stack levels required when called:    3
 16288 ;; This function calls:
 16289 ;;		Nothing
 16290 ;; This function is called by:
 16291 ;;		_Print_uint16Str
 16292 ;; This function uses a non-reentrant model
 16293 ;;
 16294                           
 16295                           
 16296                           ;psect for function ___lwdiv
 16297  1CE5                     ___lwdiv:	
 16298                           
 16299                           ;incstack = 0
 16300                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 16301  1CE5  01F7               	clrf	___lwdiv@quotient
 16302  1CE6  01F8               	clrf	___lwdiv@quotient+1
 16303  1CE7  0872               	movf	___lwdiv@divisor,w
 16304  1CE8  0473               	iorwf	___lwdiv@divisor+1,w
 16305  1CE9  1903               	btfsc	3,2
 16306  1CEA  2D14               	goto	l4466
 16307  1CEB  01F9               	clrf	___lwdiv@counter
 16308  1CEC  0AF9               	incf	___lwdiv@counter,f
 16309  1CED                     l4454:	
 16310  1CED  1BF3               	btfsc	___lwdiv@divisor+1,7
 16311  1CEE  2CF9               	goto	l4456
 16312  1CEF  3001               	movlw	1
 16313  1CF0                     u3945:	
 16314  1CF0  35F2               	lslf	___lwdiv@divisor,f
 16315  1CF1  0DF3               	rlf	___lwdiv@divisor+1,f
 16316  1CF2  0B89               	decfsz	9,f
 16317  1CF3  2CF0               	goto	u3945
 16318  1CF4  3001               	movlw	1
 16319  1CF5  00F6               	movwf	??___lwdiv
 16320  1CF6  0876               	movf	??___lwdiv,w
 16321  1CF7  07F9               	addwf	___lwdiv@counter,f
 16322  1CF8  2CED               	goto	l4454
 16323  1CF9                     l4456:	
 16324  1CF9  3001               	movlw	1
 16325  1CFA                     u3965:	
 16326  1CFA  35F7               	lslf	___lwdiv@quotient,f
 16327  1CFB  0DF8               	rlf	___lwdiv@quotient+1,f
 16328  1CFC  0B89               	decfsz	9,f
 16329  1CFD  2CFA               	goto	u3965
 16330  1CFE  0873               	movf	___lwdiv@divisor+1,w
 16331  1CFF  0275               	subwf	___lwdiv@dividend+1,w
 16332  1D00  1D03               	skipz
 16333  1D01  2D04               	goto	u3975
 16334  1D02  0872               	movf	___lwdiv@divisor,w
 16335  1D03  0274               	subwf	___lwdiv@dividend,w
 16336  1D04                     u3975:	
 16337  1D04  1C03               	skipc
 16338  1D05  2D0B               	goto	l4462
 16339  1D06  0872               	movf	___lwdiv@divisor,w
 16340  1D07  02F4               	subwf	___lwdiv@dividend,f
 16341  1D08  0873               	movf	___lwdiv@divisor+1,w
 16342  1D09  3BF5               	subwfb	___lwdiv@dividend+1,f
 16343  1D0A  1477               	bsf	___lwdiv@quotient,0
 16344  1D0B                     l4462:	
 16345  1D0B  3001               	movlw	1
 16346  1D0C                     u3985:	
 16347  1D0C  36F3               	lsrf	___lwdiv@divisor+1,f
 16348  1D0D  0CF2               	rrf	___lwdiv@divisor,f
 16349  1D0E  0B89               	decfsz	9,f
 16350  1D0F  2D0C               	goto	u3985
 16351  1D10  3001               	movlw	1
 16352  1D11  02F9               	subwf	___lwdiv@counter,f
 16353  1D12  1D03               	btfss	3,2
 16354  1D13  2CF9               	goto	l4456
 16355  1D14                     l4466:	
 16356  1D14  0878               	movf	___lwdiv@quotient+1,w
 16357  1D15  00F3               	movwf	?___lwdiv+1
 16358  1D16  0877               	movf	___lwdiv@quotient,w
 16359  1D17  00F2               	movwf	?___lwdiv
 16360  1D18  0008               	return
 16361  1D19                     __end_of___lwdiv:	
 16362                           
 16363                           	psect	text47
 16364  18FA                     __ptext47:	
 16365 ;; *************** function _DAC1_SetOutput *****************
 16366 ;; Defined at:
 16367 ;;		line 65 in file "mcc_generated_files/dac1.c"
 16368 ;; Parameters:    Size  Location     Type
 16369 ;;  inputData       1    wreg     unsigned char 
 16370 ;; Auto vars:     Size  Location     Type
 16371 ;;  inputData       1    2[COMMON] unsigned char 
 16372 ;; Return value:  Size  Location     Type
 16373 ;;		None               void
 16374 ;; Registers used:
 16375 ;;		wreg
 16376 ;; Tracked objects:
 16377 ;;		On entry : 0/0
 16378 ;;		On exit  : 0/0
 16379 ;;		Unchanged: 0/0
 16380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16382 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16384 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16385 ;;Total ram usage:        1 bytes
 16386 ;; Hardware stack levels used:    1
 16387 ;; Hardware stack levels required when called:    3
 16388 ;; This function calls:
 16389 ;;		Nothing
 16390 ;; This function is called by:
 16391 ;;		_main
 16392 ;;		_Decode_RS232_CMD
 16393 ;;		_RUN_MESURE
 16394 ;; This function uses a non-reentrant model
 16395 ;;
 16396                           
 16397                           
 16398                           ;psect for function _DAC1_SetOutput
 16399  18FA                     _DAC1_SetOutput:	
 16400                           
 16401                           ;incstack = 0
 16402                           ; Regs used in _DAC1_SetOutput: [wreg]
 16403                           ;DAC1_SetOutput@inputData stored from wreg
 16404  18FA  00F2               	movwf	DAC1_SetOutput@inputData
 16405                           
 16406                           ;dac1.c: 66: DAC1CON1 = inputData;
 16407  18FB  0872               	movf	DAC1_SetOutput@inputData,w
 16408  18FC  0022               	movlb	2	; select bank2
 16409  18FD  0099               	movwf	25	;volatile
 16410  18FE  0008               	return
 16411  18FF                     __end_of_DAC1_SetOutput:	
 16412                           
 16413                           	psect	text48
 16414  1A07                     __ptext48:	
 16415 ;; *************** function _ADC_GetConversion *****************
 16416 ;; Defined at:
 16417 ;;		line 109 in file "mcc_generated_files/adc.c"
 16418 ;; Parameters:    Size  Location     Type
 16419 ;;  channel         1    wreg     enum E7604
 16420 ;; Auto vars:     Size  Location     Type
 16421 ;;  channel         1    5[COMMON] enum E7604
 16422 ;; Return value:  Size  Location     Type
 16423 ;;                  2    2[COMMON] unsigned int 
 16424 ;; Registers used:
 16425 ;;		wreg, status,2, status,0
 16426 ;; Tracked objects:
 16427 ;;		On entry : 0/0
 16428 ;;		On exit  : 0/0
 16429 ;;		Unchanged: 0/0
 16430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16431 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16434 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16435 ;;Total ram usage:        4 bytes
 16436 ;; Hardware stack levels used:    1
 16437 ;; Hardware stack levels required when called:    3
 16438 ;; This function calls:
 16439 ;;		Nothing
 16440 ;; This function is called by:
 16441 ;;		_main
 16442 ;;		_RUN_MESURE
 16443 ;; This function uses a non-reentrant model
 16444 ;;
 16445                           
 16446                           
 16447                           ;psect for function _ADC_GetConversion
 16448  1A07                     _ADC_GetConversion:	
 16449                           
 16450                           ;incstack = 0
 16451                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 16452                           ;ADC_GetConversion@channel stored from wreg
 16453  1A07  00F5               	movwf	ADC_GetConversion@channel
 16454                           
 16455                           ;adc.c: 111: ADCON0bits.CHS = channel;
 16456  1A08  0875               	movf	ADC_GetConversion@channel,w
 16457  1A09  00F4               	movwf	??_ADC_GetConversion
 16458  1A0A  0DF4               	rlf	??_ADC_GetConversion,f
 16459  1A0B  0DF4               	rlf	??_ADC_GetConversion,f
 16460  1A0C  0021               	movlb	1	; select bank1
 16461  1A0D  081D               	movf	29,w	;volatile
 16462  1A0E  0674               	xorwf	??_ADC_GetConversion,w
 16463  1A0F  3983               	andlw	-125
 16464  1A10  0674               	xorwf	??_ADC_GetConversion,w
 16465  1A11  009D               	movwf	29	;volatile
 16466                           
 16467                           ;adc.c: 114: ADCON0bits.ADON = 1;
 16468  1A12  141D               	bsf	29,0	;volatile
 16469                           
 16470                           ;adc.c: 117: _delay((unsigned long)((5)*(16000000/4000000.0)));
 16471  1A13  3006               	movlw	6
 16472  1A14  00F4               	movwf	??_ADC_GetConversion
 16473  1A15                     u9527:	
 16474  1A15  0BF4               	decfsz	??_ADC_GetConversion,f
 16475  1A16  2A15               	goto	u9527
 16476  1A17  0000               	nop
 16477                           
 16478                           ;adc.c: 120: ADCON0bits.GO_nDONE = 1;
 16479  1A18  0021               	movlb	1	; select bank1
 16480  1A19  149D               	bsf	29,1	;volatile
 16481  1A1A                     l112:	
 16482                           ;adc.c: 123: while (ADCON0bits.GO_nDONE) {
 16483                           
 16484  1A1A  189D               	btfsc	29,1	;volatile
 16485  1A1B  2A1A               	goto	l112
 16486                           
 16487                           ;adc.c: 124: }
 16488                           ;adc.c: 127: return ((ADRESH << 8) + ADRESL);
 16489  1A1C  081C               	movf	28,w	;volatile
 16490  1A1D  00F3               	movwf	?_ADC_GetConversion+1
 16491  1A1E  081B               	movf	27,w	;volatile
 16492  1A1F  00F2               	movwf	?_ADC_GetConversion
 16493  1A20  0008               	return
 16494  1A21                     __end_of_ADC_GetConversion:	
 16495                           
 16496                           	psect	text49
 16497  07A9                     __ptext49:	
 16498 ;; *************** function _I2C_TEST_10 *****************
 16499 ;; Defined at:
 16500 ;;		line 2796 in file "main.c"
 16501 ;; Parameters:    Size  Location     Type
 16502 ;;		None
 16503 ;; Auto vars:     Size  Location     Type
 16504 ;;		None
 16505 ;; Return value:  Size  Location     Type
 16506 ;;		None               void
 16507 ;; Registers used:
 16508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16509 ;; Tracked objects:
 16510 ;;		On entry : 0/0
 16511 ;;		On exit  : 0/0
 16512 ;;		Unchanged: 0/0
 16513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16516 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16518 ;;Total ram usage:        2 bytes
 16519 ;; Hardware stack levels used:    1
 16520 ;; Hardware stack levels required when called:    7
 16521 ;; This function calls:
 16522 ;;		_I2C_mREAD
 16523 ;;		_I2C_mWrite
 16524 ;;		_Print_HEX2Str
 16525 ;;		_Print_String
 16526 ;; This function is called by:
 16527 ;;		_Decode_RS232_CMD
 16528 ;; This function uses a non-reentrant model
 16529 ;;
 16530                           
 16531                           
 16532                           ;psect for function _I2C_TEST_10
 16533  07A9                     _I2C_TEST_10:	
 16534                           
 16535                           ;main.c: 2802: *(BufferRec+0) = 0x00;
 16536                           
 16537                           ;incstack = 0
 16538                           ; Regs used in _I2C_TEST_10: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16539  07A9  0023               	movlb	3	; select bank3
 16540  07AA  01A8               	clrf	_BufferRec^(0+384)
 16541                           
 16542                           ;main.c: 2803: *(BufferRec+1) = 0xC0;
 16543  07AB  30C0               	movlw	192
 16544  07AC  0020               	movlb	0	; select bank0
 16545  07AD  00A8               	movwf	??_I2C_TEST_10
 16546  07AE  0828               	movf	??_I2C_TEST_10,w
 16547  07AF  0023               	movlb	3	; select bank3
 16548  07B0  00A9               	movwf	(_BufferRec^(0+384)+1)
 16549                           
 16550                           ;main.c: 2804: *(BufferRec+2) = 0x02;
 16551  07B1  3002               	movlw	2
 16552  07B2  0020               	movlb	0	; select bank0
 16553  07B3  00A8               	movwf	??_I2C_TEST_10
 16554  07B4  0828               	movf	??_I2C_TEST_10,w
 16555  07B5  0023               	movlb	3	; select bank3
 16556  07B6  00AA               	movwf	(_BufferRec^(0+384)+2)
 16557                           
 16558                           ;main.c: 2806: I2C_mWrite(BufferRec, 3+1, 0x10);
 16559  07B7  30A8               	movlw	low _BufferRec
 16560  07B8  00F6               	movwf	I2C_mWrite@value
 16561  07B9  3001               	movlw	high _BufferRec
 16562  07BA  00F7               	movwf	I2C_mWrite@value+1
 16563  07BB  3004               	movlw	4
 16564  07BC  0020               	movlb	0	; select bank0
 16565  07BD  00A8               	movwf	??_I2C_TEST_10
 16566  07BE  0828               	movf	??_I2C_TEST_10,w
 16567  07BF  00F8               	movwf	I2C_mWrite@Size
 16568  07C0  3010               	movlw	16
 16569  07C1  00A9               	movwf	??_I2C_TEST_10+1
 16570  07C2  0829               	movf	??_I2C_TEST_10+1,w
 16571  07C3  00F9               	movwf	I2C_mWrite@slave_addr
 16572  07C4  319E  2683  3187   	fcall	_I2C_mWrite
 16573                           
 16574                           ;main.c: 2808: I2C_mREAD(BufferRec, 2, 0x10);
 16575  07C7  3002               	movlw	2
 16576  07C8  0020               	movlb	0	; select bank0
 16577  07C9  00A8               	movwf	??_I2C_TEST_10
 16578  07CA  0828               	movf	??_I2C_TEST_10,w
 16579  07CB  00F7               	movwf	I2C_mREAD@Size
 16580  07CC  3010               	movlw	16
 16581  07CD  00A9               	movwf	??_I2C_TEST_10+1
 16582  07CE  0829               	movf	??_I2C_TEST_10+1,w
 16583  07CF  00F8               	movwf	I2C_mREAD@slave_addr
 16584  07D0  30A8               	movlw	(low (_BufferRec| (0+256)))& (0+255)
 16585  07D1  319E  263E  3187   	fcall	_I2C_mREAD
 16586                           
 16587                           ;main.c: 2810: SR_0xA0_ADO_Error = *BufferRec;
 16588  07D4  0023               	movlb	3	; select bank3
 16589  07D5  0828               	movf	_BufferRec^(0+384),w
 16590  07D6  0020               	movlb	0	; select bank0
 16591  07D7  00A8               	movwf	??_I2C_TEST_10
 16592  07D8  0828               	movf	??_I2C_TEST_10,w
 16593  07D9  0021               	movlb	1	; select bank1
 16594  07DA  00E7               	movwf	_SR_0xA0_ADO_Error^(0+128)
 16595                           
 16596                           ;main.c: 2811: SR_0xA1_ADO_Request = *(BufferRec+1);
 16597  07DB  0023               	movlb	3	; select bank3
 16598  07DC  0829               	movf	(_BufferRec^(0+384)+1),w
 16599  07DD  0020               	movlb	0	; select bank0
 16600  07DE  00A8               	movwf	??_I2C_TEST_10
 16601  07DF  0828               	movf	??_I2C_TEST_10,w
 16602  07E0  0021               	movlb	1	; select bank1
 16603  07E1  00E8               	movwf	_SR_0xA1_ADO_Request^(0+128)
 16604                           
 16605                           ;main.c: 2814: Print_String("Check 0xC0 =0x$", 0);
 16606  07E2  303C               	movlw	low (STR_48| (0+32768))
 16607  07E3  00F4               	movwf	Print_String@BStr
 16608  07E4  3092               	movlw	high (STR_48| (0+32768))
 16609  07E5  00F5               	movwf	Print_String@BStr+1
 16610  07E6  01F6               	clrf	Print_String@chln
 16611  07E7  319B  238A  3187   	fcall	_Print_String
 16612                           
 16613                           ;main.c: 2815: Print_HEX2Str(SR_0xA0_ADO_Error, 1);
 16614  07EA  01F7               	clrf	Print_HEX2Str@Chgln
 16615  07EB  0AF7               	incf	Print_HEX2Str@Chgln,f
 16616  07EC  0021               	movlb	1	; select bank1
 16617  07ED  0867               	movf	_SR_0xA0_ADO_Error^(0+128),w
 16618  07EE  319F  270D  3187   	fcall	_Print_HEX2Str
 16619                           
 16620                           ;main.c: 2816: Print_String("Check 0xC1 =0x$", 0);
 16621  07F1  304C               	movlw	low (STR_49| (0+32768))
 16622  07F2  00F4               	movwf	Print_String@BStr
 16623  07F3  3092               	movlw	high (STR_49| (0+32768))
 16624  07F4  00F5               	movwf	Print_String@BStr+1
 16625  07F5  01F6               	clrf	Print_String@chln
 16626  07F6  319B  238A  3187   	fcall	_Print_String
 16627                           
 16628                           ;main.c: 2817: Print_HEX2Str(SR_0xA1_ADO_Request, 1);
 16629  07F9  01F7               	clrf	Print_HEX2Str@Chgln
 16630  07FA  0AF7               	incf	Print_HEX2Str@Chgln,f
 16631  07FB  0021               	movlb	1	; select bank1
 16632  07FC  0868               	movf	_SR_0xA1_ADO_Request^(0+128),w
 16633  07FD  319F  270D         	fcall	_Print_HEX2Str
 16634  07FF  0008               	return
 16635  0800                     __end_of_I2C_TEST_10:	
 16636                           
 16637                           	psect	text50
 16638  1E83                     __ptext50:	
 16639 ;; *************** function _I2C_mWrite *****************
 16640 ;; Defined at:
 16641 ;;		line 2594 in file "main.c"
 16642 ;; Parameters:    Size  Location     Type
 16643 ;;  value           2    6[COMMON] PTR unsigned char 
 16644 ;;		 -> UPLOAD_MESURE_REC@BufferString(26), BufferRec(32), BufferStr(32), 
 16645 ;;  Size            1    8[COMMON] unsigned char 
 16646 ;;  slave_addr      1    9[COMMON] unsigned char 
 16647 ;; Auto vars:     Size  Location     Type
 16648 ;;  Check_Error     1    5[BANK0 ] unsigned char 
 16649 ;;  j               1    4[BANK0 ] unsigned char 
 16650 ;;  i               1    3[BANK0 ] unsigned char 
 16651 ;; Return value:  Size  Location     Type
 16652 ;;                  1    wreg      unsigned char 
 16653 ;; Registers used:
 16654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16655 ;; Tracked objects:
 16656 ;;		On entry : 0/0
 16657 ;;		On exit  : 0/0
 16658 ;;		Unchanged: 0/0
 16659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16660 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16661 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16662 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16663 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16664 ;;Total ram usage:       10 bytes
 16665 ;; Hardware stack levels used:    1
 16666 ;; Hardware stack levels required when called:    6
 16667 ;; This function calls:
 16668 ;;		_I2C_START_BIT
 16669 ;;		_I2C_STOP_BIT
 16670 ;;		_I2C_WRITE_8BIT
 16671 ;; This function is called by:
 16672 ;;		_main
 16673 ;;		_Decode_RS232_CMD
 16674 ;;		_UPLOAD_MESURE_REC
 16675 ;;		_PIC_SYNC_ADO_RTC
 16676 ;;		_PIC_SYNC_ADO_ULSR
 16677 ;;		_I2C_TEST_10
 16678 ;;		_check_ADO_I2C
 16679 ;; This function uses a non-reentrant model
 16680 ;;
 16681                           
 16682                           
 16683                           ;psect for function _I2C_mWrite
 16684  1E83                     _I2C_mWrite:	
 16685                           
 16686                           ;main.c: 2598: uint8_t i=10;
 16687                           
 16688                           ;incstack = 0
 16689                           ; Regs used in _I2C_mWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16690  1E83  300A               	movlw	10
 16691  1E84  0020               	movlb	0	; select bank0
 16692  1E85  00A0               	movwf	??_I2C_mWrite
 16693  1E86  0820               	movf	??_I2C_mWrite,w
 16694  1E87  00A3               	movwf	I2C_mWrite@i
 16695                           
 16696                           ;main.c: 2599: uint8_t Check_Error = 0;
 16697  1E88  01A5               	clrf	I2C_mWrite@Check_Error
 16698                           
 16699                           ;main.c: 2600: uint8_t j=0;
 16700  1E89  01A4               	clrf	I2C_mWrite@j
 16701  1E8A                     l6682:	
 16702                           ;main.c: 2604: do
 16703                           
 16704                           
 16705                           ;main.c: 2605: {
 16706                           ;main.c: 2606: I2C_START_BIT();
 16707  1E8A  3199  216C  319E   	fcall	_I2C_START_BIT
 16708                           
 16709                           ;main.c: 2608: if(Check_Error = I2C_WRITE_8BIT(slave_addr&0xfe) == 0)
 16710  1E8D  0879               	movf	I2C_mWrite@slave_addr,w
 16711  1E8E  39FE               	andlw	254
 16712  1E8F  319D  25BD  319E   	fcall	_I2C_WRITE_8BIT
 16713  1E92  3A00               	xorlw	0
 16714  1E93  1D03               	btfss	3,2
 16715  1E94  2E97               	goto	u7230
 16716  1E95  3001               	movlw	1
 16717  1E96  2E98               	goto	u7240
 16718  1E97                     u7230:	
 16719  1E97  3000               	movlw	0
 16720  1E98                     u7240:	
 16721  1E98  0020               	movlb	0	; select bank0
 16722  1E99  00A0               	movwf	??_I2C_mWrite
 16723  1E9A  0820               	movf	??_I2C_mWrite,w
 16724  1E9B  00A5               	movwf	I2C_mWrite@Check_Error
 16725  1E9C  0825               	movf	I2C_mWrite@Check_Error,w
 16726  1E9D  1903               	btfsc	3,2
 16727  1E9E  2EBB               	goto	l6692
 16728  1E9F                     l6684:	
 16729                           ;main.c: 2609: do
 16730                           
 16731                           
 16732                           ;main.c: 2610: {
 16733                           ;main.c: 2611: Check_Error = I2C_WRITE_8BIT(*(value+j));
 16734  1E9F  0824               	movf	I2C_mWrite@j,w
 16735  1EA0  00A0               	movwf	??_I2C_mWrite
 16736  1EA1  01A1               	clrf	??_I2C_mWrite+1
 16737  1EA2  0820               	movf	??_I2C_mWrite,w
 16738  1EA3  0776               	addwf	I2C_mWrite@value,w
 16739  1EA4  0086               	movwf	6
 16740  1EA5  0821               	movf	??_I2C_mWrite+1,w
 16741  1EA6  3D77               	addwfc	I2C_mWrite@value+1,w
 16742  1EA7  0087               	movwf	7
 16743  1EA8  0801               	movf	1,w
 16744  1EA9  319D  25BD  319E   	fcall	_I2C_WRITE_8BIT
 16745  1EAC  0020               	movlb	0	; select bank0
 16746  1EAD  00A2               	movwf	??_I2C_mWrite+2
 16747  1EAE  0822               	movf	??_I2C_mWrite+2,w
 16748  1EAF  00A5               	movwf	I2C_mWrite@Check_Error
 16749                           
 16750                           ;main.c: 2612: j++;
 16751  1EB0  3001               	movlw	1
 16752  1EB1  00A0               	movwf	??_I2C_mWrite
 16753  1EB2  0820               	movf	??_I2C_mWrite,w
 16754  1EB3  07A4               	addwf	I2C_mWrite@j,f
 16755                           
 16756                           ;main.c: 2613: }while((Check_Error == 0)&&(j<Size));
 16757  1EB4  0825               	movf	I2C_mWrite@Check_Error,w
 16758  1EB5  1D03               	btfss	3,2
 16759  1EB6  2EBB               	goto	l6692
 16760  1EB7  0878               	movf	I2C_mWrite@Size,w
 16761  1EB8  0224               	subwf	I2C_mWrite@j,w
 16762  1EB9  1C03               	skipc
 16763  1EBA  2E9F               	goto	l6684
 16764  1EBB                     l6692:	
 16765                           
 16766                           ;main.c: 2615: I2C_STOP_BIT();
 16767  1EBB  3199  2179  319E   	fcall	_I2C_STOP_BIT
 16768                           
 16769                           ;main.c: 2616: i--;
 16770  1EBE  3001               	movlw	1
 16771  1EBF  0020               	movlb	0	; select bank0
 16772  1EC0  02A3               	subwf	I2C_mWrite@i,f
 16773                           
 16774                           ;main.c: 2617: }while((i!=0)&&(Check_Error == 1) );
 16775  1EC1  0823               	movf	I2C_mWrite@i,w
 16776  1EC2  1903               	btfsc	3,2
 16777  1EC3  0008               	return
 16778  1EC4  0325               	decf	I2C_mWrite@Check_Error,w
 16779  1EC5  1D03               	btfss	3,2
 16780  1EC6  0008               	return
 16781  1EC7  2E8A               	goto	l6682
 16782  1EC8                     __end_of_I2C_mWrite:	
 16783                           ;main.c: 2631: return 0;
 16784                           ;	Return value of _I2C_mWrite is never used
 16785                           
 16786                           
 16787                           	psect	text51
 16788  1E3E                     __ptext51:	
 16789 ;; *************** function _I2C_mREAD *****************
 16790 ;; Defined at:
 16791 ;;		line 2640 in file "main.c"
 16792 ;; Parameters:    Size  Location     Type
 16793 ;;  value           1    wreg     PTR unsigned char 
 16794 ;;		 -> BufferRec(32), 
 16795 ;;  Size            1    7[COMMON] unsigned char 
 16796 ;;  slave_addr      1    8[COMMON] unsigned char 
 16797 ;; Auto vars:     Size  Location     Type
 16798 ;;  value           1    5[BANK0 ] PTR unsigned char 
 16799 ;;		 -> BufferRec(32), 
 16800 ;;  j               1    6[BANK0 ] unsigned char 
 16801 ;;  ack             1    4[BANK0 ] unsigned char 
 16802 ;;  i               1    3[BANK0 ] unsigned char 
 16803 ;;  rSCL            1    2[BANK0 ] unsigned char 
 16804 ;; Return value:  Size  Location     Type
 16805 ;;		None               void
 16806 ;; Registers used:
 16807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16808 ;; Tracked objects:
 16809 ;;		On entry : 0/0
 16810 ;;		On exit  : 0/0
 16811 ;;		Unchanged: 0/0
 16812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16814 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16815 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16816 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16817 ;;Total ram usage:        9 bytes
 16818 ;; Hardware stack levels used:    1
 16819 ;; Hardware stack levels required when called:    6
 16820 ;; This function calls:
 16821 ;;		_I2C_READ_8BIT
 16822 ;;		_I2C_START_BIT
 16823 ;;		_I2C_STOP_BIT
 16824 ;;		_I2C_WRITE_8BIT
 16825 ;; This function is called by:
 16826 ;;		_main
 16827 ;;		_Decode_RS232_CMD
 16828 ;;		_PIC_SYNC_ADO_RTC
 16829 ;;		_PIC_SYNC_ADO_ULSR
 16830 ;;		_I2C_TEST_10
 16831 ;;		_check_ADO_I2C
 16832 ;; This function uses a non-reentrant model
 16833 ;;
 16834                           
 16835                           
 16836                           ;psect for function _I2C_mREAD
 16837  1E3E                     _I2C_mREAD:	
 16838                           
 16839                           ;incstack = 0
 16840                           ; Regs used in _I2C_mREAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16841                           ;I2C_mREAD@value stored from wreg
 16842  1E3E  0020               	movlb	0	; select bank0
 16843  1E3F  00A5               	movwf	I2C_mREAD@value
 16844                           
 16845                           ;main.c: 2642: uint8_t i=10;
 16846  1E40  300A               	movlw	10
 16847  1E41  00A0               	movwf	??_I2C_mREAD
 16848  1E42  0820               	movf	??_I2C_mREAD,w
 16849  1E43  00A3               	movwf	I2C_mREAD@i
 16850                           
 16851                           ;main.c: 2643: uint8_t j=0;
 16852  1E44  01A6               	clrf	I2C_mREAD@j
 16853                           
 16854                           ;main.c: 2644: uint8_t ack=1;
 16855  1E45  01A4               	clrf	I2C_mREAD@ack
 16856  1E46  0AA4               	incf	I2C_mREAD@ack,f
 16857                           
 16858                           ;main.c: 2645: uint8_t rSCL=0;
 16859  1E47  01A2               	clrf	I2C_mREAD@rSCL
 16860  1E48                     l6728:	
 16861                           ;main.c: 2650: while (--i)
 16862                           
 16863  1E48  3001               	movlw	1
 16864  1E49  0020               	movlb	0	; select bank0
 16865  1E4A  02A3               	subwf	I2C_mREAD@i,f
 16866  1E4B  1903               	btfsc	3,2
 16867  1E4C  0008               	return
 16868                           
 16869                           ;main.c: 2651: {
 16870                           ;main.c: 2657: I2C_START_BIT();
 16871  1E4D  3199  216C  319E   	fcall	_I2C_START_BIT
 16872                           
 16873                           ;main.c: 2658: if(I2C_WRITE_8BIT(slave_addr | 1)) continue;
 16874  1E50  0878               	movf	I2C_mREAD@slave_addr,w
 16875  1E51  3801               	iorlw	1
 16876  1E52  319D  25BD  319E   	fcall	_I2C_WRITE_8BIT
 16877  1E55  3A00               	xorlw	0
 16878  1E56  1D03               	btfss	3,2
 16879  1E57  2E48               	goto	l6728
 16880  1E58                     l6714:	
 16881                           ;main.c: 2669: do
 16882                           
 16883                           
 16884                           ;main.c: 2670: {
 16885                           ;main.c: 2671: if(j+1 == Size)
 16886  1E58  0020               	movlb	0	; select bank0
 16887  1E59  0826               	movf	I2C_mREAD@j,w
 16888  1E5A  3E01               	addlw	1
 16889  1E5B  00A0               	movwf	??_I2C_mREAD
 16890  1E5C  3000               	movlw	0
 16891  1E5D  1803               	skipnc
 16892  1E5E  3001               	movlw	1
 16893  1E5F  00A1               	movwf	??_I2C_mREAD+1
 16894  1E60  0877               	movf	I2C_mREAD@Size,w
 16895  1E61  0620               	xorwf	??_I2C_mREAD,w
 16896  1E62  0421               	iorwf	??_I2C_mREAD+1,w
 16897  1E63  1D03               	skipz
 16898  1E64  2E68               	goto	l6718
 16899                           
 16900                           ;main.c: 2672: ack = 1;
 16901  1E65  01A4               	clrf	I2C_mREAD@ack
 16902  1E66  0AA4               	incf	I2C_mREAD@ack,f
 16903  1E67  2E69               	goto	l6720
 16904  1E68                     l6718:	
 16905                           
 16906                           ;main.c: 2673: else
 16907                           ;main.c: 2674: ack = 0;
 16908  1E68  01A4               	clrf	I2C_mREAD@ack
 16909  1E69                     l6720:	
 16910                           
 16911                           ;main.c: 2676: *(value+j) = I2C_READ_8BIT(ack);
 16912  1E69  0824               	movf	I2C_mREAD@ack,w
 16913  1E6A  3193  2339  319E   	fcall	_I2C_READ_8BIT
 16914  1E6D  0020               	movlb	0	; select bank0
 16915  1E6E  00A0               	movwf	??_I2C_mREAD
 16916  1E6F  0826               	movf	I2C_mREAD@j,w
 16917  1E70  0725               	addwf	I2C_mREAD@value,w
 16918  1E71  00A1               	movwf	??_I2C_mREAD+1
 16919  1E72  0821               	movf	??_I2C_mREAD+1,w
 16920  1E73  0086               	movwf	6
 16921  1E74  3001               	movlw	1	; select bank2/3
 16922  1E75  0087               	movwf	7
 16923  1E76  0820               	movf	??_I2C_mREAD,w
 16924  1E77  0081               	movwf	1
 16925                           
 16926                           ;main.c: 2677: j++;
 16927  1E78  3001               	movlw	1
 16928  1E79  00A0               	movwf	??_I2C_mREAD
 16929  1E7A  0820               	movf	??_I2C_mREAD,w
 16930  1E7B  07A6               	addwf	I2C_mREAD@j,f
 16931                           
 16932                           ;main.c: 2679: }while(j < Size);
 16933  1E7C  0877               	movf	I2C_mREAD@Size,w
 16934  1E7D  0226               	subwf	I2C_mREAD@j,w
 16935  1E7E  1C03               	skipc
 16936  1E7F  2E58               	goto	l6714
 16937                           
 16938                           ;main.c: 2681: I2C_STOP_BIT();
 16939  1E80  3199  2179         	fcall	_I2C_STOP_BIT
 16940                           
 16941                           ;main.c: 2682: break;
 16942  1E82  0008               	return
 16943  1E83                     __end_of_I2C_mREAD:	
 16944                           
 16945                           	psect	text52
 16946  0802                     __ptext52:	
 16947 ;; *************** function _I2C_TEST_02 *****************
 16948 ;; Defined at:
 16949 ;;		line 2745 in file "main.c"
 16950 ;; Parameters:    Size  Location     Type
 16951 ;;		None
 16952 ;; Auto vars:     Size  Location     Type
 16953 ;;  i2cReadBuffe   16   39[BANK0 ] unsigned char [16]
 16954 ;;  i2cData        16   23[BANK0 ] unsigned char [16]
 16955 ;;  i2cAddr_h       1   59[BANK0 ] unsigned char 
 16956 ;;  i               1   58[BANK0 ] unsigned char 
 16957 ;;  i2cAddr_l       1   57[BANK0 ] unsigned char 
 16958 ;;  Check_Error     1   56[BANK0 ] unsigned char 
 16959 ;;  SID             1   55[BANK0 ] unsigned char 
 16960 ;;  i2cDataOne      1    0        unsigned char 
 16961 ;; Return value:  Size  Location     Type
 16962 ;;		None               void
 16963 ;; Registers used:
 16964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16965 ;; Tracked objects:
 16966 ;;		On entry : 0/0
 16967 ;;		On exit  : 0/0
 16968 ;;		Unchanged: 0/0
 16969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16971 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16972 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16973 ;;      Totals:         0      42       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16974 ;;Total ram usage:       42 bytes
 16975 ;; Hardware stack levels used:    1
 16976 ;; Hardware stack levels required when called:    7
 16977 ;; This function calls:
 16978 ;;		_I2C_PAGE_WRITE
 16979 ;;		_I2C_Sequential_READ
 16980 ;;		_Print_HEX2Str
 16981 ;;		_Print_String
 16982 ;; This function is called by:
 16983 ;;		_Decode_RS232_CMD
 16984 ;; This function uses a non-reentrant model
 16985 ;;
 16986                           
 16987                           
 16988                           ;psect for function _I2C_TEST_02
 16989  0802                     _I2C_TEST_02:	
 16990                           
 16991                           ;main.c: 2747: uint8_t i = 0;
 16992                           
 16993                           ;incstack = 0
 16994                           ; Regs used in _I2C_TEST_02: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16995  0802  0020               	movlb	0	; select bank0
 16996  0803  01DA               	clrf	I2C_TEST_02@i
 16997                           
 16998                           ;main.c: 2748: uint8_t SID = 0xA0;
 16999  0804  30A0               	movlw	160
 17000  0805  00B2               	movwf	??_I2C_TEST_02
 17001  0806  0832               	movf	??_I2C_TEST_02,w
 17002  0807  00D7               	movwf	I2C_TEST_02@SID
 17003                           
 17004                           ;main.c: 2750: uint8_t i2cAddr_h = 0x01;
 17005  0808  01DB               	clrf	I2C_TEST_02@i2cAddr_h
 17006  0809  0ADB               	incf	I2C_TEST_02@i2cAddr_h,f
 17007                           
 17008                           ;main.c: 2751: uint8_t i2cAddr_l = 0;
 17009  080A  01D9               	clrf	I2C_TEST_02@i2cAddr_l
 17010                           
 17011                           ;main.c: 2752: uint8_t Check_Error = 0;
 17012  080B  01D8               	clrf	I2C_TEST_02@Check_Error
 17013                           
 17014                           ;main.c: 2753: uint8_t i2cData[16] = {
 17015                           ;main.c: 2754: 0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
 17016                           ;main.c: 2755: 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07};
 17017  080C  30C8               	movlw	low I2C_TEST_02@F8059
 17018  080D  0086               	movwf	6
 17019  080E  3001               	movlw	high I2C_TEST_02@F8059
 17020  080F  0087               	movwf	7
 17021  0810  3037               	movlw	low I2C_TEST_02@i2cData
 17022  0811  0084               	movwf	4
 17023  0812  3000               	movlw	high I2C_TEST_02@i2cData
 17024  0813  0085               	movwf	5
 17025  0814  3010               	movlw	16
 17026  0815  00B2               	movwf	??_I2C_TEST_02
 17027  0816                     u7970:	
 17028  0816  0016               	moviw fsr1++
 17029  0817  001A               	movwi fsr0++
 17030  0818  0BB2               	decfsz	??_I2C_TEST_02,f
 17031  0819  2816               	goto	u7970
 17032                           
 17033                           ;main.c: 2756: uint8_t i2cDataOne;
 17034                           ;main.c: 2758: uint8_t i2cReadBuffer[16] ;
 17035                           ;main.c: 2761: Check_Error = I2C_PAGE_WRITE(SID, i2cAddr_h, i2cAddr_l, 16, i2cData);
 17036  081A  085B               	movf	I2C_TEST_02@i2cAddr_h,w
 17037  081B  00B2               	movwf	??_I2C_TEST_02
 17038  081C  0832               	movf	??_I2C_TEST_02,w
 17039  081D  00A8               	movwf	I2C_PAGE_WRITE@reg_addr_h
 17040  081E  0859               	movf	I2C_TEST_02@i2cAddr_l,w
 17041  081F  00B3               	movwf	??_I2C_TEST_02+1
 17042  0820  0833               	movf	??_I2C_TEST_02+1,w
 17043  0821  00A9               	movwf	I2C_PAGE_WRITE@reg_addr_l
 17044  0822  3010               	movlw	16
 17045  0823  00B4               	movwf	??_I2C_TEST_02+2
 17046  0824  0834               	movf	??_I2C_TEST_02+2,w
 17047  0825  00AA               	movwf	I2C_PAGE_WRITE@Size
 17048  0826  3037               	movlw	(low (I2C_TEST_02@i2cData| 0))& (0+255)
 17049  0827  00B5               	movwf	??_I2C_TEST_02+3
 17050  0828  0835               	movf	??_I2C_TEST_02+3,w
 17051  0829  00AB               	movwf	I2C_PAGE_WRITE@value
 17052  082A  0857               	movf	I2C_TEST_02@SID,w
 17053  082B  3195  2576  3188   	fcall	_I2C_PAGE_WRITE
 17054  082E  0020               	movlb	0	; select bank0
 17055  082F  00B6               	movwf	??_I2C_TEST_02+4
 17056  0830  0836               	movf	??_I2C_TEST_02+4,w
 17057  0831  00D8               	movwf	I2C_TEST_02@Check_Error
 17058                           
 17059                           ;main.c: 2764: if(Check_Error != 0)
 17060  0832  0858               	movf	I2C_TEST_02@Check_Error,w
 17061  0833  1903               	btfsc	3,2
 17062  0834  2851               	goto	l7244
 17063                           
 17064                           ;main.c: 2765: {
 17065                           ;main.c: 2766: Print_String("Error Address =0x$", 0);
 17066  0835  30F4               	movlw	low (STR_44| (0+32768))
 17067  0836  00F4               	movwf	Print_String@BStr
 17068  0837  3091               	movlw	high (STR_44| (0+32768))
 17069  0838  00F5               	movwf	Print_String@BStr+1
 17070  0839  01F6               	clrf	Print_String@chln
 17071  083A  319B  238A  3188   	fcall	_Print_String
 17072                           
 17073                           ;main.c: 2767: Print_HEX2Str(Check_Error, 1);
 17074  083D  01F7               	clrf	Print_HEX2Str@Chgln
 17075  083E  0AF7               	incf	Print_HEX2Str@Chgln,f
 17076  083F  0020               	movlb	0	; select bank0
 17077  0840  0858               	movf	I2C_TEST_02@Check_Error,w
 17078  0841  319F  270D  3188   	fcall	_Print_HEX2Str
 17079                           
 17080                           ;main.c: 2768: Print_HEX2Str(i2cAddr_h, 0);
 17081  0844  01F7               	clrf	Print_HEX2Str@Chgln
 17082  0845  0020               	movlb	0	; select bank0
 17083  0846  085B               	movf	I2C_TEST_02@i2cAddr_h,w
 17084  0847  319F  270D  3188   	fcall	_Print_HEX2Str
 17085                           
 17086                           ;main.c: 2769: Print_HEX2Str(i2cAddr_l, 1);
 17087  084A  01F7               	clrf	Print_HEX2Str@Chgln
 17088  084B  0AF7               	incf	Print_HEX2Str@Chgln,f
 17089  084C  0020               	movlb	0	; select bank0
 17090  084D  0859               	movf	I2C_TEST_02@i2cAddr_l,w
 17091  084E  319F  270D  3188   	fcall	_Print_HEX2Str
 17092  0851                     l7244:	
 17093                           
 17094                           ;main.c: 2770: }
 17095                           ;main.c: 2773: Print_String("Read Address =0x$", 0);
 17096  0851  3019               	movlw	low (STR_45| (0+32768))
 17097  0852  00F4               	movwf	Print_String@BStr
 17098  0853  3092               	movlw	high (STR_45| (0+32768))
 17099  0854  00F5               	movwf	Print_String@BStr+1
 17100  0855  01F6               	clrf	Print_String@chln
 17101  0856  319B  238A  3188   	fcall	_Print_String
 17102                           
 17103                           ;main.c: 2774: Print_HEX2Str(i2cAddr_h, 0);
 17104  0859  01F7               	clrf	Print_HEX2Str@Chgln
 17105  085A  0020               	movlb	0	; select bank0
 17106  085B  085B               	movf	I2C_TEST_02@i2cAddr_h,w
 17107  085C  319F  270D  3188   	fcall	_Print_HEX2Str
 17108                           
 17109                           ;main.c: 2775: Print_HEX2Str(0, 1);
 17110  085F  01F7               	clrf	Print_HEX2Str@Chgln
 17111  0860  0AF7               	incf	Print_HEX2Str@Chgln,f
 17112  0861  3000               	movlw	0
 17113  0862  319F  270D  3188   	fcall	_Print_HEX2Str
 17114                           
 17115                           ;main.c: 2778: I2C_Sequential_READ(SID, i2cAddr_h, i2cAddr_l, 0x10, i2cReadBuffer);
 17116  0865  0020               	movlb	0	; select bank0
 17117  0866  085B               	movf	I2C_TEST_02@i2cAddr_h,w
 17118  0867  00B2               	movwf	??_I2C_TEST_02
 17119  0868  0832               	movf	??_I2C_TEST_02,w
 17120  0869  00A8               	movwf	I2C_Sequential_READ@reg_addr_h
 17121  086A  0859               	movf	I2C_TEST_02@i2cAddr_l,w
 17122  086B  00B3               	movwf	??_I2C_TEST_02+1
 17123  086C  0833               	movf	??_I2C_TEST_02+1,w
 17124  086D  00A9               	movwf	I2C_Sequential_READ@reg_addr_l
 17125  086E  3010               	movlw	16
 17126  086F  00B4               	movwf	??_I2C_TEST_02+2
 17127  0870  0834               	movf	??_I2C_TEST_02+2,w
 17128  0871  00AA               	movwf	I2C_Sequential_READ@Size
 17129  0872  3047               	movlw	(low (I2C_TEST_02@i2cReadBuffer| 0))& (0+255)
 17130  0873  00B5               	movwf	??_I2C_TEST_02+3
 17131  0874  0835               	movf	??_I2C_TEST_02+3,w
 17132  0875  00AB               	movwf	I2C_Sequential_READ@value
 17133  0876  0857               	movf	I2C_TEST_02@SID,w
 17134  0877  3195  250F  3188   	fcall	_I2C_Sequential_READ
 17135                           
 17136                           ;main.c: 2782: for(i=0; i<0x10; i++)
 17137  087A  0020               	movlb	0	; select bank0
 17138  087B  01DA               	clrf	I2C_TEST_02@i
 17139  087C                     L9:	
 17140  087C  3010               	movlw	16
 17141  087D  025A               	subwf	I2C_TEST_02@i,w
 17142  087E  1803               	btfsc	3,0
 17143  087F  0008               	return
 17144                           
 17145                           ;main.c: 2783: {
 17146                           ;main.c: 2784: Print_HEX2Str(*(i2cReadBuffer+i), 1);
 17147  0880  01F7               	clrf	Print_HEX2Str@Chgln
 17148  0881  0AF7               	incf	Print_HEX2Str@Chgln,f
 17149  0882  085A               	movf	I2C_TEST_02@i,w
 17150  0883  3E47               	addlw	(low (I2C_TEST_02@i2cReadBuffer| 0))& (0+255)
 17151  0884  0086               	movwf	6
 17152  0885  0187               	clrf	7
 17153  0886  0801               	movf	1,w
 17154  0887  319F  270D  3188   	fcall	_Print_HEX2Str
 17155  088A  3001               	movlw	1
 17156  088B  0020               	movlb	0	; select bank0
 17157  088C  00B2               	movwf	??_I2C_TEST_02
 17158  088D  0832               	movf	??_I2C_TEST_02,w
 17159  088E  07DA               	addwf	I2C_TEST_02@i,f
 17160  088F  287C               	goto	L9
 17161  0890                     __end_of_I2C_TEST_02:	
 17162                           
 17163                           	psect	text53
 17164  1B8A                     __ptext53:	
 17165 ;; *************** function _Print_String *****************
 17166 ;; Defined at:
 17167 ;;		line 1422 in file "main.c"
 17168 ;; Parameters:    Size  Location     Type
 17169 ;;  BStr            2    4[COMMON] PTR const unsigned char 
 17170 ;;		 -> STR_53(22), STR_52(16), STR_51(16), STR_50(19), 
 17171 ;;		 -> STR_49(16), STR_48(16), STR_47(18), STR_46(19), 
 17172 ;;		 -> STR_45(18), STR_44(19), STR_43(14), STR_42(14), 
 17173 ;;		 -> STR_41(20), STR_40(29), STR_39(6), STR_38(4), 
 17174 ;;		 -> STR_37(21), STR_36(7), STR_35(8), STR_34(3), 
 17175 ;;		 -> STR_33(3), STR_32(3), STR_31(3), STR_30(3), 
 17176 ;;		 -> STR_29(32), STR_28(25), STR_27(15), STR_26(12), 
 17177 ;;		 -> STR_25(10), STR_24(34), STR_23(36), STR_22(12), 
 17178 ;;		 -> STR_21(36), STR_20(36), STR_19(17), STR_18(13), 
 17179 ;;		 -> STR_17(23), STR_16(7), STR_15(18), STR_14(7), 
 17180 ;;		 -> STR_13(19), STR_12(24), STR_11(11), STR_10(25), 
 17181 ;;		 -> STR_9(20), STR_8(23), STR_7(11), STR_6(20), 
 17182 ;;		 -> STR_5(27), STR_4(25), STR_3(23), BufferRec(32), 
 17183 ;;		 -> STR_2(14), STR_1(8), 
 17184 ;;  chln            1    6[COMMON] unsigned char 
 17185 ;; Auto vars:     Size  Location     Type
 17186 ;;  loopA           2    0[BANK0 ] unsigned int 
 17187 ;;  Data            1    2[BANK0 ] unsigned char 
 17188 ;; Return value:  Size  Location     Type
 17189 ;;		None               void
 17190 ;; Registers used:
 17191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17192 ;; Tracked objects:
 17193 ;;		On entry : 0/0
 17194 ;;		On exit  : 0/0
 17195 ;;		Unchanged: 0/0
 17196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17197 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17198 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17199 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17200 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17201 ;;Total ram usage:        7 bytes
 17202 ;; Hardware stack levels used:    1
 17203 ;; Hardware stack levels required when called:    5
 17204 ;; This function calls:
 17205 ;;		_EUSART_Write
 17206 ;;		_Print_CHLN
 17207 ;; This function is called by:
 17208 ;;		_main
 17209 ;;		_Decode_RS232_CMD
 17210 ;;		_RUN_MESURE
 17211 ;;		_DS18B20_GetTemp
 17212 ;;		_TEST_PIC_ALL
 17213 ;;		_print_RTC
 17214 ;;		_I2C_TEST_02
 17215 ;;		_I2C_TEST_10
 17216 ;;		_check_ADO_I2C
 17217 ;;		_I2C_TEST_01
 17218 ;;		_Save_QMD_EEPROM
 17219 ;; This function uses a non-reentrant model
 17220 ;;
 17221                           
 17222                           
 17223                           ;psect for function _Print_String
 17224  1B8A                     _Print_String:	
 17225                           
 17226                           ;main.c: 1424: uint8_t Data;
 17227                           ;main.c: 1425: uint16_t loopA = 0;
 17228                           
 17229                           ;incstack = 0
 17230                           ; Regs used in _Print_String: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17231  1B8A  0020               	movlb	0	; select bank0
 17232  1B8B  01A0               	clrf	Print_String@loopA
 17233  1B8C  01A1               	clrf	Print_String@loopA+1
 17234  1B8D                     l6622:	
 17235                           ;main.c: 1427: do
 17236                           
 17237                           
 17238                           ;main.c: 1428: {
 17239                           ;main.c: 1429: Data = *(BStr + loopA++);
 17240  1B8D  0874               	movf	Print_String@BStr,w
 17241  1B8E  0720               	addwf	Print_String@loopA,w
 17242  1B8F  0084               	movwf	4
 17243  1B90  0875               	movf	Print_String@BStr+1,w
 17244  1B91  3D21               	addwfc	Print_String@loopA+1,w
 17245  1B92  0085               	movwf	5
 17246  1B93  0800               	movf	0,w	;code access
 17247  1B94  00F7               	movwf	??_Print_String
 17248  1B95  0877               	movf	??_Print_String,w
 17249  1B96  00A2               	movwf	Print_String@Data
 17250  1B97  3001               	movlw	1
 17251  1B98  07A0               	addwf	Print_String@loopA,f
 17252  1B99  3000               	movlw	0
 17253  1B9A  3DA1               	addwfc	Print_String@loopA+1,f
 17254                           
 17255                           ;main.c: 1430: if(Data != '$')
 17256  1B9B  3024               	movlw	36
 17257  1B9C  0622               	xorwf	Print_String@Data,w
 17258  1B9D  1903               	btfsc	3,2
 17259  1B9E  2BA3               	goto	l6630
 17260                           
 17261                           ;main.c: 1431: EUSART_Write(Data);
 17262  1B9F  0822               	movf	Print_String@Data,w
 17263  1BA0  319B  2366  319B   	fcall	_EUSART_Write
 17264  1BA3                     l6630:	
 17265                           
 17266                           ;main.c: 1433: }while(Data != '$');
 17267  1BA3  3024               	movlw	36
 17268  1BA4  0020               	movlb	0	; select bank0
 17269  1BA5  0622               	xorwf	Print_String@Data,w
 17270  1BA6  1D03               	btfss	3,2
 17271  1BA7  2B8D               	goto	l6622
 17272                           
 17273                           ;main.c: 1435: if(chln == 1)
 17274  1BA8  0376               	decf	Print_String@chln,w
 17275  1BA9  1D03               	btfss	3,2
 17276  1BAA  0008               	return
 17277                           
 17278                           ;main.c: 1436: Print_CHLN();
 17279  1BAB  3199  211C         	fcall	_Print_CHLN
 17280  1BAD  0008               	return
 17281  1BAE                     __end_of_Print_String:	
 17282                           
 17283                           	psect	text54
 17284  150F                     __ptext54:	
 17285 ;; *************** function _I2C_Sequential_READ *****************
 17286 ;; Defined at:
 17287 ;;		line 2545 in file "main.c"
 17288 ;; Parameters:    Size  Location     Type
 17289 ;;  slave_addr      1    wreg     unsigned char 
 17290 ;;  reg_addr_h      1    8[BANK0 ] unsigned char 
 17291 ;;  reg_addr_l      1    9[BANK0 ] unsigned char 
 17292 ;;  Size            1   10[BANK0 ] unsigned char 
 17293 ;;  value           1   11[BANK0 ] PTR unsigned char 
 17294 ;;		 -> I2C_TEST_02@i2cReadBuffer(16), 
 17295 ;; Auto vars:     Size  Location     Type
 17296 ;;  slave_addr      1   15[BANK0 ] unsigned char 
 17297 ;;  j               1   17[BANK0 ] unsigned char 
 17298 ;;  i               1   16[BANK0 ] unsigned char 
 17299 ;;  ack             1   14[BANK0 ] unsigned char 
 17300 ;; Return value:  Size  Location     Type
 17301 ;;		None               void
 17302 ;; Registers used:
 17303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17304 ;; Tracked objects:
 17305 ;;		On entry : 0/0
 17306 ;;		On exit  : 0/0
 17307 ;;		Unchanged: 0/0
 17308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17309 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17310 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17312 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17313 ;;Total ram usage:       10 bytes
 17314 ;; Hardware stack levels used:    1
 17315 ;; Hardware stack levels required when called:    6
 17316 ;; This function calls:
 17317 ;;		_I2C_READ_8BIT
 17318 ;;		_I2C_START_BIT
 17319 ;;		_I2C_STOP_BIT
 17320 ;;		_I2C_WRITE_8BIT
 17321 ;;		_Print_HEX2Str
 17322 ;; This function is called by:
 17323 ;;		_I2C_TEST_02
 17324 ;;		_Load_QMD_EEPROM
 17325 ;; This function uses a non-reentrant model
 17326 ;;
 17327                           
 17328                           
 17329                           ;psect for function _I2C_Sequential_READ
 17330  150F                     _I2C_Sequential_READ:	
 17331                           
 17332                           ;incstack = 0
 17333                           ; Regs used in _I2C_Sequential_READ: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17334                           ;I2C_Sequential_READ@slave_addr stored from wreg
 17335  150F  0020               	movlb	0	; select bank0
 17336  1510  00AF               	movwf	I2C_Sequential_READ@slave_addr
 17337                           
 17338                           ;main.c: 2547: uint8_t i=10;
 17339  1511  300A               	movlw	10
 17340  1512  00AC               	movwf	??_I2C_Sequential_READ
 17341  1513  082C               	movf	??_I2C_Sequential_READ,w
 17342  1514  00B0               	movwf	I2C_Sequential_READ@i
 17343                           
 17344                           ;main.c: 2548: uint8_t j=0;
 17345  1515  01B1               	clrf	I2C_Sequential_READ@j
 17346                           
 17347                           ;main.c: 2549: uint8_t ack=1;
 17348  1516  01AE               	clrf	I2C_Sequential_READ@ack
 17349  1517  0AAE               	incf	I2C_Sequential_READ@ack,f
 17350  1518                     l6974:	
 17351                           ;main.c: 2552: while (--i)
 17352                           
 17353  1518  3001               	movlw	1
 17354  1519  0020               	movlb	0	; select bank0
 17355  151A  02B0               	subwf	I2C_Sequential_READ@i,f
 17356  151B  1903               	btfsc	3,2
 17357  151C  2D6F               	goto	l6976
 17358                           
 17359                           ;main.c: 2553: {
 17360                           ;main.c: 2555: I2C_START_BIT();
 17361  151D  3199  216C  3195   	fcall	_I2C_START_BIT
 17362                           
 17363                           ;main.c: 2556: if(I2C_WRITE_8BIT(slave_addr&0xfe)) continue;
 17364  1520  0020               	movlb	0	; select bank0
 17365  1521  082F               	movf	I2C_Sequential_READ@slave_addr,w
 17366  1522  39FE               	andlw	254
 17367  1523  319D  25BD  3195   	fcall	_I2C_WRITE_8BIT
 17368  1526  3A00               	xorlw	0
 17369  1527  1D03               	btfss	3,2
 17370  1528  2D18               	goto	l6974
 17371                           
 17372                           ;main.c: 2557: if(I2C_WRITE_8BIT(reg_addr_h)) continue;
 17373  1529  0020               	movlb	0	; select bank0
 17374  152A  0828               	movf	I2C_Sequential_READ@reg_addr_h,w
 17375  152B  319D  25BD  3195   	fcall	_I2C_WRITE_8BIT
 17376  152E  3A00               	xorlw	0
 17377  152F  1D03               	btfss	3,2
 17378  1530  2D18               	goto	l6974
 17379                           
 17380                           ;main.c: 2558: if(I2C_WRITE_8BIT(reg_addr_l)) continue;
 17381  1531  0020               	movlb	0	; select bank0
 17382  1532  0829               	movf	I2C_Sequential_READ@reg_addr_l,w
 17383  1533  319D  25BD  3195   	fcall	_I2C_WRITE_8BIT
 17384  1536  3A00               	xorlw	0
 17385  1537  1D03               	btfss	3,2
 17386  1538  2D18               	goto	l6974
 17387                           
 17388                           ;main.c: 2561: I2C_START_BIT();
 17389  1539  3199  216C  3195   	fcall	_I2C_START_BIT
 17390                           
 17391                           ;main.c: 2562: if(I2C_WRITE_8BIT(slave_addr | 1)) continue;
 17392  153C  0020               	movlb	0	; select bank0
 17393  153D  082F               	movf	I2C_Sequential_READ@slave_addr,w
 17394  153E  3801               	iorlw	1
 17395  153F  319D  25BD  3195   	fcall	_I2C_WRITE_8BIT
 17396  1542  3A00               	xorlw	0
 17397  1543  1D03               	btfss	3,2
 17398  1544  2D18               	goto	l6974
 17399  1545                     l6960:	
 17400                           ;main.c: 2563: do
 17401                           
 17402                           
 17403                           ;main.c: 2564: {
 17404                           ;main.c: 2565: if(j+1 == Size)
 17405  1545  0020               	movlb	0	; select bank0
 17406  1546  0831               	movf	I2C_Sequential_READ@j,w
 17407  1547  3E01               	addlw	1
 17408  1548  00AC               	movwf	??_I2C_Sequential_READ
 17409  1549  3000               	movlw	0
 17410  154A  1803               	skipnc
 17411  154B  3001               	movlw	1
 17412  154C  00AD               	movwf	??_I2C_Sequential_READ+1
 17413  154D  082A               	movf	I2C_Sequential_READ@Size,w
 17414  154E  062C               	xorwf	??_I2C_Sequential_READ,w
 17415  154F  042D               	iorwf	??_I2C_Sequential_READ+1,w
 17416  1550  1D03               	skipz
 17417  1551  2D55               	goto	l6964
 17418                           
 17419                           ;main.c: 2566: ack = 1;
 17420  1552  01AE               	clrf	I2C_Sequential_READ@ack
 17421  1553  0AAE               	incf	I2C_Sequential_READ@ack,f
 17422  1554  2D56               	goto	l6966
 17423  1555                     l6964:	
 17424                           
 17425                           ;main.c: 2567: else
 17426                           ;main.c: 2568: ack = 0;
 17427  1555  01AE               	clrf	I2C_Sequential_READ@ack
 17428  1556                     l6966:	
 17429                           
 17430                           ;main.c: 2570: *(value+j) = I2C_READ_8BIT(ack);
 17431  1556  082E               	movf	I2C_Sequential_READ@ack,w
 17432  1557  3193  2339  3195   	fcall	_I2C_READ_8BIT
 17433  155A  0020               	movlb	0	; select bank0
 17434  155B  00AC               	movwf	??_I2C_Sequential_READ
 17435  155C  0831               	movf	I2C_Sequential_READ@j,w
 17436  155D  072B               	addwf	I2C_Sequential_READ@value,w
 17437  155E  00AD               	movwf	??_I2C_Sequential_READ+1
 17438  155F  082D               	movf	??_I2C_Sequential_READ+1,w
 17439  1560  0086               	movwf	6
 17440  1561  0187               	clrf	7
 17441  1562  082C               	movf	??_I2C_Sequential_READ,w
 17442  1563  0081               	movwf	1
 17443                           
 17444                           ;main.c: 2571: j++;
 17445  1564  3001               	movlw	1
 17446  1565  00AC               	movwf	??_I2C_Sequential_READ
 17447  1566  082C               	movf	??_I2C_Sequential_READ,w
 17448  1567  07B1               	addwf	I2C_Sequential_READ@j,f
 17449                           
 17450                           ;main.c: 2573: }while(j < Size);
 17451  1568  082A               	movf	I2C_Sequential_READ@Size,w
 17452  1569  0231               	subwf	I2C_Sequential_READ@j,w
 17453  156A  1C03               	skipc
 17454  156B  2D45               	goto	l6960
 17455                           
 17456                           ;main.c: 2575: I2C_STOP_BIT();
 17457  156C  3199  2179  3195   	fcall	_I2C_STOP_BIT
 17458  156F                     l6976:	
 17459                           ;main.c: 2576: break;
 17460                           
 17461                           
 17462                           ;main.c: 2577: }
 17463                           ;main.c: 2579: Print_HEX2Str(i, 1);
 17464  156F  01F7               	clrf	Print_HEX2Str@Chgln
 17465  1570  0AF7               	incf	Print_HEX2Str@Chgln,f
 17466  1571  0020               	movlb	0	; select bank0
 17467  1572  0830               	movf	I2C_Sequential_READ@i,w
 17468  1573  319F  270D         	fcall	_Print_HEX2Str
 17469  1575  0008               	return
 17470  1576                     __end_of_I2C_Sequential_READ:	
 17471                           
 17472                           	psect	text55
 17473  1339                     __ptext55:	
 17474 ;; *************** function _I2C_READ_8BIT *****************
 17475 ;; Defined at:
 17476 ;;		line 2350 in file "main.c"
 17477 ;; Parameters:    Size  Location     Type
 17478 ;;  acknowledge     1    wreg     unsigned char 
 17479 ;; Auto vars:     Size  Location     Type
 17480 ;;  acknowledge     1    3[COMMON] unsigned char 
 17481 ;;  value           1    6[COMMON] unsigned char 
 17482 ;;  rSCL            1    5[COMMON] unsigned char 
 17483 ;;  i               1    4[COMMON] unsigned char 
 17484 ;; Return value:  Size  Location     Type
 17485 ;;                  1    wreg      unsigned char 
 17486 ;; Registers used:
 17487 ;;		wreg, status,2, status,0, pclath, cstack
 17488 ;; Tracked objects:
 17489 ;;		On entry : 0/0
 17490 ;;		On exit  : 0/0
 17491 ;;		Unchanged: 0/0
 17492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17494 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17495 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17496 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17497 ;;Total ram usage:        5 bytes
 17498 ;; Hardware stack levels used:    1
 17499 ;; Hardware stack levels required when called:    5
 17500 ;; This function calls:
 17501 ;;		_I2C_Dealy_1
 17502 ;;		_I2C_Dealy_2
 17503 ;; This function is called by:
 17504 ;;		_I2C_Sequential_READ
 17505 ;;		_I2C_mREAD
 17506 ;;		_I2C_RANDOM_READ
 17507 ;; This function uses a non-reentrant model
 17508 ;;
 17509                           
 17510                           
 17511                           ;psect for function _I2C_READ_8BIT
 17512  1339                     _I2C_READ_8BIT:	
 17513                           
 17514                           ;incstack = 0
 17515                           ; Regs used in _I2C_READ_8BIT: [wreg+status,2+status,0+pclath+cstack]
 17516                           ;I2C_READ_8BIT@acknowledge stored from wreg
 17517  1339  00F3               	movwf	I2C_READ_8BIT@acknowledge
 17518                           
 17519                           ;main.c: 2352: uint8_t value=0;
 17520  133A  01F6               	clrf	I2C_READ_8BIT@value
 17521                           
 17522                           ;main.c: 2353: uint8_t i=8;
 17523  133B  3008               	movlw	8
 17524  133C  00F2               	movwf	??_I2C_READ_8BIT
 17525  133D  0872               	movf	??_I2C_READ_8BIT,w
 17526  133E  00F4               	movwf	I2C_READ_8BIT@i
 17527                           
 17528                           ;main.c: 2354: uint8_t rSCL=0;
 17529  133F  01F5               	clrf	I2C_READ_8BIT@rSCL
 17530                           
 17531                           ;main.c: 2356: do { TRISC4 = 1; } while(0);
 17532  1340  0021               	movlb	1	; select bank1
 17533  1341  160E               	bsf	14,4	;volatile
 17534                           
 17535                           ;main.c: 2359: do { TRISC3 = 1; } while(0);
 17536  1342  158E               	bsf	14,3	;volatile
 17537                           
 17538                           ;main.c: 2360: value <<= 1;
 17539  1343  1003               	clrc
 17540  1344  0DF6               	rlf	I2C_READ_8BIT@value,f
 17541  1345                     l4358:	
 17542                           ;main.c: 2361: do
 17543                           
 17544                           
 17545                           ;main.c: 2362: {
 17546                           ;main.c: 2363: rSCL = RC3;
 17547  1345  3000               	movlw	0
 17548  1346  0020               	movlb	0	; select bank0
 17549  1347  198E               	btfsc	14,3	;volatile
 17550  1348  3001               	movlw	1
 17551  1349  00F5               	movwf	I2C_READ_8BIT@rSCL
 17552                           
 17553                           ;main.c: 2364: }while(rSCL == 0);
 17554  134A  0875               	movf	I2C_READ_8BIT@rSCL,w
 17555  134B  1903               	btfsc	3,2
 17556  134C  2B45               	goto	l4358
 17557                           
 17558                           ;main.c: 2365: value |= RC4;
 17559  134D  3000               	movlw	0
 17560  134E  1A0E               	btfsc	14,4	;volatile
 17561  134F  3001               	movlw	1
 17562  1350  00F2               	movwf	??_I2C_READ_8BIT
 17563  1351  0872               	movf	??_I2C_READ_8BIT,w
 17564  1352  04F6               	iorwf	I2C_READ_8BIT@value,f
 17565                           
 17566                           ;main.c: 2366: do { TRISC3 = 0; } while(0);
 17567  1353  0021               	movlb	1	; select bank1
 17568  1354  118E               	bcf	14,3	;volatile
 17569  1355                     L10:	
 17570                           
 17571                           ;main.c: 2368: I2C_Dealy_2();
 17572  1355  3198  20DC  3193   	fcall	_I2C_Dealy_2
 17573                           
 17574                           ;main.c: 2383: do { LATC3 = 0; } while(0);
 17575  1358  0022               	movlb	2	; select bank2
 17576  1359  118E               	bcf	14,3	;volatile
 17577  135A  3001               	movlw	1
 17578  135B  02F4               	subwf	I2C_READ_8BIT@i,f
 17579  135C  1903               	btfsc	3,2
 17580  135D  2B70               	goto	l1052
 17581                           
 17582                           ;main.c: 2374: {
 17583                           ;main.c: 2376: value <<= 1;
 17584                           
 17585                           ;main.c: 2373: while(--i)
 17586                           
 17587                           ;main.c: 2369: do { LATC3 = 0; } while(0);
 17588  135E  1003               	clrc
 17589  135F  0DF6               	rlf	I2C_READ_8BIT@value,f
 17590                           
 17591                           ;main.c: 2377: I2C_Dealy_1();
 17592  1360  3199  2104  3193   	fcall	_I2C_Dealy_1
 17593                           
 17594                           ;main.c: 2379: do { LATC3 = 1; } while(0);
 17595  1363  0022               	movlb	2	; select bank2
 17596  1364  158E               	bsf	14,3	;volatile
 17597                           
 17598                           ;main.c: 2380: I2C_Dealy_2();
 17599  1365  3198  20DC  3193   	fcall	_I2C_Dealy_2
 17600                           
 17601                           ;main.c: 2381: value |= RC4;
 17602  1368  3000               	movlw	0
 17603  1369  0020               	movlb	0	; select bank0
 17604  136A  1A0E               	btfsc	14,4	;volatile
 17605  136B  3001               	movlw	1
 17606  136C  00F2               	movwf	??_I2C_READ_8BIT
 17607  136D  0872               	movf	??_I2C_READ_8BIT,w
 17608  136E  04F6               	iorwf	I2C_READ_8BIT@value,f
 17609  136F  2B55               	goto	L10
 17610  1370                     l1052:	
 17611                           ;main.c: 2384: }
 17612                           ;main.c: 2386: do { TRISC4 = 0; } while(0);
 17613                           
 17614                           ;main.c: 2382: I2C_Dealy_2();
 17615                           
 17616  1370  0021               	movlb	1	; select bank1
 17617  1371  120E               	bcf	14,4	;volatile
 17618                           
 17619                           ;main.c: 2388: I2C_Dealy_2();
 17620  1372  3198  20DC  3193   	fcall	_I2C_Dealy_2
 17621                           
 17622                           ;main.c: 2389: I2C_Dealy_2();
 17623  1375  3198  20DC  3193   	fcall	_I2C_Dealy_2
 17624                           
 17625                           ;main.c: 2390: I2C_Dealy_2();
 17626  1378  3198  20DC  3193   	fcall	_I2C_Dealy_2
 17627                           
 17628                           ;main.c: 2393: if(acknowledge)
 17629  137B  0873               	movf	I2C_READ_8BIT@acknowledge,w
 17630  137C  1903               	btfsc	3,2
 17631  137D  2B81               	goto	l1058
 17632                           
 17633                           ;main.c: 2394: do { LATC4 = 1; } while(0);
 17634  137E  0022               	movlb	2	; select bank2
 17635  137F  160E               	bsf	14,4	;volatile
 17636  1380  2B83               	goto	l4390
 17637  1381                     l1058:	
 17638                           ;main.c: 2395: else
 17639                           ;main.c: 2396: do { LATC4 = 0; } while(0);
 17640                           
 17641  1381  0022               	movlb	2	; select bank2
 17642  1382  120E               	bcf	14,4	;volatile
 17643  1383                     l4390:	
 17644                           
 17645                           ;main.c: 2398: I2C_Dealy_2();
 17646  1383  3198  20DC  3193   	fcall	_I2C_Dealy_2
 17647                           
 17648                           ;main.c: 2399: do { LATC3 = 1; } while(0);
 17649  1386  0022               	movlb	2	; select bank2
 17650  1387  158E               	bsf	14,3	;volatile
 17651                           
 17652                           ;main.c: 2400: I2C_Dealy_1();
 17653  1388  3199  2104         	fcall	_I2C_Dealy_1
 17654                           
 17655                           ;main.c: 2401: do { LATC3 = 0; } while(0);
 17656  138A  0022               	movlb	2	; select bank2
 17657  138B  118E               	bcf	14,3	;volatile
 17658                           
 17659                           ;main.c: 2404: return value;
 17660  138C  0876               	movf	I2C_READ_8BIT@value,w
 17661  138D  0008               	return
 17662  138E                     __end_of_I2C_READ_8BIT:	
 17663                           
 17664                           	psect	text56
 17665  1576                     __ptext56:	
 17666 ;; *************** function _I2C_PAGE_WRITE *****************
 17667 ;; Defined at:
 17668 ;;		line 2463 in file "main.c"
 17669 ;; Parameters:    Size  Location     Type
 17670 ;;  slave_addr      1    wreg     unsigned char 
 17671 ;;  reg_addr_h      1    8[BANK0 ] unsigned char 
 17672 ;;  reg_addr_l      1    9[BANK0 ] unsigned char 
 17673 ;;  Size            1   10[BANK0 ] unsigned char 
 17674 ;;  value           1   11[BANK0 ] PTR unsigned char 
 17675 ;;		 -> I2C_TEST_02@i2cData(16), 
 17676 ;; Auto vars:     Size  Location     Type
 17677 ;;  slave_addr      1   14[BANK0 ] unsigned char 
 17678 ;;  Check_Error     1   17[BANK0 ] unsigned char 
 17679 ;;  j               1   16[BANK0 ] unsigned char 
 17680 ;;  i               1   15[BANK0 ] unsigned char 
 17681 ;; Return value:  Size  Location     Type
 17682 ;;                  1    wreg      unsigned char 
 17683 ;; Registers used:
 17684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17685 ;; Tracked objects:
 17686 ;;		On entry : 0/0
 17687 ;;		On exit  : 0/0
 17688 ;;		Unchanged: 0/0
 17689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17690 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17691 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17692 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17693 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17694 ;;Total ram usage:       10 bytes
 17695 ;; Hardware stack levels used:    1
 17696 ;; Hardware stack levels required when called:    6
 17697 ;; This function calls:
 17698 ;;		_I2C_START_BIT
 17699 ;;		_I2C_STOP_BIT
 17700 ;;		_I2C_WRITE_8BIT
 17701 ;;		_Print_HEX2Str
 17702 ;; This function is called by:
 17703 ;;		_I2C_TEST_02
 17704 ;;		_Save_QMD_EEPROM
 17705 ;; This function uses a non-reentrant model
 17706 ;;
 17707                           
 17708                           
 17709                           ;psect for function _I2C_PAGE_WRITE
 17710  1576                     _I2C_PAGE_WRITE:	
 17711                           
 17712                           ;incstack = 0
 17713                           ; Regs used in _I2C_PAGE_WRITE: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17714                           ;I2C_PAGE_WRITE@slave_addr stored from wreg
 17715  1576  0020               	movlb	0	; select bank0
 17716  1577  00AE               	movwf	I2C_PAGE_WRITE@slave_addr
 17717                           
 17718                           ;main.c: 2467: uint8_t i=10;
 17719  1578  300A               	movlw	10
 17720  1579  00AC               	movwf	??_I2C_PAGE_WRITE
 17721  157A  082C               	movf	??_I2C_PAGE_WRITE,w
 17722  157B  00AF               	movwf	I2C_PAGE_WRITE@i
 17723                           
 17724                           ;main.c: 2468: uint8_t Check_Error = 0;
 17725  157C  01B1               	clrf	I2C_PAGE_WRITE@Check_Error
 17726                           
 17727                           ;main.c: 2469: uint8_t j=0;
 17728  157D  01B0               	clrf	I2C_PAGE_WRITE@j
 17729  157E                     l6906:	
 17730                           ;main.c: 2473: do
 17731                           
 17732                           
 17733                           ;main.c: 2474: {
 17734                           ;main.c: 2475: I2C_START_BIT();
 17735  157E  3199  216C  3195   	fcall	_I2C_START_BIT
 17736                           
 17737                           ;main.c: 2477: if(Check_Error = I2C_WRITE_8BIT(slave_addr&0xfe) == 0)
 17738  1581  0020               	movlb	0	; select bank0
 17739  1582  082E               	movf	I2C_PAGE_WRITE@slave_addr,w
 17740  1583  39FE               	andlw	254
 17741  1584  319D  25BD  3195   	fcall	_I2C_WRITE_8BIT
 17742  1587  3A00               	xorlw	0
 17743  1588  1D03               	btfss	3,2
 17744  1589  2D8C               	goto	u7480
 17745  158A  3001               	movlw	1
 17746  158B  2D8D               	goto	u7490
 17747  158C                     u7480:	
 17748  158C  3000               	movlw	0
 17749  158D                     u7490:	
 17750  158D  0020               	movlb	0	; select bank0
 17751  158E  00AC               	movwf	??_I2C_PAGE_WRITE
 17752  158F  082C               	movf	??_I2C_PAGE_WRITE,w
 17753  1590  00B1               	movwf	I2C_PAGE_WRITE@Check_Error
 17754  1591  0831               	movf	I2C_PAGE_WRITE@Check_Error,w
 17755  1592  1903               	btfsc	3,2
 17756  1593  2DCF               	goto	l6920
 17757                           
 17758                           ;main.c: 2478: if(Check_Error = I2C_WRITE_8BIT(reg_addr_h) == 0)
 17759  1594  0828               	movf	I2C_PAGE_WRITE@reg_addr_h,w
 17760  1595  319D  25BD  3195   	fcall	_I2C_WRITE_8BIT
 17761  1598  3A00               	xorlw	0
 17762  1599  1D03               	btfss	3,2
 17763  159A  2D9D               	goto	u7510
 17764  159B  3001               	movlw	1
 17765  159C  2D9E               	goto	u7520
 17766  159D                     u7510:	
 17767  159D  3000               	movlw	0
 17768  159E                     u7520:	
 17769  159E  0020               	movlb	0	; select bank0
 17770  159F  00AC               	movwf	??_I2C_PAGE_WRITE
 17771  15A0  082C               	movf	??_I2C_PAGE_WRITE,w
 17772  15A1  00B1               	movwf	I2C_PAGE_WRITE@Check_Error
 17773  15A2  0831               	movf	I2C_PAGE_WRITE@Check_Error,w
 17774  15A3  1903               	btfsc	3,2
 17775  15A4  2DCF               	goto	l6920
 17776                           
 17777                           ;main.c: 2479: if(Check_Error = I2C_WRITE_8BIT(reg_addr_l) == 0)
 17778  15A5  0829               	movf	I2C_PAGE_WRITE@reg_addr_l,w
 17779  15A6  319D  25BD  3195   	fcall	_I2C_WRITE_8BIT
 17780  15A9  3A00               	xorlw	0
 17781  15AA  1D03               	btfss	3,2
 17782  15AB  2DAE               	goto	u7540
 17783  15AC  3001               	movlw	1
 17784  15AD  2DAF               	goto	u7550
 17785  15AE                     u7540:	
 17786  15AE  3000               	movlw	0
 17787  15AF                     u7550:	
 17788  15AF  0020               	movlb	0	; select bank0
 17789  15B0  00AC               	movwf	??_I2C_PAGE_WRITE
 17790  15B1  082C               	movf	??_I2C_PAGE_WRITE,w
 17791  15B2  00B1               	movwf	I2C_PAGE_WRITE@Check_Error
 17792  15B3  0831               	movf	I2C_PAGE_WRITE@Check_Error,w
 17793  15B4  1903               	btfsc	3,2
 17794  15B5  2DCF               	goto	l6920
 17795  15B6                     l6912:	
 17796                           ;main.c: 2480: do
 17797                           
 17798                           
 17799                           ;main.c: 2481: {
 17800                           ;main.c: 2482: Check_Error = I2C_WRITE_8BIT(*(value+j));
 17801  15B6  0830               	movf	I2C_PAGE_WRITE@j,w
 17802  15B7  072B               	addwf	I2C_PAGE_WRITE@value,w
 17803  15B8  00AC               	movwf	??_I2C_PAGE_WRITE
 17804  15B9  082C               	movf	??_I2C_PAGE_WRITE,w
 17805  15BA  0086               	movwf	6
 17806  15BB  0187               	clrf	7
 17807  15BC  0801               	movf	1,w
 17808  15BD  319D  25BD  3195   	fcall	_I2C_WRITE_8BIT
 17809  15C0  0020               	movlb	0	; select bank0
 17810  15C1  00AD               	movwf	??_I2C_PAGE_WRITE+1
 17811  15C2  082D               	movf	??_I2C_PAGE_WRITE+1,w
 17812  15C3  00B1               	movwf	I2C_PAGE_WRITE@Check_Error
 17813                           
 17814                           ;main.c: 2483: j++;
 17815  15C4  3001               	movlw	1
 17816  15C5  00AC               	movwf	??_I2C_PAGE_WRITE
 17817  15C6  082C               	movf	??_I2C_PAGE_WRITE,w
 17818  15C7  07B0               	addwf	I2C_PAGE_WRITE@j,f
 17819                           
 17820                           ;main.c: 2484: }while((Check_Error == 0)&&(j<Size));
 17821  15C8  0831               	movf	I2C_PAGE_WRITE@Check_Error,w
 17822  15C9  1D03               	btfss	3,2
 17823  15CA  2DCF               	goto	l6920
 17824  15CB  082A               	movf	I2C_PAGE_WRITE@Size,w
 17825  15CC  0230               	subwf	I2C_PAGE_WRITE@j,w
 17826  15CD  1C03               	skipc
 17827  15CE  2DB6               	goto	l6912
 17828  15CF                     l6920:	
 17829                           
 17830                           ;main.c: 2486: I2C_STOP_BIT();
 17831  15CF  3199  2179  3195   	fcall	_I2C_STOP_BIT
 17832                           
 17833                           ;main.c: 2487: i--;
 17834  15D2  3001               	movlw	1
 17835  15D3  0020               	movlb	0	; select bank0
 17836  15D4  02AF               	subwf	I2C_PAGE_WRITE@i,f
 17837                           
 17838                           ;main.c: 2488: }while((i!=0)&&(Check_Error == 1) );
 17839  15D5  082F               	movf	I2C_PAGE_WRITE@i,w
 17840  15D6  1903               	btfsc	3,2
 17841  15D7  2DDB               	goto	l6928
 17842  15D8  0331               	decf	I2C_PAGE_WRITE@Check_Error,w
 17843  15D9  1903               	btfsc	3,2
 17844  15DA  2D7E               	goto	l6906
 17845  15DB                     l6928:	
 17846                           
 17847                           ;main.c: 2494: Print_HEX2Str(i, 1);
 17848  15DB  01F7               	clrf	Print_HEX2Str@Chgln
 17849  15DC  0AF7               	incf	Print_HEX2Str@Chgln,f
 17850  15DD  082F               	movf	I2C_PAGE_WRITE@i,w
 17851  15DE  319F  270D         	fcall	_Print_HEX2Str
 17852                           
 17853                           ;main.c: 2502: return 0;
 17854  15E0  3000               	movlw	0
 17855  15E1  0008               	return
 17856  15E2                     __end_of_I2C_PAGE_WRITE:	
 17857                           
 17858                           	psect	text57
 17859  1F0D                     __ptext57:	
 17860 ;; *************** function _Print_HEX2Str *****************
 17861 ;; Defined at:
 17862 ;;		line 1490 in file "main.c"
 17863 ;; Parameters:    Size  Location     Type
 17864 ;;  InputVol        1    wreg     unsigned char 
 17865 ;;  Chgln           1    7[COMMON] unsigned char 
 17866 ;; Auto vars:     Size  Location     Type
 17867 ;;  InputVol        1    4[BANK0 ] unsigned char 
 17868 ;;  HexCal          2    6[BANK0 ] unsigned int 
 17869 ;;  wOneByte        1    5[BANK0 ] unsigned char 
 17870 ;; Return value:  Size  Location     Type
 17871 ;;		None               void
 17872 ;; Registers used:
 17873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17874 ;; Tracked objects:
 17875 ;;		On entry : 0/0
 17876 ;;		On exit  : 0/0
 17877 ;;		Unchanged: 0/0
 17878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17879 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17880 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17881 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17882 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17883 ;;Total ram usage:        7 bytes
 17884 ;; Hardware stack levels used:    1
 17885 ;; Hardware stack levels required when called:    5
 17886 ;; This function calls:
 17887 ;;		_EUSART_Write
 17888 ;;		_Print_CHLN
 17889 ;;		___awdiv
 17890 ;; This function is called by:
 17891 ;;		_main
 17892 ;;		_Decode_RS232_CMD
 17893 ;;		_DS18B20_GetTemp
 17894 ;;		_PIC_SYNC_ADO_RTC
 17895 ;;		_PIC_SYNC_ADO_ULSR
 17896 ;;		_I2C_PAGE_WRITE
 17897 ;;		_I2C_Sequential_READ
 17898 ;;		_I2C_TEST_02
 17899 ;;		_I2C_TEST_10
 17900 ;;		_check_ADO_I2C
 17901 ;;		_I2C_BYTE_WRITE
 17902 ;;		_I2C_RANDOM_READ
 17903 ;;		_I2C_TEST_01
 17904 ;;		_Save_QMD_EEPROM
 17905 ;; This function uses a non-reentrant model
 17906 ;;
 17907                           
 17908                           
 17909                           ;psect for function _Print_HEX2Str
 17910  1F0D                     _Print_HEX2Str:	
 17911                           
 17912                           ;incstack = 0
 17913                           ; Regs used in _Print_HEX2Str: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17914                           ;Print_HEX2Str@InputVol stored from wreg
 17915  1F0D  0020               	movlb	0	; select bank0
 17916  1F0E  00A4               	movwf	Print_HEX2Str@InputVol
 17917                           
 17918                           ;main.c: 1492: uint8_t wOneByte = 0x41;
 17919  1F0F  3041               	movlw	65
 17920  1F10  00F8               	movwf	??_Print_HEX2Str
 17921  1F11  0878               	movf	??_Print_HEX2Str,w
 17922  1F12  00A5               	movwf	Print_HEX2Str@wOneByte
 17923                           
 17924                           ;main.c: 1493: uint16_t HexCal = InputVol/16;
 17925  1F13  3010               	movlw	16
 17926  1F14  00F2               	movwf	___awdiv@divisor
 17927  1F15  3000               	movlw	0
 17928  1F16  00F3               	movwf	___awdiv@divisor+1
 17929  1F17  0824               	movf	Print_HEX2Str@InputVol,w
 17930  1F18  00F8               	movwf	??_Print_HEX2Str
 17931  1F19  01F9               	clrf	??_Print_HEX2Str+1
 17932  1F1A  0878               	movf	??_Print_HEX2Str,w
 17933  1F1B  00F4               	movwf	___awdiv@dividend
 17934  1F1C  0879               	movf	??_Print_HEX2Str+1,w
 17935  1F1D  00F5               	movwf	___awdiv@dividend+1
 17936  1F1E  319F  275B  319F   	fcall	___awdiv
 17937  1F21  0873               	movf	?___awdiv+1,w
 17938  1F22  0020               	movlb	0	; select bank0
 17939  1F23  00A7               	movwf	Print_HEX2Str@HexCal+1
 17940  1F24  0872               	movf	?___awdiv,w
 17941  1F25  00A6               	movwf	Print_HEX2Str@HexCal
 17942                           
 17943                           ;main.c: 1495: if(HexCal >= 10)
 17944  1F26  3000               	movlw	0
 17945  1F27  0227               	subwf	Print_HEX2Str@HexCal+1,w
 17946  1F28  300A               	movlw	10
 17947  1F29  1903               	skipnz
 17948  1F2A  0226               	subwf	Print_HEX2Str@HexCal,w
 17949  1F2B  1C03               	skipc
 17950  1F2C  2F30               	goto	l6738
 17951                           
 17952                           ;main.c: 1496: wOneByte = 'A'+ HexCal-10;
 17953  1F2D  0826               	movf	Print_HEX2Str@HexCal,w
 17954  1F2E  3E37               	addlw	55
 17955  1F2F  2F32               	goto	L11
 17956  1F30                     l6738:	
 17957                           
 17958                           ;main.c: 1497: else
 17959                           ;main.c: 1498: wOneByte = '0'+ HexCal;
 17960  1F30  0826               	movf	Print_HEX2Str@HexCal,w
 17961  1F31  3E30               	addlw	48
 17962  1F32                     L11:	
 17963  1F32  00F8               	movwf	??_Print_HEX2Str
 17964  1F33  0878               	movf	??_Print_HEX2Str,w
 17965  1F34  00A5               	movwf	Print_HEX2Str@wOneByte
 17966                           
 17967                           ;main.c: 1499: EUSART_Write(wOneByte);
 17968  1F35  0825               	movf	Print_HEX2Str@wOneByte,w
 17969  1F36  319B  2366  319F   	fcall	_EUSART_Write
 17970                           
 17971                           ;main.c: 1501: HexCal = InputVol % 16;
 17972  1F39  0020               	movlb	0	; select bank0
 17973  1F3A  0824               	movf	Print_HEX2Str@InputVol,w
 17974  1F3B  390F               	andlw	15
 17975  1F3C  00F8               	movwf	??_Print_HEX2Str
 17976  1F3D  01F9               	clrf	??_Print_HEX2Str+1
 17977  1F3E  0878               	movf	??_Print_HEX2Str,w
 17978  1F3F  00A6               	movwf	Print_HEX2Str@HexCal
 17979  1F40  0879               	movf	??_Print_HEX2Str+1,w
 17980  1F41  00A7               	movwf	Print_HEX2Str@HexCal+1
 17981                           
 17982                           ;main.c: 1502: if(HexCal >= 10)
 17983  1F42  3000               	movlw	0
 17984  1F43  0227               	subwf	Print_HEX2Str@HexCal+1,w
 17985  1F44  300A               	movlw	10
 17986  1F45  1903               	skipnz
 17987  1F46  0226               	subwf	Print_HEX2Str@HexCal,w
 17988  1F47  1C03               	skipc
 17989  1F48  2F4C               	goto	l6748
 17990                           
 17991                           ;main.c: 1503: wOneByte = 'A'+ HexCal-10;
 17992  1F49  0826               	movf	Print_HEX2Str@HexCal,w
 17993  1F4A  3E37               	addlw	55
 17994  1F4B  2F4E               	goto	L12
 17995  1F4C                     l6748:	
 17996                           
 17997                           ;main.c: 1504: else
 17998                           ;main.c: 1505: wOneByte = '0'+ HexCal;
 17999  1F4C  0826               	movf	Print_HEX2Str@HexCal,w
 18000  1F4D  3E30               	addlw	48
 18001  1F4E                     L12:	
 18002  1F4E  00F8               	movwf	??_Print_HEX2Str
 18003  1F4F  0878               	movf	??_Print_HEX2Str,w
 18004  1F50  00A5               	movwf	Print_HEX2Str@wOneByte
 18005                           
 18006                           ;main.c: 1506: EUSART_Write(wOneByte);
 18007  1F51  0825               	movf	Print_HEX2Str@wOneByte,w
 18008  1F52  319B  2366  319F   	fcall	_EUSART_Write
 18009                           
 18010                           ;main.c: 1508: if(Chgln == 1)
 18011  1F55  0377               	decf	Print_HEX2Str@Chgln,w
 18012  1F56  1D03               	btfss	3,2
 18013  1F57  0008               	return
 18014                           
 18015                           ;main.c: 1509: Print_CHLN();
 18016  1F58  3199  211C         	fcall	_Print_CHLN
 18017  1F5A  0008               	return
 18018  1F5B                     __end_of_Print_HEX2Str:	
 18019                           
 18020                           	psect	text58
 18021  1F5B                     __ptext58:	
 18022 ;; *************** function ___awdiv *****************
 18023 ;; Defined at:
 18024 ;;		line 6 in file "/Applications/microchip/xc8/v1.35/sources/common/awdiv.c"
 18025 ;; Parameters:    Size  Location     Type
 18026 ;;  divisor         2    2[COMMON] int 
 18027 ;;  dividend        2    4[COMMON] int 
 18028 ;; Auto vars:     Size  Location     Type
 18029 ;;  quotient        2    2[BANK0 ] int 
 18030 ;;  sign            1    1[BANK0 ] unsigned char 
 18031 ;;  counter         1    0[BANK0 ] unsigned char 
 18032 ;; Return value:  Size  Location     Type
 18033 ;;                  2    2[COMMON] int 
 18034 ;; Registers used:
 18035 ;;		wreg, status,2, status,0
 18036 ;; Tracked objects:
 18037 ;;		On entry : 0/0
 18038 ;;		On exit  : 0/0
 18039 ;;		Unchanged: 0/0
 18040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18041 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18042 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18043 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18044 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18045 ;;Total ram usage:        9 bytes
 18046 ;; Hardware stack levels used:    1
 18047 ;; Hardware stack levels required when called:    3
 18048 ;; This function calls:
 18049 ;;		Nothing
 18050 ;; This function is called by:
 18051 ;;		_Print_HEX2Str
 18052 ;;		_Print_HMS
 18053 ;;		_Print_YMD
 18054 ;;		_Convert_2HB
 18055 ;;		_Covert_BDC_2_OCT
 18056 ;;		_Print_OCT2Str
 18057 ;; This function uses a non-reentrant model
 18058 ;;
 18059                           
 18060                           
 18061                           ;psect for function ___awdiv
 18062  1F5B                     ___awdiv:	
 18063                           
 18064                           ;incstack = 0
 18065                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18066  1F5B  0020               	movlb	0	; select bank0
 18067  1F5C  01A1               	clrf	___awdiv@sign
 18068  1F5D  1FF3               	btfss	___awdiv@divisor+1,7
 18069  1F5E  2F66               	goto	l6528
 18070  1F5F  09F2               	comf	___awdiv@divisor,f
 18071  1F60  09F3               	comf	___awdiv@divisor+1,f
 18072  1F61  0AF2               	incf	___awdiv@divisor,f
 18073  1F62  1903               	skipnz
 18074  1F63  0AF3               	incf	___awdiv@divisor+1,f
 18075  1F64  01A1               	clrf	___awdiv@sign
 18076  1F65  0AA1               	incf	___awdiv@sign,f
 18077  1F66                     l6528:	
 18078  1F66  1FF5               	btfss	___awdiv@dividend+1,7
 18079  1F67  2F71               	goto	l6534
 18080  1F68  09F4               	comf	___awdiv@dividend,f
 18081  1F69  09F5               	comf	___awdiv@dividend+1,f
 18082  1F6A  0AF4               	incf	___awdiv@dividend,f
 18083  1F6B  1903               	skipnz
 18084  1F6C  0AF5               	incf	___awdiv@dividend+1,f
 18085  1F6D  3001               	movlw	1
 18086  1F6E  00F6               	movwf	??___awdiv
 18087  1F6F  0876               	movf	??___awdiv,w
 18088  1F70  06A1               	xorwf	___awdiv@sign,f
 18089  1F71                     l6534:	
 18090  1F71  01A2               	clrf	___awdiv@quotient
 18091  1F72  01A3               	clrf	___awdiv@quotient+1
 18092  1F73  0872               	movf	___awdiv@divisor,w
 18093  1F74  0473               	iorwf	___awdiv@divisor+1,w
 18094  1F75  1903               	btfsc	3,2
 18095  1F76  2FA0               	goto	l6556
 18096  1F77  01A0               	clrf	___awdiv@counter
 18097  1F78  0AA0               	incf	___awdiv@counter,f
 18098  1F79                     l6544:	
 18099  1F79  1BF3               	btfsc	___awdiv@divisor+1,7
 18100  1F7A  2F85               	goto	l6546
 18101  1F7B  3001               	movlw	1
 18102  1F7C                     u6945:	
 18103  1F7C  35F2               	lslf	___awdiv@divisor,f
 18104  1F7D  0DF3               	rlf	___awdiv@divisor+1,f
 18105  1F7E  0B89               	decfsz	9,f
 18106  1F7F  2F7C               	goto	u6945
 18107  1F80  3001               	movlw	1
 18108  1F81  00F6               	movwf	??___awdiv
 18109  1F82  0876               	movf	??___awdiv,w
 18110  1F83  07A0               	addwf	___awdiv@counter,f
 18111  1F84  2F79               	goto	l6544
 18112  1F85                     l6546:	
 18113  1F85  3001               	movlw	1
 18114  1F86                     u6965:	
 18115  1F86  35A2               	lslf	___awdiv@quotient,f
 18116  1F87  0DA3               	rlf	___awdiv@quotient+1,f
 18117  1F88  0B89               	decfsz	9,f
 18118  1F89  2F86               	goto	u6965
 18119  1F8A  0873               	movf	___awdiv@divisor+1,w
 18120  1F8B  0275               	subwf	___awdiv@dividend+1,w
 18121  1F8C  1D03               	skipz
 18122  1F8D  2F90               	goto	u6975
 18123  1F8E  0872               	movf	___awdiv@divisor,w
 18124  1F8F  0274               	subwf	___awdiv@dividend,w
 18125  1F90                     u6975:	
 18126  1F90  1C03               	skipc
 18127  1F91  2F97               	goto	l6552
 18128  1F92  0872               	movf	___awdiv@divisor,w
 18129  1F93  02F4               	subwf	___awdiv@dividend,f
 18130  1F94  0873               	movf	___awdiv@divisor+1,w
 18131  1F95  3BF5               	subwfb	___awdiv@dividend+1,f
 18132  1F96  1422               	bsf	___awdiv@quotient,0
 18133  1F97                     l6552:	
 18134  1F97  3001               	movlw	1
 18135  1F98                     u6985:	
 18136  1F98  36F3               	lsrf	___awdiv@divisor+1,f
 18137  1F99  0CF2               	rrf	___awdiv@divisor,f
 18138  1F9A  0B89               	decfsz	9,f
 18139  1F9B  2F98               	goto	u6985
 18140  1F9C  3001               	movlw	1
 18141  1F9D  02A0               	subwf	___awdiv@counter,f
 18142  1F9E  1D03               	btfss	3,2
 18143  1F9F  2F85               	goto	l6546
 18144  1FA0                     l6556:	
 18145  1FA0  0821               	movf	___awdiv@sign,w
 18146  1FA1  1903               	btfsc	3,2
 18147  1FA2  2FA8               	goto	l6560
 18148  1FA3  09A2               	comf	___awdiv@quotient,f
 18149  1FA4  09A3               	comf	___awdiv@quotient+1,f
 18150  1FA5  0AA2               	incf	___awdiv@quotient,f
 18151  1FA6  1903               	skipnz
 18152  1FA7  0AA3               	incf	___awdiv@quotient+1,f
 18153  1FA8                     l6560:	
 18154  1FA8  0823               	movf	___awdiv@quotient+1,w
 18155  1FA9  00F3               	movwf	?___awdiv+1
 18156  1FAA  0822               	movf	___awdiv@quotient,w
 18157  1FAB  00F2               	movwf	?___awdiv
 18158  1FAC  0008               	return
 18159  1FAD                     __end_of___awdiv:	
 18160                           
 18161                           	psect	text59
 18162  191C                     __ptext59:	
 18163 ;; *************** function _Print_CHLN *****************
 18164 ;; Defined at:
 18165 ;;		line 1402 in file "main.c"
 18166 ;; Parameters:    Size  Location     Type
 18167 ;;		None
 18168 ;; Auto vars:     Size  Location     Type
 18169 ;;		None
 18170 ;; Return value:  Size  Location     Type
 18171 ;;		None               void
 18172 ;; Registers used:
 18173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18174 ;; Tracked objects:
 18175 ;;		On entry : 0/0
 18176 ;;		On exit  : 0/0
 18177 ;;		Unchanged: 0/0
 18178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18183 ;;Total ram usage:        0 bytes
 18184 ;; Hardware stack levels used:    1
 18185 ;; Hardware stack levels required when called:    4
 18186 ;; This function calls:
 18187 ;;		_EUSART_Write
 18188 ;; This function is called by:
 18189 ;;		_main
 18190 ;;		_Decode_RS232_CMD
 18191 ;;		_RUN_MESURE
 18192 ;;		_Print_BreakLine
 18193 ;;		_Print_String
 18194 ;;		_Print_uint16Str
 18195 ;;		_Print_HEX2Str
 18196 ;;		_Print_HMS
 18197 ;;		_TEST_PIC_ALL
 18198 ;;		_print_RTC
 18199 ;;		_PIC_SYNC_ADO_RTC
 18200 ;;		_PIC_SYNC_ADO_ULSR
 18201 ;; This function uses a non-reentrant model
 18202 ;;
 18203                           
 18204                           
 18205                           ;psect for function _Print_CHLN
 18206  191C                     _Print_CHLN:	
 18207                           
 18208                           ;main.c: 1404: EUSART_Write(0x0d);
 18209                           
 18210                           ;incstack = 0
 18211                           ; Regs used in _Print_CHLN: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18212  191C  300D               	movlw	13
 18213  191D  319B  2366  3199   	fcall	_EUSART_Write
 18214                           
 18215                           ;main.c: 1405: EUSART_Write(0x0a);
 18216  1920  300A               	movlw	10
 18217  1921  319B  2366         	fcall	_EUSART_Write
 18218  1923  0008               	return
 18219  1924                     __end_of_Print_CHLN:	
 18220                           
 18221                           	psect	text60
 18222  1B66                     __ptext60:	
 18223 ;; *************** function _EUSART_Write *****************
 18224 ;; Defined at:
 18225 ;;		line 132 in file "mcc_generated_files/eusart.c"
 18226 ;; Parameters:    Size  Location     Type
 18227 ;;  txData          1    wreg     unsigned char 
 18228 ;; Auto vars:     Size  Location     Type
 18229 ;;  txData          1    3[COMMON] unsigned char 
 18230 ;; Return value:  Size  Location     Type
 18231 ;;		None               void
 18232 ;; Registers used:
 18233 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18234 ;; Tracked objects:
 18235 ;;		On entry : 0/0
 18236 ;;		On exit  : 0/0
 18237 ;;		Unchanged: 0/0
 18238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18240 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18241 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18242 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18243 ;;Total ram usage:        2 bytes
 18244 ;; Hardware stack levels used:    1
 18245 ;; Hardware stack levels required when called:    3
 18246 ;; This function calls:
 18247 ;;		Nothing
 18248 ;; This function is called by:
 18249 ;;		_Print_CHLN
 18250 ;;		_Print_BreakLine
 18251 ;;		_Print_String
 18252 ;;		_Print_uint16Str
 18253 ;;		_Print_HEX2Str
 18254 ;;		_Print_HMS
 18255 ;;		_Print_YMD
 18256 ;;		_Print_OCT2Str
 18257 ;; This function uses a non-reentrant model
 18258 ;;
 18259                           
 18260                           
 18261                           ;psect for function _EUSART_Write
 18262  1B66                     _EUSART_Write:	
 18263                           
 18264                           ;incstack = 0
 18265                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 18266                           ;EUSART_Write@txData stored from wreg
 18267  1B66  00F3               	movwf	EUSART_Write@txData
 18268  1B67                     l6504:	
 18269                           ;eusart.c: 133: while (0 == eusartTxBufferRemaining) {
 18270                           
 18271  1B67  0022               	movlb	2	; select bank2
 18272  1B68  086E               	movf	_eusartTxBufferRemaining^(0+256),w	;volatile
 18273  1B69  1903               	btfsc	3,2
 18274  1B6A  2B67               	goto	l6504
 18275                           
 18276                           ;eusart.c: 134: }
 18277                           ;eusart.c: 136: if (0 == PIE1bits.TXIE) {
 18278  1B6B  0021               	movlb	1	; select bank1
 18279  1B6C  1A11               	btfsc	17,4	;volatile
 18280  1B6D  2B72               	goto	l167
 18281                           
 18282                           ;eusart.c: 137: TX1REG = txData;
 18283  1B6E  0873               	movf	EUSART_Write@txData,w
 18284  1B6F  0023               	movlb	3	; select bank3
 18285  1B70  009A               	movwf	26	;volatile
 18286                           
 18287                           ;eusart.c: 138: } else {
 18288  1B71  2B87               	goto	l6518
 18289  1B72                     l167:	
 18290                           
 18291                           ;eusart.c: 139: PIE1bits.TXIE = 0;
 18292  1B72  1211               	bcf	17,4	;volatile
 18293                           
 18294                           ;eusart.c: 140: eusartTxBuffer[eusartTxHead++] = txData;
 18295  1B73  0873               	movf	EUSART_Write@txData,w
 18296  1B74  00F2               	movwf	??_EUSART_Write
 18297  1B75  086C               	movf	_eusartTxHead^(0+128),w
 18298  1B76  3E30               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 18299  1B77  0086               	movwf	6
 18300  1B78  3001               	movlw	1	; select bank2/3
 18301  1B79  0087               	movwf	7
 18302  1B7A  0872               	movf	??_EUSART_Write,w
 18303  1B7B  0081               	movwf	1
 18304  1B7C  3001               	movlw	1
 18305  1B7D  00F2               	movwf	??_EUSART_Write
 18306  1B7E  0872               	movf	??_EUSART_Write,w
 18307  1B7F  07EC               	addwf	_eusartTxHead^(0+128),f
 18308                           
 18309                           ;eusart.c: 141: if (sizeof (eusartTxBuffer) <= eusartTxHead) {
 18310  1B80  3008               	movlw	8
 18311  1B81  026C               	subwf	_eusartTxHead^(0+128),w
 18312  1B82  1803               	btfsc	3,0
 18313                           
 18314                           ;eusart.c: 142: eusartTxHead = 0;
 18315  1B83  01EC               	clrf	_eusartTxHead^(0+128)
 18316                           
 18317                           ;eusart.c: 143: }
 18318                           ;eusart.c: 144: eusartTxBufferRemaining--;
 18319  1B84  3001               	movlw	1
 18320  1B85  0022               	movlb	2	; select bank2
 18321  1B86  02EE               	subwf	_eusartTxBufferRemaining^(0+256),f	;volatile
 18322  1B87                     l6518:	
 18323                           
 18324                           ;eusart.c: 145: }
 18325                           ;eusart.c: 146: PIE1bits.TXIE = 1;
 18326  1B87  0021               	movlb	1	; select bank1
 18327  1B88  1611               	bsf	17,4	;volatile
 18328  1B89  0008               	return
 18329  1B8A                     __end_of_EUSART_Write:	
 18330                           
 18331                           	psect	text61
 18332  1DBD                     __ptext61:	
 18333 ;; *************** function _I2C_WRITE_8BIT *****************
 18334 ;; Defined at:
 18335 ;;		line 2285 in file "main.c"
 18336 ;; Parameters:    Size  Location     Type
 18337 ;;  value           1    wreg     unsigned char 
 18338 ;; Auto vars:     Size  Location     Type
 18339 ;;  value           1    3[COMMON] unsigned char 
 18340 ;;  ack             1    5[COMMON] unsigned char 
 18341 ;;  i               1    4[COMMON] unsigned char 
 18342 ;; Return value:  Size  Location     Type
 18343 ;;                  1    wreg      unsigned char 
 18344 ;; Registers used:
 18345 ;;		wreg, status,2, status,0, pclath, cstack
 18346 ;; Tracked objects:
 18347 ;;		On entry : 0/0
 18348 ;;		On exit  : 0/0
 18349 ;;		Unchanged: 0/0
 18350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18352 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18353 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18354 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18355 ;;Total ram usage:        4 bytes
 18356 ;; Hardware stack levels used:    1
 18357 ;; Hardware stack levels required when called:    5
 18358 ;; This function calls:
 18359 ;;		_I2C_Dealy_1
 18360 ;;		_I2C_Dealy_2
 18361 ;; This function is called by:
 18362 ;;		_I2C_PAGE_WRITE
 18363 ;;		_I2C_Sequential_READ
 18364 ;;		_I2C_mWrite
 18365 ;;		_I2C_mREAD
 18366 ;;		_I2C_BYTE_WRITE
 18367 ;;		_I2C_RANDOM_READ
 18368 ;; This function uses a non-reentrant model
 18369 ;;
 18370                           
 18371                           
 18372                           ;psect for function _I2C_WRITE_8BIT
 18373  1DBD                     _I2C_WRITE_8BIT:	
 18374                           
 18375                           ;incstack = 0
 18376                           ; Regs used in _I2C_WRITE_8BIT: [wreg+status,2+status,0+pclath+cstack]
 18377                           ;I2C_WRITE_8BIT@value stored from wreg
 18378  1DBD  00F3               	movwf	I2C_WRITE_8BIT@value
 18379                           
 18380                           ;main.c: 2287: uint8_t i=9;
 18381  1DBE  3009               	movlw	9
 18382  1DBF  00F2               	movwf	??_I2C_WRITE_8BIT
 18383  1DC0  0872               	movf	??_I2C_WRITE_8BIT,w
 18384  1DC1  00F4               	movwf	I2C_WRITE_8BIT@i
 18385                           
 18386                           ;main.c: 2288: uint8_t ack = 1;
 18387  1DC2  01F5               	clrf	I2C_WRITE_8BIT@ack
 18388  1DC3  0AF5               	incf	I2C_WRITE_8BIT@ack,f
 18389  1DC4                     l4326:	
 18390                           ;main.c: 2290: while(--i)
 18391                           
 18392  1DC4  3001               	movlw	1
 18393  1DC5  02F4               	subwf	I2C_WRITE_8BIT@i,f
 18394  1DC6  1903               	btfsc	3,2
 18395  1DC7  2DDF               	goto	l4328
 18396                           
 18397                           ;main.c: 2291: {
 18398                           ;main.c: 2293: I2C_Dealy_2();
 18399  1DC8  3198  20DC  319D   	fcall	_I2C_Dealy_2
 18400                           
 18401                           ;main.c: 2295: if(value & 0x80)
 18402  1DCB  1FF3               	btfss	I2C_WRITE_8BIT@value,7
 18403  1DCC  2DD0               	goto	l1015
 18404                           
 18405                           ;main.c: 2296: do { LATC4 = 1; } while(0);
 18406  1DCD  0022               	movlb	2	; select bank2
 18407  1DCE  160E               	bsf	14,4	;volatile
 18408  1DCF  2DD2               	goto	l4318
 18409  1DD0                     l1015:	
 18410                           ;main.c: 2297: else
 18411                           ;main.c: 2298: do { LATC4 = 0; } while(0);
 18412                           
 18413  1DD0  0022               	movlb	2	; select bank2
 18414  1DD1  120E               	bcf	14,4	;volatile
 18415  1DD2                     l4318:	
 18416                           
 18417                           ;main.c: 2301: I2C_Dealy_2();
 18418  1DD2  3198  20DC  319D   	fcall	_I2C_Dealy_2
 18419                           
 18420                           ;main.c: 2304: do { LATC3 = 1; } while(0);
 18421  1DD5  0022               	movlb	2	; select bank2
 18422  1DD6  158E               	bsf	14,3	;volatile
 18423                           
 18424                           ;main.c: 2305: I2C_Dealy_1();
 18425  1DD7  3199  2104  319D   	fcall	_I2C_Dealy_1
 18426                           
 18427                           ;main.c: 2307: value <<= 1;
 18428  1DDA  1003               	clrc
 18429  1DDB  0DF3               	rlf	I2C_WRITE_8BIT@value,f
 18430                           
 18431                           ;main.c: 2308: do { LATC3 = 0; } while(0);
 18432  1DDC  0022               	movlb	2	; select bank2
 18433  1DDD  118E               	bcf	14,3	;volatile
 18434  1DDE  2DC4               	goto	l4326
 18435  1DDF                     l4328:	
 18436                           
 18437                           ;main.c: 2309: }
 18438                           ;main.c: 2312: I2C_Dealy_2();
 18439  1DDF  3198  20DC  319D   	fcall	_I2C_Dealy_2
 18440                           
 18441                           ;main.c: 2313: do { LATC4 = 1; } while(0);
 18442  1DE2  0022               	movlb	2	; select bank2
 18443  1DE3  160E               	bsf	14,4	;volatile
 18444                           
 18445                           ;main.c: 2314: do { TRISC4 = 1; } while(0);
 18446  1DE4  0021               	movlb	1	; select bank1
 18447  1DE5  160E               	bsf	14,4	;volatile
 18448                           
 18449                           ;main.c: 2316: I2C_Dealy_2();
 18450  1DE6  3198  20DC  319D   	fcall	_I2C_Dealy_2
 18451                           
 18452                           ;main.c: 2317: do { LATC3 = 1; } while(0);
 18453  1DE9  0022               	movlb	2	; select bank2
 18454  1DEA  158E               	bsf	14,3	;volatile
 18455                           
 18456                           ;main.c: 2330: I2C_Dealy_1();
 18457  1DEB  3199  2104  319D   	fcall	_I2C_Dealy_1
 18458                           
 18459                           ;main.c: 2331: ack = RC4;
 18460  1DEE  3000               	movlw	0
 18461  1DEF  0020               	movlb	0	; select bank0
 18462  1DF0  1A0E               	btfsc	14,4	;volatile
 18463  1DF1  3001               	movlw	1
 18464  1DF2  00F5               	movwf	I2C_WRITE_8BIT@ack
 18465                           
 18466                           ;main.c: 2333: do { TRISC4 = 0; } while(0);
 18467  1DF3  0021               	movlb	1	; select bank1
 18468  1DF4  120E               	bcf	14,4	;volatile
 18469                           
 18470                           ;main.c: 2334: I2C_Dealy_2();
 18471  1DF5  3198  20DC         	fcall	_I2C_Dealy_2
 18472                           
 18473                           ;main.c: 2335: do { LATC3 = 0; } while(0);
 18474  1DF7  0022               	movlb	2	; select bank2
 18475  1DF8  118E               	bcf	14,3	;volatile
 18476                           
 18477                           ;main.c: 2337: return ack;
 18478  1DF9  0875               	movf	I2C_WRITE_8BIT@ack,w
 18479  1DFA  0008               	return
 18480  1DFB                     __end_of_I2C_WRITE_8BIT:	
 18481                           
 18482                           	psect	text62
 18483  1979                     __ptext62:	
 18484 ;; *************** function _I2C_STOP_BIT *****************
 18485 ;; Defined at:
 18486 ;;		line 2264 in file "main.c"
 18487 ;; Parameters:    Size  Location     Type
 18488 ;;		None
 18489 ;; Auto vars:     Size  Location     Type
 18490 ;;		None
 18491 ;; Return value:  Size  Location     Type
 18492 ;;		None               void
 18493 ;; Registers used:
 18494 ;;		status,2, status,0, pclath, cstack
 18495 ;; Tracked objects:
 18496 ;;		On entry : 0/0
 18497 ;;		On exit  : 0/0
 18498 ;;		Unchanged: 0/0
 18499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18504 ;;Total ram usage:        0 bytes
 18505 ;; Hardware stack levels used:    1
 18506 ;; Hardware stack levels required when called:    5
 18507 ;; This function calls:
 18508 ;;		_I2C_Dealy_2
 18509 ;; This function is called by:
 18510 ;;		_I2C_PAGE_WRITE
 18511 ;;		_I2C_Sequential_READ
 18512 ;;		_I2C_mWrite
 18513 ;;		_I2C_mREAD
 18514 ;;		_I2C_BYTE_WRITE
 18515 ;;		_I2C_RANDOM_READ
 18516 ;; This function uses a non-reentrant model
 18517 ;;
 18518                           
 18519                           
 18520                           ;psect for function _I2C_STOP_BIT
 18521  1979                     _I2C_STOP_BIT:	
 18522                           
 18523                           ;main.c: 2268: I2C_Dealy_2();
 18524                           
 18525                           ;incstack = 0
 18526                           ; Regs used in _I2C_STOP_BIT: [status,2+status,0+pclath+cstack]
 18527  1979  3198  20DC  3199   	fcall	_I2C_Dealy_2
 18528                           
 18529                           ;main.c: 2269: do { LATC4 = 0; } while(0);
 18530  197C  0022               	movlb	2	; select bank2
 18531  197D  120E               	bcf	14,4	;volatile
 18532                           
 18533                           ;main.c: 2270: I2C_Dealy_2();
 18534  197E  3198  20DC  3199   	fcall	_I2C_Dealy_2
 18535                           
 18536                           ;main.c: 2271: do { LATC3 = 1; } while(0);
 18537  1981  0022               	movlb	2	; select bank2
 18538  1982  158E               	bsf	14,3	;volatile
 18539                           
 18540                           ;main.c: 2272: I2C_Dealy_2();
 18541  1983  3198  20DC         	fcall	_I2C_Dealy_2
 18542                           
 18543                           ;main.c: 2273: do { LATC4 = 1; } while(0);
 18544  1985  0022               	movlb	2	; select bank2
 18545  1986  160E               	bsf	14,4	;volatile
 18546  1987  0008               	return
 18547  1988                     __end_of_I2C_STOP_BIT:	
 18548                           
 18549                           	psect	text63
 18550  196C                     __ptext63:	
 18551 ;; *************** function _I2C_START_BIT *****************
 18552 ;; Defined at:
 18553 ;;		line 2238 in file "main.c"
 18554 ;; Parameters:    Size  Location     Type
 18555 ;;		None
 18556 ;; Auto vars:     Size  Location     Type
 18557 ;;		None
 18558 ;; Return value:  Size  Location     Type
 18559 ;;		None               void
 18560 ;; Registers used:
 18561 ;;		status,2, status,0, pclath, cstack
 18562 ;; Tracked objects:
 18563 ;;		On entry : 0/0
 18564 ;;		On exit  : 0/0
 18565 ;;		Unchanged: 0/0
 18566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18571 ;;Total ram usage:        0 bytes
 18572 ;; Hardware stack levels used:    1
 18573 ;; Hardware stack levels required when called:    5
 18574 ;; This function calls:
 18575 ;;		_I2C_Dealy_1
 18576 ;;		_I2C_Dealy_2
 18577 ;; This function is called by:
 18578 ;;		_I2C_PAGE_WRITE
 18579 ;;		_I2C_Sequential_READ
 18580 ;;		_I2C_mWrite
 18581 ;;		_I2C_mREAD
 18582 ;;		_I2C_BYTE_WRITE
 18583 ;;		_I2C_RANDOM_READ
 18584 ;; This function uses a non-reentrant model
 18585 ;;
 18586                           
 18587                           
 18588                           ;psect for function _I2C_START_BIT
 18589  196C                     _I2C_START_BIT:	
 18590                           
 18591                           ;incstack = 0
 18592                           ; Regs used in _I2C_START_BIT: [status,2+status,0+pclath+cstack]
 18593                           ;main.c: 2242: do { LATC4 = 1; } while(0);
 18594  196C  0022               	movlb	2	; select bank2
 18595  196D  160E               	bsf	14,4	;volatile
 18596                           
 18597                           ;main.c: 2243: do { LATC3 = 1; } while(0);
 18598  196E  158E               	bsf	14,3	;volatile
 18599                           
 18600                           ;main.c: 2244: I2C_Dealy_1();
 18601  196F  3199  2104  3199   	fcall	_I2C_Dealy_1
 18602                           
 18603                           ;main.c: 2247: do { LATC4 = 0; } while(0);
 18604  1972  0022               	movlb	2	; select bank2
 18605  1973  120E               	bcf	14,4	;volatile
 18606                           
 18607                           ;main.c: 2248: I2C_Dealy_2();
 18608  1974  3198  20DC         	fcall	_I2C_Dealy_2
 18609                           
 18610                           ;main.c: 2249: do { LATC3 = 0; } while(0);
 18611  1976  0022               	movlb	2	; select bank2
 18612  1977  118E               	bcf	14,3	;volatile
 18613  1978  0008               	return
 18614  1979                     __end_of_I2C_START_BIT:	
 18615                           
 18616                           	psect	text64
 18617  18DC                     __ptext64:	
 18618 ;; *************** function _I2C_Dealy_2 *****************
 18619 ;; Defined at:
 18620 ;;		line 2221 in file "main.c"
 18621 ;; Parameters:    Size  Location     Type
 18622 ;;		None
 18623 ;; Auto vars:     Size  Location     Type
 18624 ;;		None
 18625 ;; Return value:  Size  Location     Type
 18626 ;;		None               void
 18627 ;; Registers used:
 18628 ;;		status,2, status,0, pclath, cstack
 18629 ;; Tracked objects:
 18630 ;;		On entry : 0/0
 18631 ;;		On exit  : 0/0
 18632 ;;		Unchanged: 0/0
 18633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18638 ;;Total ram usage:        0 bytes
 18639 ;; Hardware stack levels used:    1
 18640 ;; Hardware stack levels required when called:    4
 18641 ;; This function calls:
 18642 ;;		_Delay5us
 18643 ;; This function is called by:
 18644 ;;		_I2C_START_BIT
 18645 ;;		_I2C_STOP_BIT
 18646 ;;		_I2C_WRITE_8BIT
 18647 ;;		_I2C_READ_8BIT
 18648 ;; This function uses a non-reentrant model
 18649 ;;
 18650                           
 18651                           
 18652                           ;psect for function _I2C_Dealy_2
 18653  18DC                     _I2C_Dealy_2:	
 18654                           
 18655                           ;main.c: 2223: Delay5us();
 18656                           
 18657                           ;incstack = 0
 18658                           ; Regs used in _I2C_Dealy_2: [status,2+status,0+pclath+cstack]
 18659  18DC  3180  2002         	fcall	_Delay5us
 18660  18DE  0008               	return
 18661  18DF                     __end_of_I2C_Dealy_2:	
 18662                           
 18663                           	psect	text65
 18664  1904                     __ptext65:	
 18665 ;; *************** function _I2C_Dealy_1 *****************
 18666 ;; Defined at:
 18667 ;;		line 2210 in file "main.c"
 18668 ;; Parameters:    Size  Location     Type
 18669 ;;		None
 18670 ;; Auto vars:     Size  Location     Type
 18671 ;;		None
 18672 ;; Return value:  Size  Location     Type
 18673 ;;		None               void
 18674 ;; Registers used:
 18675 ;;		status,2, status,0, pclath, cstack
 18676 ;; Tracked objects:
 18677 ;;		On entry : 0/0
 18678 ;;		On exit  : 0/0
 18679 ;;		Unchanged: 0/0
 18680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18685 ;;Total ram usage:        0 bytes
 18686 ;; Hardware stack levels used:    1
 18687 ;; Hardware stack levels required when called:    4
 18688 ;; This function calls:
 18689 ;;		_Delay5us
 18690 ;; This function is called by:
 18691 ;;		_I2C_START_BIT
 18692 ;;		_I2C_WRITE_8BIT
 18693 ;;		_I2C_READ_8BIT
 18694 ;; This function uses a non-reentrant model
 18695 ;;
 18696                           
 18697                           
 18698                           ;psect for function _I2C_Dealy_1
 18699  1904                     _I2C_Dealy_1:	
 18700                           
 18701                           ;main.c: 2212: Delay5us();
 18702                           
 18703                           ;incstack = 0
 18704                           ; Regs used in _I2C_Dealy_1: [status,2+status,0+pclath+cstack]
 18705  1904  3180  2002  3199   	fcall	_Delay5us
 18706                           
 18707                           ;main.c: 2213: Delay5us();
 18708  1907  3180  2002         	fcall	_Delay5us
 18709  1909  0008               	return
 18710  190A                     __end_of_I2C_Dealy_1:	
 18711                           
 18712                           	psect	text66
 18713  0002                     __ptext66:	
 18714 ;; *************** function _Delay5us *****************
 18715 ;; Defined at:
 18716 ;;		line 1782 in file "main.c"
 18717 ;; Parameters:    Size  Location     Type
 18718 ;;		None
 18719 ;; Auto vars:     Size  Location     Type
 18720 ;;		None
 18721 ;; Return value:  Size  Location     Type
 18722 ;;		None               void
 18723 ;; Registers used:
 18724 ;;		None
 18725 ;; Tracked objects:
 18726 ;;		On entry : 0/0
 18727 ;;		On exit  : 0/0
 18728 ;;		Unchanged: 0/0
 18729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18734 ;;Total ram usage:        0 bytes
 18735 ;; Hardware stack levels used:    1
 18736 ;; Hardware stack levels required when called:    3
 18737 ;; This function calls:
 18738 ;;		Nothing
 18739 ;; This function is called by:
 18740 ;;		_DS18B20_Write
 18741 ;;		_DS18B20_Read
 18742 ;;		_I2C_Dealy_1
 18743 ;;		_I2C_Dealy_2
 18744 ;; This function uses a non-reentrant model
 18745 ;;
 18746                           
 18747                           
 18748                           ;psect for function _Delay5us
 18749  0002                     _Delay5us:	
 18750                           
 18751                           ;incstack = 0
 18752                           ; Regs used in _Delay5us: []
 18753  0002  0008               	return
 18754  0003                     __end_of_Delay5us:	
 18755                           
 18756                           	psect	text67
 18757  1A72                     __ptext67:	
 18758 ;; *************** function _DATAEE_WriteByte *****************
 18759 ;; Defined at:
 18760 ;;		line 173 in file "mcc_generated_files/memory.c"
 18761 ;; Parameters:    Size  Location     Type
 18762 ;;  bAdd            1    wreg     unsigned char 
 18763 ;;  bData           1    2[COMMON] unsigned char 
 18764 ;; Auto vars:     Size  Location     Type
 18765 ;;  bAdd            1    3[COMMON] unsigned char 
 18766 ;;  GIEBitValue     1    4[COMMON] unsigned char 
 18767 ;; Return value:  Size  Location     Type
 18768 ;;		None               void
 18769 ;; Registers used:
 18770 ;;		wreg, status,2
 18771 ;; Tracked objects:
 18772 ;;		On entry : 0/0
 18773 ;;		On exit  : 0/0
 18774 ;;		Unchanged: 0/0
 18775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18776 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18777 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18779 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18780 ;;Total ram usage:        3 bytes
 18781 ;; Hardware stack levels used:    1
 18782 ;; Hardware stack levels required when called:    3
 18783 ;; This function calls:
 18784 ;;		Nothing
 18785 ;; This function is called by:
 18786 ;;		_Decode_RS232_CMD
 18787 ;;		_Save_QMD_EEPROM
 18788 ;; This function uses a non-reentrant model
 18789 ;;
 18790                           
 18791                           
 18792                           ;psect for function _DATAEE_WriteByte
 18793  1A72                     _DATAEE_WriteByte:	
 18794                           
 18795                           ;incstack = 0
 18796                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2]
 18797                           ;DATAEE_WriteByte@bAdd stored from wreg
 18798  1A72  00F3               	movwf	DATAEE_WriteByte@bAdd
 18799                           
 18800                           ;memory.c: 174: uint8_t GIEBitValue = 0;
 18801  1A73  01F4               	clrf	DATAEE_WriteByte@GIEBitValue
 18802                           
 18803                           ;memory.c: 176: EEADRL = (bAdd & 0x0ff);
 18804  1A74  0873               	movf	DATAEE_WriteByte@bAdd,w
 18805  1A75  0023               	movlb	3	; select bank3
 18806  1A76  0091               	movwf	17	;volatile
 18807                           
 18808                           ;memory.c: 177: EEDATL = bData;
 18809  1A77  0872               	movf	DATAEE_WriteByte@bData,w
 18810  1A78  0093               	movwf	19	;volatile
 18811                           
 18812                           ;memory.c: 178: EECON1bits.EEPGD = 0;
 18813  1A79  1395               	bcf	21,7	;volsfr
 18814                           
 18815                           ;memory.c: 179: EECON1bits.CFGS = 0;
 18816  1A7A  1315               	bcf	21,6	;volsfr
 18817                           
 18818                           ;memory.c: 180: EECON1bits.WREN = 1;
 18819  1A7B  1515               	bsf	21,2	;volsfr
 18820                           
 18821                           ;memory.c: 182: GIEBitValue = INTCONbits.GIE;
 18822  1A7C  3000               	movlw	0
 18823  1A7D  1B8B               	btfsc	11,7	;volatile
 18824  1A7E  3001               	movlw	1
 18825  1A7F  00F4               	movwf	DATAEE_WriteByte@GIEBitValue
 18826                           
 18827                           ;memory.c: 183: INTCONbits.GIE = 0;
 18828  1A80  138B               	bcf	11,7	;volatile
 18829                           
 18830                           ;memory.c: 184: EECON2 = 0x55;
 18831  1A81  3055               	movlw	85
 18832  1A82  0096               	movwf	22	;volsfr
 18833                           
 18834                           ;memory.c: 185: EECON2 = 0xAA;
 18835  1A83  30AA               	movlw	170
 18836  1A84  0096               	movwf	22	;volsfr
 18837                           
 18838                           ;memory.c: 186: EECON1bits.WR = 1;
 18839  1A85  1495               	bsf	21,1	;volsfr
 18840  1A86                     l372:	
 18841                           ;memory.c: 188: while (EECON1bits.WR) {
 18842                           
 18843  1A86  1895               	btfsc	21,1	;volsfr
 18844  1A87  2A86               	goto	l372
 18845                           
 18846                           ;memory.c: 189: }
 18847                           ;memory.c: 191: EECON1bits.WREN = 0;
 18848  1A88  1115               	bcf	21,2	;volsfr
 18849                           
 18850                           ;memory.c: 192: INTCONbits.GIE = GIEBitValue;
 18851  1A89  0874               	movf	DATAEE_WriteByte@GIEBitValue,w
 18852  1A8A  1D03               	skipz
 18853  1A8B  178B               	bsf	11,7	;volatile
 18854  1A8C  1903               	skipnz
 18855  1A8D  138B               	bcf	11,7	;volatile
 18856  1A8E  0008               	return
 18857  1A8F                     __end_of_DATAEE_WriteByte:	
 18858                           
 18859                           	psect	text68
 18860  1954                     __ptext68:	
 18861 ;; *************** function _DATAEE_ReadByte *****************
 18862 ;; Defined at:
 18863 ;;		line 195 in file "mcc_generated_files/memory.c"
 18864 ;; Parameters:    Size  Location     Type
 18865 ;;  bAdd            1    wreg     unsigned char 
 18866 ;; Auto vars:     Size  Location     Type
 18867 ;;  bAdd            1    2[COMMON] unsigned char 
 18868 ;; Return value:  Size  Location     Type
 18869 ;;                  1    wreg      unsigned char 
 18870 ;; Registers used:
 18871 ;;		wreg
 18872 ;; Tracked objects:
 18873 ;;		On entry : 0/0
 18874 ;;		On exit  : 0/0
 18875 ;;		Unchanged: 0/0
 18876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18880 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18881 ;;Total ram usage:        1 bytes
 18882 ;; Hardware stack levels used:    1
 18883 ;; Hardware stack levels required when called:    3
 18884 ;; This function calls:
 18885 ;;		Nothing
 18886 ;; This function is called by:
 18887 ;;		_Decode_RS232_CMD
 18888 ;;		_Save_QMD_EEPROM
 18889 ;;		_Load_QMD_EEPROM
 18890 ;; This function uses a non-reentrant model
 18891 ;;
 18892                           
 18893                           
 18894                           ;psect for function _DATAEE_ReadByte
 18895  1954                     _DATAEE_ReadByte:	
 18896                           
 18897                           ;incstack = 0
 18898                           ; Regs used in _DATAEE_ReadByte: [wreg]
 18899                           ;DATAEE_ReadByte@bAdd stored from wreg
 18900  1954  00F2               	movwf	DATAEE_ReadByte@bAdd
 18901                           
 18902                           ;memory.c: 196: EEADRL = (bAdd & 0x0ff);
 18903  1955  0872               	movf	DATAEE_ReadByte@bAdd,w
 18904  1956  0023               	movlb	3	; select bank3
 18905  1957  0091               	movwf	17	;volatile
 18906                           
 18907                           ;memory.c: 197: EECON1bits.CFGS = 0;
 18908  1958  1315               	bcf	21,6	;volsfr
 18909                           
 18910                           ;memory.c: 198: EECON1bits.EEPGD = 0;
 18911  1959  1395               	bcf	21,7	;volsfr
 18912                           
 18913                           ;memory.c: 199: EECON1bits.RD = 1;
 18914  195A  1415               	bsf	21,0	;volsfr
 18915                           
 18916                           ;memory.c: 200: __nop();
 18917  195B  0000               	nop
 18918                           
 18919                           ;memory.c: 201: __nop();
 18920  195C  0000               	nop
 18921                           
 18922                           ;memory.c: 203: return (EEDATL);
 18923  195D  0023               	movlb	3	; select bank3
 18924  195E  0813               	movf	19,w	;volatile
 18925  195F  0008               	return
 18926  1960                     __end_of_DATAEE_ReadByte:	
 18927                           
 18928                           	psect	text69
 18929  1936                     __ptext69:	
 18930 ;; *************** function _Check_1MSFlag *****************
 18931 ;; Defined at:
 18932 ;;		line 130 in file "mcc_generated_files/tmr0.c"
 18933 ;; Parameters:    Size  Location     Type
 18934 ;;		None
 18935 ;; Auto vars:     Size  Location     Type
 18936 ;;		None
 18937 ;; Return value:  Size  Location     Type
 18938 ;;                  1    wreg      unsigned char 
 18939 ;; Registers used:
 18940 ;;		wreg, status,2, status,0
 18941 ;; Tracked objects:
 18942 ;;		On entry : 0/0
 18943 ;;		On exit  : 0/0
 18944 ;;		Unchanged: 0/0
 18945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18950 ;;Total ram usage:        0 bytes
 18951 ;; Hardware stack levels used:    1
 18952 ;; Hardware stack levels required when called:    3
 18953 ;; This function calls:
 18954 ;;		Nothing
 18955 ;; This function is called by:
 18956 ;;		_main
 18957 ;; This function uses a non-reentrant model
 18958 ;;
 18959                           
 18960                           
 18961                           ;psect for function _Check_1MSFlag
 18962  1936                     _Check_1MSFlag:	
 18963                           
 18964                           ;tmr0.c: 132: if(Flag_1MS == 1)
 18965                           
 18966                           ;incstack = 0
 18967                           ; Regs used in _Check_1MSFlag: [wreg+status,2+status,0]
 18968  1936  0022               	movlb	2	; select bank2
 18969  1937  034F               	decf	_Flag_1MS^(0+256),w
 18970  1938  1D03               	btfss	3,2
 18971  1939  293D               	goto	l5498
 18972                           
 18973                           ;tmr0.c: 133: {
 18974                           ;tmr0.c: 134: Flag_1MS = 0;
 18975  193A  01CF               	clrf	_Flag_1MS^(0+256)
 18976                           
 18977                           ;tmr0.c: 135: return 1;
 18978  193B  3001               	movlw	1
 18979  193C  0008               	return
 18980  193D                     l5498:	
 18981                           
 18982                           ;tmr0.c: 136: }
 18983                           ;tmr0.c: 138: return 0;
 18984  193D  3000               	movlw	0
 18985  193E  0008               	return
 18986  193F                     __end_of_Check_1MSFlag:	
 18987                           
 18988                           	psect	text70
 18989  192D                     __ptext70:	
 18990 ;; *************** function _CheckRxOneByteFlag *****************
 18991 ;; Defined at:
 18992 ;;		line 179 in file "mcc_generated_files/eusart.c"
 18993 ;; Parameters:    Size  Location     Type
 18994 ;;		None
 18995 ;; Auto vars:     Size  Location     Type
 18996 ;;		None
 18997 ;; Return value:  Size  Location     Type
 18998 ;;                  1    wreg      unsigned char 
 18999 ;; Registers used:
 19000 ;;		wreg, status,2, status,0
 19001 ;; Tracked objects:
 19002 ;;		On entry : 0/0
 19003 ;;		On exit  : 0/0
 19004 ;;		Unchanged: 0/0
 19005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19010 ;;Total ram usage:        0 bytes
 19011 ;; Hardware stack levels used:    1
 19012 ;; Hardware stack levels required when called:    3
 19013 ;; This function calls:
 19014 ;;		Nothing
 19015 ;; This function is called by:
 19016 ;;		_main
 19017 ;; This function uses a non-reentrant model
 19018 ;;
 19019                           
 19020                           
 19021                           ;psect for function _CheckRxOneByteFlag
 19022  192D                     _CheckRxOneByteFlag:	
 19023                           
 19024                           ;eusart.c: 181: if(FlagRxByte == 1)
 19025                           
 19026                           ;incstack = 0
 19027                           ; Regs used in _CheckRxOneByteFlag: [wreg+status,2+status,0]
 19028  192D  0022               	movlb	2	; select bank2
 19029  192E  034E               	decf	_FlagRxByte^(0+256),w
 19030  192F  1D03               	btfss	3,2
 19031  1930  2934               	goto	l5470
 19032                           
 19033                           ;eusart.c: 182: {
 19034                           ;eusart.c: 183: FlagRxByte = 0;
 19035  1931  01CE               	clrf	_FlagRxByte^(0+256)
 19036                           
 19037                           ;eusart.c: 184: return 1;
 19038  1932  3001               	movlw	1
 19039  1933  0008               	return
 19040  1934                     l5470:	
 19041                           
 19042                           ;eusart.c: 185: }
 19043                           ;eusart.c: 187: return 0;
 19044  1934  3000               	movlw	0
 19045  1935  0008               	return
 19046  1936                     __end_of_CheckRxOneByteFlag:	
 19047                           
 19048                           	psect	text71
 19049  1924                     __ptext71:	
 19050 ;; *************** function _CheckOneSecFlag *****************
 19051 ;; Defined at:
 19052 ;;		line 131 in file "mcc_generated_files/tmr2.c"
 19053 ;; Parameters:    Size  Location     Type
 19054 ;;		None
 19055 ;; Auto vars:     Size  Location     Type
 19056 ;;		None
 19057 ;; Return value:  Size  Location     Type
 19058 ;;                  1    wreg      unsigned char 
 19059 ;; Registers used:
 19060 ;;		wreg, status,2, status,0
 19061 ;; Tracked objects:
 19062 ;;		On entry : 0/0
 19063 ;;		On exit  : 0/0
 19064 ;;		Unchanged: 0/0
 19065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19070 ;;Total ram usage:        0 bytes
 19071 ;; Hardware stack levels used:    1
 19072 ;; Hardware stack levels required when called:    3
 19073 ;; This function calls:
 19074 ;;		Nothing
 19075 ;; This function is called by:
 19076 ;;		_main
 19077 ;; This function uses a non-reentrant model
 19078 ;;
 19079                           
 19080                           
 19081                           ;psect for function _CheckOneSecFlag
 19082  1924                     _CheckOneSecFlag:	
 19083                           
 19084                           ;tmr2.c: 133: if(FlagOneSec == 1)
 19085                           
 19086                           ;incstack = 0
 19087                           ; Regs used in _CheckOneSecFlag: [wreg+status,2+status,0]
 19088  1924  0022               	movlb	2	; select bank2
 19089  1925  034D               	decf	_FlagOneSec^(0+256),w
 19090  1926  1D03               	btfss	3,2
 19091  1927  292B               	goto	l5510
 19092                           
 19093                           ;tmr2.c: 134: {
 19094                           ;tmr2.c: 135: FlagOneSec = 0;
 19095  1928  01CD               	clrf	_FlagOneSec^(0+256)
 19096                           
 19097                           ;tmr2.c: 136: return 1;
 19098  1929  3001               	movlw	1
 19099  192A  0008               	return
 19100  192B                     l5510:	
 19101                           
 19102                           ;tmr2.c: 137: }
 19103                           ;tmr2.c: 139: return 0;
 19104  192B  3000               	movlw	0
 19105  192C  0008               	return
 19106  192D                     __end_of_CheckOneSecFlag:	
 19107                           
 19108                           	psect	intentry
 19109  0004                     __pintentry:	
 19110 ;; *************** function _INTERRUPT_InterruptManager *****************
 19111 ;; Defined at:
 19112 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 19113 ;; Parameters:    Size  Location     Type
 19114 ;;		None
 19115 ;; Auto vars:     Size  Location     Type
 19116 ;;		None
 19117 ;; Return value:  Size  Location     Type
 19118 ;;		None               void
 19119 ;; Registers used:
 19120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19121 ;; Tracked objects:
 19122 ;;		On entry : 0/0
 19123 ;;		On exit  : 0/0
 19124 ;;		Unchanged: 0/0
 19125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19128 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19129 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19130 ;;Total ram usage:        1 bytes
 19131 ;; Hardware stack levels used:    1
 19132 ;; Hardware stack levels required when called:    2
 19133 ;; This function calls:
 19134 ;;		_EUSART_Receive_ISR
 19135 ;;		_EUSART_Transmit_ISR
 19136 ;;		_TMR0_ISR
 19137 ;;		_TMR2_ISR
 19138 ;; This function is called by:
 19139 ;;		Interrupt level 1
 19140 ;; This function uses a non-reentrant model
 19141 ;;
 19142                           
 19143  0004                     _INTERRUPT_InterruptManager:	
 19144                           
 19145                           ;incstack = 0
 19146                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19147  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 19148  0005  3180               	pagesel	$
 19149  0006  0020               	movlb	0	; select bank0
 19150  0007  087F               	movf	127,w
 19151  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
 19152                           
 19153                           ;interrupt_manager.c: 54: if (PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1) {
 19154  0009  0021               	movlb	1	; select bank1
 19155  000A  1E91               	btfss	17,5	;volatile
 19156  000B  2813               	goto	i1l202
 19157  000C  0020               	movlb	0	; select bank0
 19158  000D  1E91               	btfss	17,5	;volatile
 19159  000E  2813               	goto	i1l202
 19160                           
 19161                           ;interrupt_manager.c: 55: EUSART_Receive_ISR();
 19162  000F  319B  2305  3180   	fcall	_EUSART_Receive_ISR
 19163                           
 19164                           ;interrupt_manager.c: 56: } else if (PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1) {
 19165  0012  282C               	goto	i1l210
 19166  0013                     i1l202:	
 19167  0013  0021               	movlb	1	; select bank1
 19168  0014  1E11               	btfss	17,4	;volatile
 19169  0015  281D               	goto	i1l204
 19170  0016  0020               	movlb	0	; select bank0
 19171  0017  1E11               	btfss	17,4	;volatile
 19172  0018  281D               	goto	i1l204
 19173                           
 19174                           ;interrupt_manager.c: 57: EUSART_Transmit_ISR();
 19175  0019  319B  2325  3180   	fcall	_EUSART_Transmit_ISR
 19176                           
 19177                           ;interrupt_manager.c: 58: } else if (PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1) {
 19178  001C  282C               	goto	i1l210
 19179  001D                     i1l204:	
 19180  001D  0021               	movlb	1	; select bank1
 19181  001E  1C91               	btfss	17,1	;volatile
 19182  001F  2827               	goto	i1l206
 19183  0020  0020               	movlb	0	; select bank0
 19184  0021  1C91               	btfss	17,1	;volatile
 19185  0022  2827               	goto	i1l206
 19186                           
 19187                           ;interrupt_manager.c: 59: TMR2_ISR();
 19188  0023  3199  21C8  3180   	fcall	_TMR2_ISR
 19189                           
 19190                           ;interrupt_manager.c: 60: } else if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 19191  0026  282C               	goto	i1l210
 19192  0027                     i1l206:	
 19193  0027  1A8B               	btfsc	11,5	;volatile
 19194  0028  1D0B               	btfss	11,2	;volatile
 19195  0029  282C               	goto	i1l210
 19196                           
 19197                           ;interrupt_manager.c: 61: TMR0_ISR();
 19198  002A  3199  21F0         	fcall	_TMR0_ISR
 19199  002C                     i1l210:	
 19200                           ;interrupt_manager.c: 62: } else {
 19201                           
 19202  002C  0871               	movf	??_INTERRUPT_InterruptManager,w
 19203  002D  0020               	movlb	0	; select bank0
 19204  002E  00FF               	movwf	127
 19205  002F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 19206  0030  0009               	retfie
 19207  0031                     __end_of_INTERRUPT_InterruptManager:	
 19208                           
 19209                           	psect	text73
 19210  19C8                     __ptext73:	
 19211 ;; *************** function _TMR2_ISR *****************
 19212 ;; Defined at:
 19213 ;;		line 107 in file "mcc_generated_files/tmr2.c"
 19214 ;; Parameters:    Size  Location     Type
 19215 ;;		None
 19216 ;; Auto vars:     Size  Location     Type
 19217 ;;		None
 19218 ;; Return value:  Size  Location     Type
 19219 ;;		None               void
 19220 ;; Registers used:
 19221 ;;		wreg, status,2, status,0, pclath, cstack
 19222 ;; Tracked objects:
 19223 ;;		On entry : 0/0
 19224 ;;		On exit  : 0/0
 19225 ;;		Unchanged: 0/0
 19226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19231 ;;Total ram usage:        0 bytes
 19232 ;; Hardware stack levels used:    1
 19233 ;; Hardware stack levels required when called:    1
 19234 ;; This function calls:
 19235 ;;		_TMR2_CallBack
 19236 ;; This function is called by:
 19237 ;;		_INTERRUPT_InterruptManager
 19238 ;; This function uses a non-reentrant model
 19239 ;;
 19240                           
 19241                           
 19242                           ;psect for function _TMR2_ISR
 19243  19C8                     _TMR2_ISR:	
 19244                           
 19245                           ;tmr2.c: 108: static volatile unsigned int CountCallBack = 0;
 19246                           ;tmr2.c: 111: PIR1bits.TMR2IF = 0;
 19247                           
 19248                           ;incstack = 0
 19249                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 19250  19C8  0020               	movlb	0	; select bank0
 19251  19C9  1091               	bcf	17,1	;volatile
 19252                           
 19253                           ;tmr2.c: 114: if (++CountCallBack >= 100) {
 19254  19CA  3001               	movlw	1
 19255  19CB  0022               	movlb	2	; select bank2
 19256  19CC  07BE               	addwf	TMR2_ISR@CountCallBack^(0+256),f	;volatile
 19257  19CD  3000               	movlw	0
 19258  19CE  3DBF               	addwfc	(TMR2_ISR@CountCallBack+1)^(0+256),f	;volatile
 19259  19CF  3000               	movlw	0
 19260  19D0  023F               	subwf	(TMR2_ISR@CountCallBack+1)^(0+256),w	;volatile
 19261  19D1  3064               	movlw	100
 19262  19D2  1903               	skipnz
 19263  19D3  023E               	subwf	TMR2_ISR@CountCallBack^(0+256),w	;volatile
 19264  19D4  1C03               	skipc
 19265  19D5  0008               	return
 19266                           
 19267                           ;tmr2.c: 116: TMR2_CallBack();
 19268  19D6  3198  20E6         	fcall	_TMR2_CallBack
 19269                           
 19270                           ;tmr2.c: 119: CountCallBack = 0;
 19271  19D8  0022               	movlb	2	; select bank2
 19272  19D9  01BE               	clrf	TMR2_ISR@CountCallBack^(0+256)	;volatile
 19273  19DA  01BF               	clrf	(TMR2_ISR@CountCallBack+1)^(0+256)	;volatile
 19274  19DB  0008               	return
 19275  19DC                     __end_of_TMR2_ISR:	
 19276                           
 19277                           	psect	text74
 19278  18E6                     __ptext74:	
 19279 ;; *************** function _TMR2_CallBack *****************
 19280 ;; Defined at:
 19281 ;;		line 125 in file "mcc_generated_files/tmr2.c"
 19282 ;; Parameters:    Size  Location     Type
 19283 ;;		None
 19284 ;; Auto vars:     Size  Location     Type
 19285 ;;		None
 19286 ;; Return value:  Size  Location     Type
 19287 ;;		None               void
 19288 ;; Registers used:
 19289 ;;		None
 19290 ;; Tracked objects:
 19291 ;;		On entry : 0/0
 19292 ;;		On exit  : 0/0
 19293 ;;		Unchanged: 0/0
 19294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19299 ;;Total ram usage:        0 bytes
 19300 ;; Hardware stack levels used:    1
 19301 ;; This function calls:
 19302 ;;		Nothing
 19303 ;; This function is called by:
 19304 ;;		_TMR2_ISR
 19305 ;; This function uses a non-reentrant model
 19306 ;;
 19307                           
 19308                           
 19309                           ;psect for function _TMR2_CallBack
 19310  18E6                     _TMR2_CallBack:	
 19311                           
 19312                           ;tmr2.c: 128: FlagOneSec = 1;
 19313                           
 19314                           ;incstack = 0
 19315                           ; Regs used in _TMR2_CallBack: []
 19316  18E6  0022               	movlb	2	; select bank2
 19317  18E7  01CD               	clrf	_FlagOneSec^(0+256)
 19318  18E8  0ACD               	incf	_FlagOneSec^(0+256),f
 19319  18E9  0008               	return
 19320  18EA                     __end_of_TMR2_CallBack:	
 19321                           
 19322                           	psect	text75
 19323  19F0                     __ptext75:	
 19324 ;; *************** function _TMR0_ISR *****************
 19325 ;; Defined at:
 19326 ;;		line 102 in file "mcc_generated_files/tmr0.c"
 19327 ;; Parameters:    Size  Location     Type
 19328 ;;		None
 19329 ;; Auto vars:     Size  Location     Type
 19330 ;;		None
 19331 ;; Return value:  Size  Location     Type
 19332 ;;		None               void
 19333 ;; Registers used:
 19334 ;;		wreg, status,2, status,0, pclath, cstack
 19335 ;; Tracked objects:
 19336 ;;		On entry : 0/0
 19337 ;;		On exit  : 0/0
 19338 ;;		Unchanged: 0/0
 19339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19344 ;;Total ram usage:        0 bytes
 19345 ;; Hardware stack levels used:    1
 19346 ;; Hardware stack levels required when called:    1
 19347 ;; This function calls:
 19348 ;;		_TMR0_CallBack
 19349 ;; This function is called by:
 19350 ;;		_INTERRUPT_InterruptManager
 19351 ;; This function uses a non-reentrant model
 19352 ;;
 19353                           
 19354                           
 19355                           ;psect for function _TMR0_ISR
 19356  19F0                     _TMR0_ISR:	
 19357                           
 19358                           ;tmr0.c: 103: static volatile unsigned int CountCallBack = 0;
 19359                           ;tmr0.c: 106: INTCONbits.TMR0IF = 0;
 19360                           
 19361                           ;incstack = 0
 19362                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 19363  19F0  110B               	bcf	11,2	;volatile
 19364                           
 19365                           ;tmr0.c: 108: TMR0 = timer0ReloadVal;
 19366  19F1  0022               	movlb	2	; select bank2
 19367  19F2  086F               	movf	_timer0ReloadVal^(0+256),w	;volatile
 19368  19F3  0020               	movlb	0	; select bank0
 19369  19F4  0095               	movwf	21	;volatile
 19370                           
 19371                           ;tmr0.c: 111: if (++CountCallBack >= 31) {
 19372  19F5  3001               	movlw	1
 19373  19F6  0022               	movlb	2	; select bank2
 19374  19F7  07BC               	addwf	TMR0_ISR@CountCallBack^(0+256),f	;volatile
 19375  19F8  3000               	movlw	0
 19376  19F9  3DBD               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+256),f	;volatile
 19377  19FA  3000               	movlw	0
 19378  19FB  023D               	subwf	(TMR0_ISR@CountCallBack+1)^(0+256),w	;volatile
 19379  19FC  301F               	movlw	31
 19380  19FD  1903               	skipnz
 19381  19FE  023C               	subwf	TMR0_ISR@CountCallBack^(0+256),w	;volatile
 19382  19FF  1C03               	skipc
 19383  1A00  0008               	return
 19384                           
 19385                           ;tmr0.c: 113: TMR0_CallBack();
 19386  1A01  3198  20E2         	fcall	_TMR0_CallBack
 19387                           
 19388                           ;tmr0.c: 116: CountCallBack = 0;
 19389  1A03  0022               	movlb	2	; select bank2
 19390  1A04  01BC               	clrf	TMR0_ISR@CountCallBack^(0+256)	;volatile
 19391  1A05  01BD               	clrf	(TMR0_ISR@CountCallBack+1)^(0+256)	;volatile
 19392  1A06  0008               	return
 19393  1A07                     __end_of_TMR0_ISR:	
 19394                           
 19395                           	psect	text76
 19396  18E2                     __ptext76:	
 19397 ;; *************** function _TMR0_CallBack *****************
 19398 ;; Defined at:
 19399 ;;		line 122 in file "mcc_generated_files/tmr0.c"
 19400 ;; Parameters:    Size  Location     Type
 19401 ;;		None
 19402 ;; Auto vars:     Size  Location     Type
 19403 ;;		None
 19404 ;; Return value:  Size  Location     Type
 19405 ;;		None               void
 19406 ;; Registers used:
 19407 ;;		None
 19408 ;; Tracked objects:
 19409 ;;		On entry : 0/0
 19410 ;;		On exit  : 0/0
 19411 ;;		Unchanged: 0/0
 19412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19417 ;;Total ram usage:        0 bytes
 19418 ;; Hardware stack levels used:    1
 19419 ;; This function calls:
 19420 ;;		Nothing
 19421 ;; This function is called by:
 19422 ;;		_TMR0_ISR
 19423 ;; This function uses a non-reentrant model
 19424 ;;
 19425                           
 19426                           
 19427                           ;psect for function _TMR0_CallBack
 19428  18E2                     _TMR0_CallBack:	
 19429                           
 19430                           ;tmr0.c: 125: Flag_1MS = 1;
 19431                           
 19432                           ;incstack = 0
 19433                           ; Regs used in _TMR0_CallBack: []
 19434  18E2  0022               	movlb	2	; select bank2
 19435  18E3  01CF               	clrf	_Flag_1MS^(0+256)
 19436  18E4  0ACF               	incf	_Flag_1MS^(0+256),f
 19437  18E5  0008               	return
 19438  18E6                     __end_of_TMR0_CallBack:	
 19439                           
 19440                           	psect	text77
 19441  1B25                     __ptext77:	
 19442 ;; *************** function _EUSART_Transmit_ISR *****************
 19443 ;; Defined at:
 19444 ;;		line 149 in file "mcc_generated_files/eusart.c"
 19445 ;; Parameters:    Size  Location     Type
 19446 ;;		None
 19447 ;; Auto vars:     Size  Location     Type
 19448 ;;		None
 19449 ;; Return value:  Size  Location     Type
 19450 ;;		None               void
 19451 ;; Registers used:
 19452 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19453 ;; Tracked objects:
 19454 ;;		On entry : 0/0
 19455 ;;		On exit  : 0/0
 19456 ;;		Unchanged: 0/0
 19457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19460 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19461 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19462 ;;Total ram usage:        1 bytes
 19463 ;; Hardware stack levels used:    1
 19464 ;; This function calls:
 19465 ;;		Nothing
 19466 ;; This function is called by:
 19467 ;;		_INTERRUPT_InterruptManager
 19468 ;; This function uses a non-reentrant model
 19469 ;;
 19470                           
 19471                           
 19472                           ;psect for function _EUSART_Transmit_ISR
 19473  1B25                     _EUSART_Transmit_ISR:	
 19474                           
 19475                           ;eusart.c: 152: if (sizeof (eusartTxBuffer) > eusartTxBufferRemaining) {
 19476                           
 19477                           ;incstack = 0
 19478                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 19479  1B25  3008               	movlw	8
 19480  1B26  0022               	movlb	2	; select bank2
 19481  1B27  026E               	subwf	_eusartTxBufferRemaining^(0+256),w	;volatile
 19482  1B28  1803               	skipnc
 19483  1B29  2B42               	goto	i1l173
 19484                           
 19485                           ;eusart.c: 153: TX1REG = eusartTxBuffer[eusartTxTail++];
 19486  1B2A  0021               	movlb	1	; select bank1
 19487  1B2B  086D               	movf	_eusartTxTail^(0+128),w
 19488  1B2C  3E30               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 19489  1B2D  0086               	movwf	6
 19490  1B2E  3001               	movlw	1	; select bank2/3
 19491  1B2F  0087               	movwf	7
 19492  1B30  0801               	movf	1,w
 19493  1B31  0023               	movlb	3	; select bank3
 19494  1B32  009A               	movwf	26	;volatile
 19495  1B33  3001               	movlw	1
 19496  1B34  00F0               	movwf	??_EUSART_Transmit_ISR
 19497  1B35  0870               	movf	??_EUSART_Transmit_ISR,w
 19498  1B36  0021               	movlb	1	; select bank1
 19499  1B37  07ED               	addwf	_eusartTxTail^(0+128),f
 19500                           
 19501                           ;eusart.c: 154: if (sizeof (eusartTxBuffer) <= eusartTxTail) {
 19502  1B38  3008               	movlw	8
 19503  1B39  026D               	subwf	_eusartTxTail^(0+128),w
 19504  1B3A  1803               	btfsc	3,0
 19505                           
 19506                           ;eusart.c: 155: eusartTxTail = 0;
 19507  1B3B  01ED               	clrf	_eusartTxTail^(0+128)
 19508                           
 19509                           ;eusart.c: 156: }
 19510                           ;eusart.c: 157: eusartTxBufferRemaining++;
 19511  1B3C  3001               	movlw	1
 19512  1B3D  00F0               	movwf	??_EUSART_Transmit_ISR
 19513  1B3E  0870               	movf	??_EUSART_Transmit_ISR,w
 19514  1B3F  0022               	movlb	2	; select bank2
 19515  1B40  07EE               	addwf	_eusartTxBufferRemaining^(0+256),f	;volatile
 19516                           
 19517                           ;eusart.c: 158: } else {
 19518  1B41  0008               	return
 19519  1B42                     i1l173:	
 19520                           
 19521                           ;eusart.c: 159: PIE1bits.TXIE = 0;
 19522  1B42  0021               	movlb	1	; select bank1
 19523  1B43  1211               	bcf	17,4	;volatile
 19524  1B44  0008               	return
 19525  1B45                     __end_of_EUSART_Transmit_ISR:	
 19526                           
 19527                           	psect	text78
 19528  1B05                     __ptext78:	
 19529 ;; *************** function _EUSART_Receive_ISR *****************
 19530 ;; Defined at:
 19531 ;;		line 163 in file "mcc_generated_files/eusart.c"
 19532 ;; Parameters:    Size  Location     Type
 19533 ;;		None
 19534 ;; Auto vars:     Size  Location     Type
 19535 ;;		None
 19536 ;; Return value:  Size  Location     Type
 19537 ;;		None               void
 19538 ;; Registers used:
 19539 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19540 ;; Tracked objects:
 19541 ;;		On entry : 0/0
 19542 ;;		On exit  : 0/0
 19543 ;;		Unchanged: 0/0
 19544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19547 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19548 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19549 ;;Total ram usage:        1 bytes
 19550 ;; Hardware stack levels used:    1
 19551 ;; This function calls:
 19552 ;;		Nothing
 19553 ;; This function is called by:
 19554 ;;		_INTERRUPT_InterruptManager
 19555 ;; This function uses a non-reentrant model
 19556 ;;
 19557                           
 19558                           
 19559                           ;psect for function _EUSART_Receive_ISR
 19560  1B05                     _EUSART_Receive_ISR:	
 19561                           
 19562                           ;eusart.c: 164: if (1 == RC1STAbits.OERR) {
 19563                           
 19564                           ;incstack = 0
 19565                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 19566  1B05  0023               	movlb	3	; select bank3
 19567  1B06  1C9D               	btfss	29,1	;volatile
 19568  1B07  2B0A               	goto	i1l179
 19569                           
 19570                           ;eusart.c: 167: RC1STAbits.CREN = 0;
 19571  1B08  121D               	bcf	29,4	;volatile
 19572                           
 19573                           ;eusart.c: 168: RC1STAbits.CREN = 1;
 19574  1B09  161D               	bsf	29,4	;volatile
 19575  1B0A                     i1l179:	
 19576                           
 19577                           ;eusart.c: 169: }
 19578                           ;eusart.c: 170: FlagRxByte = 1;
 19579  1B0A  0022               	movlb	2	; select bank2
 19580  1B0B  01CE               	clrf	_FlagRxByte^(0+256)
 19581  1B0C  0ACE               	incf	_FlagRxByte^(0+256),f
 19582                           
 19583                           ;eusart.c: 172: eusartRxBuffer[eusartRxHead++] = RC1REG;
 19584  1B0D  0023               	movlb	3	; select bank3
 19585  1B0E  0819               	movf	25,w	;volatile
 19586  1B0F  00F0               	movwf	??_EUSART_Receive_ISR
 19587  1B10  0021               	movlb	1	; select bank1
 19588  1B11  086A               	movf	_eusartRxHead^(0+128),w
 19589  1B12  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 19590  1B13  0086               	movwf	6
 19591  1B14  3001               	movlw	1	; select bank3/4
 19592  1B15  0087               	movwf	7
 19593  1B16  0870               	movf	??_EUSART_Receive_ISR,w
 19594  1B17  0081               	movwf	1
 19595  1B18  3001               	movlw	1
 19596  1B19  00F0               	movwf	??_EUSART_Receive_ISR
 19597  1B1A  0870               	movf	??_EUSART_Receive_ISR,w
 19598  1B1B  07EA               	addwf	_eusartRxHead^(0+128),f
 19599                           
 19600                           ;eusart.c: 173: if (sizeof (eusartRxBuffer) <= eusartRxHead) {
 19601  1B1C  3008               	movlw	8
 19602  1B1D  026A               	subwf	_eusartRxHead^(0+128),w
 19603  1B1E  1803               	btfsc	3,0
 19604                           
 19605                           ;eusart.c: 174: eusartRxHead = 0;
 19606  1B1F  01EA               	clrf	_eusartRxHead^(0+128)
 19607                           
 19608                           ;eusart.c: 175: }
 19609                           ;eusart.c: 176: eusartRxCount++;
 19610  1B20  3001               	movlw	1
 19611  1B21  00F0               	movwf	??_EUSART_Receive_ISR
 19612  1B22  0870               	movf	??_EUSART_Receive_ISR,w
 19613  1B23  07E9               	addwf	_eusartRxCount^(0+128),f	;volatile
 19614  1B24  0008               	return
 19615  1B25                     __end_of_EUSART_Receive_ISR:	
 19616  007E                     btemp	set	126	;btemp
 19617  007E                     int$flags	set	126
 19618  007E                     wtemp	set	126
 19619  007E                     wtemp0	set	126
 19620  0080                     wtemp1	set	128
 19621  0082                     wtemp2	set	130
 19622  0084                     wtemp3	set	132
 19623  0086                     wtemp4	set	134
 19624  0088                     wtemp5	set	136
 19625  007F                     wtemp6	set	127
 19626  007E                     ttemp	set	126
 19627  007E                     ttemp0	set	126
 19628  0081                     ttemp1	set	129
 19629  0084                     ttemp2	set	132
 19630  0087                     ttemp3	set	135
 19631  007F                     ttemp4	set	127
 19632  007E                     ltemp	set	126
 19633  007E                     ltemp0	set	126
 19634  0082                     ltemp1	set	130
 19635  0086                     ltemp2	set	134
 19636  0080                     ltemp3	set	128


Data Sizes:
    Strings     761
    Constant    0
    Data        180
    BSS         153
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     80      80
    BANK1            80     63      80
    BANK2            80      4      80
    BANK3            80      0      71
    BANK4            80      0      80
    BANK5            80      0      26
    BANK6            80      0      63
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           80      0       0
    BANK24           80      0       0
    BANK25           32      0       0

Pointer List with Targets:

    I2C_mREAD@value	PTR unsigned char  size(1) Largest target is 32
		 -> BufferRec(BANK3[32]), 

    I2C_mWrite@value	PTR unsigned char  size(2) Largest target is 32
		 -> UPLOAD_MESURE_REC@BufferString(BANK0[26]), BufferRec(BANK3[32]), BufferStr(BANK4[32]), 

    I2C_Sequential_READ@value	PTR unsigned char  size(1) Largest target is 16
		 -> I2C_TEST_02@i2cReadBuffer(BANK0[16]), 

    I2C_PAGE_WRITE@value	PTR unsigned char  size(1) Largest target is 16
		 -> I2C_TEST_02@i2cData(BANK0[16]), 

    Convert_YMD@rClock	PTR struct . size(1) Largest target is 6
		 -> RTC_Clock(BANK2[6]), 

    Convert_HMS@rClock	PTR struct . size(1) Largest target is 6
		 -> RTC_Clock(BANK2[6]), 

    DS18B20_GetTemp@rTwoByte	PTR unsigned char  size(1) Largest target is 2
		 -> BufferGetTemp(BANK2[2]), 

    STR2HEX@BStr	PTR unsigned char  size(1) Largest target is 32
		 -> BufferStr(BANK4[32]), 

    Print_String@BStr	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_53(CODE[22]), STR_52(CODE[16]), STR_51(CODE[16]), STR_50(CODE[19]), 
		 -> STR_49(CODE[16]), STR_48(CODE[16]), STR_47(CODE[18]), STR_46(CODE[19]), 
		 -> STR_45(CODE[18]), STR_44(CODE[19]), STR_43(CODE[14]), STR_42(CODE[14]), 
		 -> STR_41(CODE[20]), STR_40(CODE[29]), STR_39(CODE[6]), STR_38(CODE[4]), 
		 -> STR_37(CODE[21]), STR_36(CODE[7]), STR_35(CODE[8]), STR_34(CODE[3]), 
		 -> STR_33(CODE[3]), STR_32(CODE[3]), STR_31(CODE[3]), STR_30(CODE[3]), 
		 -> STR_29(CODE[32]), STR_28(CODE[25]), STR_27(CODE[15]), STR_26(CODE[12]), 
		 -> STR_25(CODE[10]), STR_24(CODE[34]), STR_23(CODE[36]), STR_22(CODE[12]), 
		 -> STR_21(CODE[36]), STR_20(CODE[36]), STR_19(CODE[17]), STR_18(CODE[13]), 
		 -> STR_17(CODE[23]), STR_16(CODE[7]), STR_15(CODE[18]), STR_14(CODE[7]), 
		 -> STR_13(CODE[19]), STR_12(CODE[24]), STR_11(CODE[11]), STR_10(CODE[25]), 
		 -> STR_9(CODE[20]), STR_8(CODE[23]), STR_7(CODE[11]), STR_6(CODE[20]), 
		 -> STR_5(CODE[27]), STR_4(CODE[25]), STR_3(CODE[23]), BufferRec(BANK3[32]), 
		 -> STR_2(CODE[14]), STR_1(CODE[8]), 

    Decode_RS232_CMD@BStr	PTR unsigned char  size(1) Largest target is 32
		 -> BufferStr(BANK4[32]), 


Critical Paths under _main in COMMON

    _main->_I2C_mWrite
    _main->_Print_HEX2Str
    _main->___lldiv
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_TMR0_Initialize
    _PIC_SYNC_ADO_ULSR->_I2C_mWrite
    _PIC_SYNC_ADO_ULSR->_Print_HEX2Str
    _PIC_SYNC_ADO_RTC->_Covert_BDC_2_OCT
    _PIC_SYNC_ADO_RTC->_I2C_mWrite
    _PIC_SYNC_ADO_RTC->_Print_HEX2Str
    _PIC_SYNC_ADO_RTC->___lmul
    _Covert_BDC_2_OCT->___bmul
    _Decode_RS232_CMD->_I2C_mWrite
    _Decode_RS232_CMD->_Print_HEX2Str
    _UPLOAD_MESURE_REC->_I2C_mWrite
    _Print_YMD->___awdiv
    _Print_HMS->___awdiv
    _Convert_HMS->___lldiv
    _Convert_HMS->___llmod
    _Convert_2HB->___awmod
    _check_ADO_I2C->_I2C_mWrite
    _check_ADO_I2C->_Print_HEX2Str
    _Print_BreakLine->_EUSART_Write
    _DS18B20_GetTemp->_Print_HEX2Str
    _DS18B20_Write->_Delay100us
    _DS18B20_Reset->_Delay480us
    _DS18B20_Read->_Delay100us
    _STR2HEX->_ASCII_OCT2HEX
    _RUN_MESURE->___lldiv
    ___bmul->___awdiv
    _Print_uint16Str->___lwdiv
    _I2C_TEST_10->_I2C_mWrite
    _I2C_TEST_10->_Print_HEX2Str
    _I2C_mWrite->_I2C_WRITE_8BIT
    _I2C_mREAD->_I2C_READ_8BIT
    _I2C_TEST_02->_Print_HEX2Str
    _Print_String->_EUSART_Write
    _I2C_Sequential_READ->_Print_HEX2Str
    _I2C_PAGE_WRITE->_Print_HEX2Str
    _Print_HEX2Str->___awdiv
    _Print_CHLN->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR

Critical Paths under _main in BANK0

    _main->_Decode_RS232_CMD
    _PIC_SYNC_ADO_ULSR->_Print_uint16Str
    _PIC_SYNC_ADO_RTC->_Covert_Month_2_Day
    _Covert_BDC_2_OCT->___bmul
    _Decode_RS232_CMD->_UPLOAD_MESURE_REC
    _UPLOAD_MESURE_REC->_Convert_YMD
    _TEST_PIC_ALL->_print_RTC
    _print_RTC->_Convert_YMD
    _Print_YMD->___awdiv
    _Print_HMS->___awdiv
    _Convert_YMD->_Convert_2HB
    _Convert_HMS->_Convert_2HB
    _Convert_2HB->___awdiv
    _check_ADO_I2C->_Print_HEX2Str
    _DS18B20_GetTemp->_Print_uint16Str
    _RUN_MESURE->_Print_uint16Str
    ___bmul->___awdiv
    _I2C_TEST_10->_Print_HEX2Str
    _I2C_TEST_02->_I2C_PAGE_WRITE
    _I2C_TEST_02->_I2C_Sequential_READ
    _I2C_Sequential_READ->_Print_HEX2Str
    _I2C_PAGE_WRITE->_Print_HEX2Str
    _Print_HEX2Str->___awdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_RUN_MESURE
    _Decode_RS232_CMD->_RUN_MESURE

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0  383551
                                             78 BANK0      2     2      0
                                              0 BANK2      4     4      0
                  _ADC_GetConversion
                    _CheckOneSecFlag
                 _CheckRxOneByteFlag
                      _Check_1MSFlag
                     _DAC1_SetOutput
                   _Decode_RS232_CMD
                          _I2C_mREAD
                         _I2C_mWrite
                   _PIC_SYNC_ADO_RTC
                  _PIC_SYNC_ADO_ULSR
                         _Print_CHLN
                      _Print_HEX2Str
                       _Print_String
                    _Print_uint16Str
                         _RUN_MESURE
                  _SYSTEM_Initialize
                       _TEST_PIC_ALL
                  _UPLOAD_MESURE_REC
                            ___lldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                    _DAC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
                    _OPA1_Initialize
                    _OPA2_Initialize
                    _OPA3_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DAC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIC_SYNC_ADO_ULSR                                    5     5      0   12536
                                             12 BANK0      5     5      0
                          _I2C_mREAD
                         _I2C_mWrite
                         _Print_CHLN
                      _Print_HEX2Str
                    _Print_uint16Str
 ---------------------------------------------------------------------------------
 (1) _PIC_SYNC_ADO_RTC                                    27    27      0   15298
                                             27 BANK0     27    27      0
                   _Covert_BDC_2_OCT
                 _Covert_Month_2_Day
                          _I2C_mREAD
                         _I2C_mWrite
                         _Print_CHLN
                      _Print_HEX2Str
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     220
                                              2 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _Covert_Month_2_Day                                  31    29      2     203
                                              2 COMMON     4     2      2
                                              0 BANK0     27    27      0
 ---------------------------------------------------------------------------------
 (2) _Covert_BDC_2_OCT                                     5     5      0    2729
                                              9 COMMON     1     1      0
                                              6 BANK0      4     4      0
                            ___awdiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _Decode_RS232_CMD                                     6     5      1  221901
                                             72 BANK0      6     5      1
                     _DAC1_SetOutput
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                    _DS18B20_GetTemp
                        _I2C_TEST_02
                        _I2C_TEST_10
                          _I2C_mREAD
                         _I2C_mWrite
                         _Print_CHLN
                      _Print_HEX2Str
                       _Print_String
                    _Print_uint16Str
                         _RUN_MESURE
                            _STR2HEX
                       _TEST_PIC_ALL
                  _UPLOAD_MESURE_REC
                             ___wmul
                          _print_RTC
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1928
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _UPLOAD_MESURE_REC                                   29    29      0   29298
                                             43 BANK0     29    29      0
                        _Convert_HMS
                        _Convert_YMD
                    _DS18B20_GetTemp
                         _I2C_mWrite
 ---------------------------------------------------------------------------------
 (1) _TEST_PIC_ALL                                         0     0      0   66020
                    _DS18B20_GetTemp
                    _Print_BreakLine
                         _Print_CHLN
                       _Print_String
                      _check_ADO_I2C
                          _print_RTC
 ---------------------------------------------------------------------------------
 (2) _print_RTC                                            1     1      0   21547
                                             43 BANK0      1     1      0
                        _Convert_HMS
                        _Convert_YMD
                         _Print_CHLN
                          _Print_HMS
                       _Print_String
                          _Print_YMD
 ---------------------------------------------------------------------------------
 (3) _Print_YMD                                            8     2      6    2322
                                              7 COMMON     2     2      0
                                              4 BANK0      6     0      6
                       _EUSART_Write
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) _Print_HMS                                            8     2      6    2390
                                              7 COMMON     2     2      0
                                              4 BANK0      6     0      6
                       _EUSART_Write
                         _Print_CHLN
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _Convert_YMD                                         33    30      3    3326
                                             10 BANK0     33    30      3
                        _Convert_2HB
 ---------------------------------------------------------------------------------
 (2) _Convert_HMS                                          6     1      5    4812
                                             10 BANK0      6     1      5
                        _Convert_2HB
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     694
                                              2 COMMON     8     0      8
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Convert_2HB                                          6     6      0    2545
                                              4 BANK0      6     6      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     424
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _check_ADO_I2C                                        2     2      0   18325
                                              8 BANK0      2     2      0
                          _I2C_mREAD
                         _I2C_mWrite
                      _Print_HEX2Str
                       _Print_String
 ---------------------------------------------------------------------------------
 (2) _Print_BreakLine                                      2     2      0     195
                                              4 COMMON     2     2      0
                       _EUSART_Write
                         _Print_CHLN
 ---------------------------------------------------------------------------------
 (2) _DS18B20_GetTemp                                      8     8      0   17256
                                             12 BANK0      8     8      0
                       _DS18B20_Read
                      _DS18B20_Reset
                      _DS18B20_Write
                         _Delay480us
                      _Print_HEX2Str
                       _Print_String
                    _Print_uint16Str
 ---------------------------------------------------------------------------------
 (3) _DS18B20_Write                                        3     3      0     117
                                              5 COMMON     3     3      0
                         _Delay100us
                           _Delay5us
 ---------------------------------------------------------------------------------
 (3) _DS18B20_Reset                                        1     1      0      56
                                              5 COMMON     1     1      0
                         _Delay480us
 ---------------------------------------------------------------------------------
 (3) _Delay480us                                           3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DS18B20_Read                                         3     3      0     119
                                              5 COMMON     3     3      0
                         _Delay100us
                           _Delay5us
 ---------------------------------------------------------------------------------
 (4) _Delay100us                                           3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _STR2HEX                                              5     4      1     969
                                              4 COMMON     5     4      1
                      _ASCII_OCT2HEX
 ---------------------------------------------------------------------------------
 (3) _ASCII_OCT2HEX                                        2     2      0     223
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RUN_MESURE                                          88    88      0   14236
                                             12 BANK0     25    25      0
                                              0 BANK1     63    63      0
                  _ADC_GetConversion
                     _DAC1_SetOutput
                         _Print_CHLN
                       _Print_String
                    _Print_uint16Str
                             ___bmul
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8    1011
                                              2 COMMON     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     682
                                              7 COMMON     2     1      1
                                              4 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _Print_uint16Str                                     12     9      3    2685
                                              0 BANK0     12     9      3
                       _EUSART_Write
                         _Print_CHLN
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     287
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     418
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _DAC1_SetOutput                                       1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      22
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _I2C_TEST_10                                          2     2      0   18325
                                              8 BANK0      2     2      0
                          _I2C_mREAD
                         _I2C_mWrite
                      _Print_HEX2Str
                       _Print_String
 ---------------------------------------------------------------------------------
 (2) _I2C_mWrite                                          10     6      4    3013
                                              6 COMMON     4     0      4
                                              0 BANK0      6     6      0
                      _I2C_START_BIT
                       _I2C_STOP_BIT
                     _I2C_WRITE_8BIT
 ---------------------------------------------------------------------------------
 (3) _I2C_mREAD                                            9     7      2    1588
                                              7 COMMON     2     0      2
                                              0 BANK0      7     7      0
                      _I2C_READ_8BIT
                      _I2C_START_BIT
                       _I2C_STOP_BIT
                     _I2C_WRITE_8BIT
 ---------------------------------------------------------------------------------
 (2) _I2C_TEST_02                                         43    43      0   26725
                                             18 BANK0     42    42      0
                     _I2C_PAGE_WRITE
                _I2C_Sequential_READ
                      _Print_HEX2Str
                       _Print_String
 ---------------------------------------------------------------------------------
 (3) _Print_String                                         7     4      3    8635
                                              4 COMMON     4     1      3
                                              0 BANK0      3     3      0
                       _EUSART_Write
                         _Print_CHLN
 ---------------------------------------------------------------------------------
 (3) _I2C_Sequential_READ                                 10     6      4    6292
                                              8 BANK0     10     6      4
                      _I2C_READ_8BIT
                      _I2C_START_BIT
                       _I2C_STOP_BIT
                     _I2C_WRITE_8BIT
                      _Print_HEX2Str
 ---------------------------------------------------------------------------------
 (4) _I2C_READ_8BIT                                        5     5      0      96
                                              2 COMMON     5     5      0
                        _I2C_Dealy_1
                        _I2C_Dealy_2
 ---------------------------------------------------------------------------------
 (3) _I2C_PAGE_WRITE                                      10     6      4    6143
                                              8 BANK0     10     6      4
                      _I2C_START_BIT
                       _I2C_STOP_BIT
                     _I2C_WRITE_8BIT
                      _Print_HEX2Str
 ---------------------------------------------------------------------------------
 (3) _Print_HEX2Str                                        7     6      1    5089
                                              7 COMMON     3     2      1
                                              4 BANK0      4     4      0
                       _EUSART_Write
                         _Print_CHLN
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1985
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Print_CHLN                                           0     0      0      62
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _I2C_WRITE_8BIT                                       4     4      0      70
                                              2 COMMON     4     4      0
                        _I2C_Dealy_1
                        _I2C_Dealy_2
 ---------------------------------------------------------------------------------
 (3) _I2C_STOP_BIT                                         0     0      0       0
                        _I2C_Dealy_2
 ---------------------------------------------------------------------------------
 (3) _I2C_START_BIT                                        0     0      0       0
                        _I2C_Dealy_1
                        _I2C_Dealy_2
 ---------------------------------------------------------------------------------
 (4) _I2C_Dealy_2                                          0     0      0       0
                           _Delay5us
 ---------------------------------------------------------------------------------
 (4) _I2C_Dealy_1                                          0     0      0       0
                           _Delay5us
 ---------------------------------------------------------------------------------
 (5) _Delay5us                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     3     2      1     196
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Check_1MSFlag                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckRxOneByteFlag                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckOneSecFlag                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR2_ISR                                             0     0      0       0
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR2_CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR0_CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _CheckOneSecFlag
   _CheckRxOneByteFlag
   _Check_1MSFlag
   _DAC1_SetOutput
   _Decode_RS232_CMD
     _DAC1_SetOutput
     _DATAEE_ReadByte
     _DATAEE_WriteByte
     _DS18B20_GetTemp
       _DS18B20_Read
         _Delay100us
         _Delay5us
       _DS18B20_Reset
         _Delay480us
       _DS18B20_Write
         _Delay100us
         _Delay5us
       _Delay480us
       _Print_HEX2Str
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___awdiv
       _Print_String
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
       _Print_uint16Str
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___lwdiv
         ___lwmod
     _I2C_TEST_02
       _I2C_PAGE_WRITE
         _I2C_START_BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _I2C_STOP_BIT
           _I2C_Dealy_2
             _Delay5us
         _I2C_WRITE_8BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _Print_HEX2Str
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
           ___awdiv
       _I2C_Sequential_READ
         _I2C_READ_8BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _I2C_START_BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _I2C_STOP_BIT
           _I2C_Dealy_2
             _Delay5us
         _I2C_WRITE_8BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _Print_HEX2Str
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
           ___awdiv
       _Print_HEX2Str
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___awdiv
       _Print_String
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
     _I2C_TEST_10
       _I2C_mREAD
         _I2C_READ_8BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _I2C_START_BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _I2C_STOP_BIT
           _I2C_Dealy_2
             _Delay5us
         _I2C_WRITE_8BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
       _I2C_mWrite
         _I2C_START_BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _I2C_STOP_BIT
           _I2C_Dealy_2
             _Delay5us
         _I2C_WRITE_8BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
       _Print_HEX2Str
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___awdiv
       _Print_String
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
     _I2C_mREAD
       _I2C_READ_8BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
       _I2C_START_BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
       _I2C_STOP_BIT
         _I2C_Dealy_2
           _Delay5us
       _I2C_WRITE_8BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
     _I2C_mWrite
       _I2C_START_BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
       _I2C_STOP_BIT
         _I2C_Dealy_2
           _Delay5us
       _I2C_WRITE_8BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
     _Print_CHLN
       _EUSART_Write
     _Print_HEX2Str
       _EUSART_Write
       _Print_CHLN
         _EUSART_Write
       ___awdiv
     _Print_String
       _EUSART_Write
       _Print_CHLN
         _EUSART_Write
     _Print_uint16Str
       _EUSART_Write
       _Print_CHLN
         _EUSART_Write
       ___lwdiv
       ___lwmod
     _RUN_MESURE
       _ADC_GetConversion
       _DAC1_SetOutput
       _Print_CHLN
         _EUSART_Write
       _Print_String
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
       _Print_uint16Str
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___lwdiv
         ___lwmod
       ___bmul
         ___awdiv (ARG)
       ___lldiv
     _STR2HEX
       _ASCII_OCT2HEX
     _TEST_PIC_ALL
       _DS18B20_GetTemp
         _DS18B20_Read
           _Delay100us
           _Delay5us
         _DS18B20_Reset
           _Delay480us
         _DS18B20_Write
           _Delay100us
           _Delay5us
         _Delay480us
         _Print_HEX2Str
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
           ___awdiv
         _Print_String
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
         _Print_uint16Str
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
           ___lwdiv
           ___lwmod
       _Print_BreakLine
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
       _Print_CHLN
         _EUSART_Write
       _Print_String
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
       _check_ADO_I2C
         _I2C_mREAD
           _I2C_READ_8BIT
             _I2C_Dealy_1
               _Delay5us
             _I2C_Dealy_2
               _Delay5us
           _I2C_START_BIT
             _I2C_Dealy_1
               _Delay5us
             _I2C_Dealy_2
               _Delay5us
           _I2C_STOP_BIT
             _I2C_Dealy_2
               _Delay5us
           _I2C_WRITE_8BIT
             _I2C_Dealy_1
               _Delay5us
             _I2C_Dealy_2
               _Delay5us
         _I2C_mWrite
           _I2C_START_BIT
             _I2C_Dealy_1
               _Delay5us
             _I2C_Dealy_2
               _Delay5us
           _I2C_STOP_BIT
             _I2C_Dealy_2
               _Delay5us
           _I2C_WRITE_8BIT
             _I2C_Dealy_1
               _Delay5us
             _I2C_Dealy_2
               _Delay5us
         _Print_HEX2Str
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
           ___awdiv
         _Print_String
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
       _print_RTC
         _Convert_HMS
           _Convert_2HB
             ___awdiv
             ___awmod
           ___lldiv
           ___llmod
         _Convert_YMD
           _Convert_2HB
             ___awdiv
             ___awmod
         _Print_CHLN
           _EUSART_Write
         _Print_HMS
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
           ___awdiv
         _Print_String
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
         _Print_YMD
           _EUSART_Write
           ___awdiv
     _UPLOAD_MESURE_REC
       _Convert_HMS
         _Convert_2HB
           ___awdiv
           ___awmod
         ___lldiv
         ___llmod
       _Convert_YMD
         _Convert_2HB
           ___awdiv
           ___awmod
       _DS18B20_GetTemp
         _DS18B20_Read
           _Delay100us
           _Delay5us
         _DS18B20_Reset
           _Delay480us
         _DS18B20_Write
           _Delay100us
           _Delay5us
         _Delay480us
         _Print_HEX2Str
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
           ___awdiv
         _Print_String
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
         _Print_uint16Str
           _EUSART_Write
           _Print_CHLN
             _EUSART_Write
           ___lwdiv
           ___lwmod
       _I2C_mWrite
         _I2C_START_BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _I2C_STOP_BIT
           _I2C_Dealy_2
             _Delay5us
         _I2C_WRITE_8BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
     ___wmul
     _print_RTC
       _Convert_HMS
         _Convert_2HB
           ___awdiv
           ___awmod
         ___lldiv
         ___llmod
       _Convert_YMD
         _Convert_2HB
           ___awdiv
           ___awmod
       _Print_CHLN
         _EUSART_Write
       _Print_HMS
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___awdiv
       _Print_String
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
       _Print_YMD
         _EUSART_Write
         ___awdiv
   _I2C_mREAD
     _I2C_READ_8BIT
       _I2C_Dealy_1
         _Delay5us
       _I2C_Dealy_2
         _Delay5us
     _I2C_START_BIT
       _I2C_Dealy_1
         _Delay5us
       _I2C_Dealy_2
         _Delay5us
     _I2C_STOP_BIT
       _I2C_Dealy_2
         _Delay5us
     _I2C_WRITE_8BIT
       _I2C_Dealy_1
         _Delay5us
       _I2C_Dealy_2
         _Delay5us
   _I2C_mWrite
     _I2C_START_BIT
       _I2C_Dealy_1
         _Delay5us
       _I2C_Dealy_2
         _Delay5us
     _I2C_STOP_BIT
       _I2C_Dealy_2
         _Delay5us
     _I2C_WRITE_8BIT
       _I2C_Dealy_1
         _Delay5us
       _I2C_Dealy_2
         _Delay5us
   _PIC_SYNC_ADO_RTC
     _Covert_BDC_2_OCT
       ___awdiv
       ___bmul
         ___awdiv (ARG)
     _Covert_Month_2_Day
     _I2C_mREAD
       _I2C_READ_8BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
       _I2C_START_BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
       _I2C_STOP_BIT
         _I2C_Dealy_2
           _Delay5us
       _I2C_WRITE_8BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
     _I2C_mWrite
       _I2C_START_BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
       _I2C_STOP_BIT
         _I2C_Dealy_2
           _Delay5us
       _I2C_WRITE_8BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
     _Print_CHLN
       _EUSART_Write
     _Print_HEX2Str
       _EUSART_Write
       _Print_CHLN
         _EUSART_Write
       ___awdiv
     ___lmul
     ___wmul
   _PIC_SYNC_ADO_ULSR
     _I2C_mREAD
       _I2C_READ_8BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
       _I2C_START_BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
       _I2C_STOP_BIT
         _I2C_Dealy_2
           _Delay5us
       _I2C_WRITE_8BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
     _I2C_mWrite
       _I2C_START_BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
       _I2C_STOP_BIT
         _I2C_Dealy_2
           _Delay5us
       _I2C_WRITE_8BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
     _Print_CHLN
       _EUSART_Write
     _Print_HEX2Str
       _EUSART_Write
       _Print_CHLN
         _EUSART_Write
       ___awdiv
     _Print_uint16Str
       _EUSART_Write
       _Print_CHLN
         _EUSART_Write
       ___lwdiv
       ___lwmod
   _Print_CHLN
     _EUSART_Write
   _Print_HEX2Str
     _EUSART_Write
     _Print_CHLN
       _EUSART_Write
     ___awdiv
   _Print_String
     _EUSART_Write
     _Print_CHLN
       _EUSART_Write
   _Print_uint16Str
     _EUSART_Write
     _Print_CHLN
       _EUSART_Write
     ___lwdiv
     ___lwmod
   _RUN_MESURE
     _ADC_GetConversion
     _DAC1_SetOutput
     _Print_CHLN
       _EUSART_Write
     _Print_String
       _EUSART_Write
       _Print_CHLN
         _EUSART_Write
     _Print_uint16Str
       _EUSART_Write
       _Print_CHLN
         _EUSART_Write
       ___lwdiv
       ___lwmod
     ___bmul
       ___awdiv (ARG)
     ___lldiv
   _SYSTEM_Initialize
     _ADC_Initialize
     _DAC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OPA1_Initialize
     _OPA2_Initialize
     _OPA3_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _TMR2_Initialize
       _TMR2_StartTimer
   _TEST_PIC_ALL
     _DS18B20_GetTemp
       _DS18B20_Read
         _Delay100us
         _Delay5us
       _DS18B20_Reset
         _Delay480us
       _DS18B20_Write
         _Delay100us
         _Delay5us
       _Delay480us
       _Print_HEX2Str
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___awdiv
       _Print_String
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
       _Print_uint16Str
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___lwdiv
         ___lwmod
     _Print_BreakLine
       _EUSART_Write
       _Print_CHLN
         _EUSART_Write
     _Print_CHLN
       _EUSART_Write
     _Print_String
       _EUSART_Write
       _Print_CHLN
         _EUSART_Write
     _check_ADO_I2C
       _I2C_mREAD
         _I2C_READ_8BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _I2C_START_BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _I2C_STOP_BIT
           _I2C_Dealy_2
             _Delay5us
         _I2C_WRITE_8BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
       _I2C_mWrite
         _I2C_START_BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
         _I2C_STOP_BIT
           _I2C_Dealy_2
             _Delay5us
         _I2C_WRITE_8BIT
           _I2C_Dealy_1
             _Delay5us
           _I2C_Dealy_2
             _Delay5us
       _Print_HEX2Str
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___awdiv
       _Print_String
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
     _print_RTC
       _Convert_HMS
         _Convert_2HB
           ___awdiv
           ___awmod
         ___lldiv
         ___llmod
       _Convert_YMD
         _Convert_2HB
           ___awdiv
           ___awmod
       _Print_CHLN
         _EUSART_Write
       _Print_HMS
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___awdiv
       _Print_String
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
       _Print_YMD
         _EUSART_Write
         ___awdiv
   _UPLOAD_MESURE_REC
     _Convert_HMS
       _Convert_2HB
         ___awdiv
         ___awmod
       ___lldiv
       ___llmod
     _Convert_YMD
       _Convert_2HB
         ___awdiv
         ___awmod
     _DS18B20_GetTemp
       _DS18B20_Read
         _Delay100us
         _Delay5us
       _DS18B20_Reset
         _Delay480us
       _DS18B20_Write
         _Delay100us
         _Delay5us
       _Delay480us
       _Print_HEX2Str
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___awdiv
       _Print_String
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
       _Print_uint16Str
         _EUSART_Write
         _Print_CHLN
           _EUSART_Write
         ___lwdiv
         ___lwmod
     _I2C_mWrite
       _I2C_START_BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
       _I2C_STOP_BIT
         _I2C_Dealy_2
           _Delay5us
       _I2C_WRITE_8BIT
         _I2C_Dealy_1
           _Delay5us
         _I2C_Dealy_2
           _Delay5us
   ___lldiv
   ___wmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
   _TMR2_ISR
     _TMR2_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3F      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      47      11       88.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      50      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     1EC      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      1A      16       32.5%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3F      18       78.8%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     1EC      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              50      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23              50      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24              50      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25              20      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Apr 23 17:28:38 2016

               __size_of_I2C_TEST_02 008E                 __size_of_I2C_TEST_10 0057  
                                  pc 0002                   __size_of_I2C_mREAD 0045  
                         _RUN_MESURE 0AAB                           _MT_SecTime 0142  
                     ___bmul@product 0024                __size_of_DS18B20_Read 0026  
                        __CFG_CP$OFF 0000                         ___awdiv@sign 0021  
            __end_of_OPA1_Initialize 18F2               __end_of_FVR_Initialize 18EE  
               __size_of_I2C_Dealy_1 0006                 __size_of_I2C_Dealy_2 0003  
                ___wmul@multiplicand 0074              __end_of_Print_BreakLine 1AC9  
                    _timer0ReloadVal 016F               __size_of_DS18B20_Reset 0014  
              __size_of_I2C_STOP_BIT 000F                      _DAC1_Initialize 18FF  
                      ??_Convert_2HB 0024                                  l112 1A1A  
                                l167 1B72                                  l372 1A86  
                                l608 0D1F                                  l634 0E42  
                                l731 0AE9                                  l636 0E6E  
                                l743 0B13                                  l840 1696  
                                l761 0B52                                  l737 0AFE  
                                l755 0B3D                                  l773 0B7C  
                                l749 0B28                                  l767 0B67  
                                l881 1C5A               __size_of_DS18B20_Write 002F  
                                l779 0B91                                  l888 1C76  
                                l889 1C6C                                  _RC3 0073  
                                _RC4 0074                                  _RD4 007C  
                                _RD5 007D                       DS18B20_Write@i 0077  
                      ??_Convert_HMS 002F                                  _PR2 001B  
                       __CFG_CPD$OFF 0000                        ??_Convert_YMD 002D  
                        _MT_LoopTime 00EE                __end_of_ASCII_OCT2HEX 1BD4  
             __size_of_I2C_START_BIT 000D                  __size_of_I2C_mWrite 0045  
                       ___awmod@sign 0078                      _TMR2_Initialize 1960  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                       _DAC1_SetOutput 18FA  
           I2C_READ_8BIT@acknowledge 0073                           _Delay100us 1988  
                 _Covert_Month_2_Day 1D4D                                 S8212 1800  
                         _Delay480us 1997                         __CFG_LVP$OFF 0000  
                       Convert_YMD@i 004A                                 l1015 1DD0  
                               l1052 1370                                 l1058 1381  
                               l1266 1A43                                 l4234 1ED2  
                               l4260 1F08                                 l4252 1EF7  
                               l4318 1DD2                                 l4326 1DC4  
                               l4246 1EDF                                 l4238 1ED9  
                               l4328 1DDF                                 l4248 1EEB  
                               l4256 1F00                                 l5400 1D64  
                               l5402 1D80                                 l7100 0B69  
                               l5510 192B                                 l4390 1383  
                               l4358 1345                                 l4462 1D0B  
                               l4454 1CED                                 l7110 0B9E  
                               l7102 0B7E                                 l5422 1CBC  
                               l4456 1CF9                                 l4480 1C0C  
                               l7104 0B93                                 l4712 1C80  
                               l5408 1A3D                                 l4466 1D14  
                               l7130 0BC4                                 l7122 0BB3  
                               l5426 1CC7                                 l4484 1C18  
                               l7140 0BF1                                 l7132 0BCD  
                               l7116 0BA9                                 l5470 1934  
                               l4478 1C00                                 l7134 0BD6  
                               l7126 0BB8                                 l6504 1B67  
                               l4488 1C21                                 l7160 0C33  
                               l7152 0C0F                                 l7136 0BDF  
                               l7144 0BFA                                 l4744 1BF8  
                               l7320 017A                                 l7312 015E  
                               l8008 0FFB                                 l7138 0BE8  
                               l7146 0C05                                 l7090 0B00  
                               l7306 0148                                 l7244 0851  
                               l7180 0C7C                                 l7172 0C66  
                               l7092 0B15                                 l4860 1BD2  
                               l6612 1E2A                                 l7340 01BF  
                               l7332 01A4                                 l7324 0188  
                               l7316 016C                                 l6518 1B87  
                               l6534 1F71                                 l6630 1BA3  
                               l6622 1B8D                                 l7094 0B2A  
                               l4854 1BC5                                 l6606 1E04  
                               l7502 04A9                                 l7342 01C3  
                               l6560 1FA8                                 l6552 1F97  
                               l6544 1F79                                 l6528 1F66  
                               l6720 1E69                                 l7184 0C87  
                               l7176 0C71                                 l7192 0C9C  
                               l7168 0C5C                                 l7096 0B3F  
                               l7088 0AEB                                 l4848 1BBA  
                               l6608 1E12                                 l6616 1E35  
                               l7432 0363                                 l7416 0309  
                               l7408 02EC                                 l7328 0196  
                               l5498 193D                                 l6546 1F85  
                               l6714 1E58                                 l7098 0B54  
                               l7522 052A                                 l7370 023E  
                               l7346 01D1                                 l6556 1FA0  
                               l6652 166E                                 l7188 0C92  
                               l7292 0108                                 l7276 00C7  
                               l6718 1E68                                 l6582 1FBE  
                               l6830 08E6                                 l7542 0583  
                               l6912 15B6                                 l6920 15CF  
                               l6728 1E48                                 l6592 1FEC  
                               l6584 1FCC                                 l7480 0447  
                               l7456 03E1                                 l7392 0296  
                               l6738 1F30                                 l6906 157E  
                               l6682 1E8A                                 l6826 08DE  
                               l7562 05DC                                 l7810 0CF7  
                               l6748 1F4C                                 l6684 1E9F  
                               l6692 1EBB                                 l6668 16B9  
                               l6596 1FF7                                 l7660 0AA8  
                               l7820 0D0E                                 l7804 0CE7  
                               l7812 0CFA                                 l7590 0694  
                               l7654 0A94                                 l7902 0EA5  
                               l6928 15DB                                 l6960 1545  
                               l6872 1AC6                                 l6784 161E  
                               l7832 0D2B                                 l6866 1AB7  
                               l6786 15F5                                 l7682 17A7  
                               l7914 0ED1                                 l7834 0D46  
                               l7826 0D21                                 l6964 1555  
                               l6980 19B9                                 l6788 1623  
                               l7676 1793                                 l7924 0F17  
                               l7852 0D83                                 l6966 1556  
                               l6974 1518                                 l7598 06AC  
                               l7870 0DD5                                 l7846 0D62  
                               l7854 0D9C                                 l6976 156F  
                               l6984 19BF                                 l6896 149B  
                               l7952 0F80                                 l7864 0DB4  
                               l7792 0CCE                                 l7786 0EF7  
                               l7892 0E3C                                 l7788 0CC5  
                               l7958 0F8B                                 l7894 0E43  
                               l7886 0E29                                 l7878 0E0D  
                               l7992 0FDD                                 l7984 0FBF  
                               l7976 0FAB                                 l7896 0E4F  
                               l7988 0FCE                                 STR_1 12DA  
                               STR_2 1279                                 STR_3 1177  
                               STR_4 1118                                 STR_5 10CB  
                               STR_6 11B9                                 STR_7 12C5  
                               STR_8 1160                                 STR_9 11B9  
                  DS18B20_Read@vByte 0076                                 _LATA 010C  
                               _LATB 010D                                 _LATC 010E  
                               _LATD 010F                                 _LATE 0110  
                               u4015 1C03                                 u4035 1C12  
                               u4045 1C19                                 u5025 1A9D  
                               u5115 1A44                                 u5125 1A49  
                               u5070 1D57                                 u5155 1CC8  
                               u3645 1EE2                                 u5165 1CCF  
                               u7015 1D46                                 u5095 1D6D  
                               u3665 1EF1                                 u7105 1E07  
                               u7035 1FC1                                 u3675 1EF8  
                               u7125 1E20                                 u7230 1E97  
                               u7055 1FCD                                 u7135 1E2B  
                               u7240 1E98                                 u3945 1CF0  
                               u7065 1FE1                                 u7075 1FED  
                               u3965 1CFA                                 u7510 159D  
                               u3975 1D04                                 u7520 159E  
                               u3985 1D0C                                 u7425 08EF  
                               u7370 15ED                                 u7435 08FB  
                               u9115 0DBE                                 u7540 15AE  
                               u7700 06D0                                 u9205 0EBF  
                               u7550 15AF                                 u9135 0DFD  
                               u7480 158C                                 u7720 0AB7  
                               u9225 0EF3                                 u7490 158D  
                               u7730 0AC6                                 u7395 1603  
                               u9075 0D6C                                 u6945 1F7C  
                               u9185 0E84                                 u6965 1F86  
                               u6975 1F90                                 u9527 1A15  
                               u6985 1F98                                 u7970 0816  
                               u7885 0C1D                                 _TMR0 0015  
                               _TMR2 001A              __end_of_OPA2_Initialize 18F6  
                               _WPUA 020C                                 _WPUB 020D  
                               _WPUC 020E                                 _WPUD 020F  
                               _WPUE 0210                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                      __end_of_STR2HEX 1AAC  
                ?_Covert_Month_2_Day 0072                                 _main 0CA5  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E               Decode_RS232_CMD@Strlen 0068  
                       _RUN_PWM_FLAG 00E6                        __CFG_BOREN$ON 0000  
                               ltemp 007E                         _DS18B20_Read 1BD4  
                               start 0031                                 ttemp 007E  
                               wtemp 007E             __size_of_DS18B20_GetTemp 00B5  
                  ___bmul@multiplier 0025                        __CFG_MCLRE$ON 0000  
                         _FlagOneSec 014D                         _I2C_STOP_BIT 1979  
                         _FlagRxByte 014E                           _Flag_RxStr 0150  
                  ?_Decode_RS232_CMD 0068            __size_of_DATAEE_WriteByte 001D  
            __end_of_TMR0_Initialize 19B6                        _I2C_READ_8BIT 1339  
                      __CFG_PLLEN$ON 0000                      ?_FVR_Initialize 0070  
                 ??_Decode_RS232_CMD 0069              __end_of_OPA3_Initialize 18FA  
                      ?_EUSART_Write 0070       __size_of_OSCILLATOR_Initialize 0006  
      __end_of_OSCILLATOR_Initialize 1910                 ??_Covert_Month_2_Day 0074  
            __size_of_I2C_WRITE_8BIT 003E                                ?_main 0070  
      I2C_Sequential_READ@reg_addr_h 0028                      __end_of___awdiv 1FAD  
      I2C_Sequential_READ@reg_addr_l 0029                                STR_10 10FF  
                              STR_11 12BA                                STR_12 1131  
                              STR_20 1000                                STR_13 11E1  
                              STR_21 1048                                STR_30 12F6  
                              STR_14 12E9                                STR_22 12AE  
                              STR_31 12F6                                STR_15 1207  
                              STR_23 1024                                STR_32 12F6  
                              STR_16 12E9                                STR_40 10AE  
                              STR_24 106C                                STR_33 12F6  
                              STR_25 12D0                                STR_41 11CD  
                              STR_17 1149                        __CFG_WDTE$OFF 0000  
                              STR_34 12F6                                STR_26 12A2  
                              STR_18 1295                                STR_42 1287  
                              STR_35 12DA                                STR_51 123C  
                              STR_43 126B                                STR_27 125C  
                              STR_19 122B                                STR_52 124C  
                              STR_36 12E2                                STR_44 11F4  
                              STR_28 10E6                      __end_of___awmod 1F0D  
                              STR_45 1219                                STR_37 11A4  
                              STR_53 118E                                STR_29 108E  
                              STR_38 12F2                                STR_46 11F4  
                              STR_47 1219                                STR_39 12F0  
                              STR_48 123C                                STR_49 124C  
                              _ANSB0 0C68                      __end_of___lldiv 2000  
                    ___awdiv@divisor 0072                      __end_of___llmod 1E3E  
                              _T2CON 001C                                _LATA2 0862  
                              _LATC0 0870                                _LATA4 0864  
                              _LATC1 0871                                _LATC2 0872  
                              _LATA6 0866                                _LATC3 0873  
                              _LATB5 086D                                _LATA7 0867  
                              _LATE0 0880                                _LATC4 0874  
                              _LATE1 0881                                _LATD3 087B  
                              _LATC5 0875                                _LATE2 0882  
                              _LATD4 087C                                _LATD6 087E  
                              _LATD7 087F                      __end_of___lwdiv 1D19  
                              i1l210 002C                                i1l202 0013  
                              i1l204 001D                                i1l206 0027  
                              i1l173 1B42                      __end_of___lwmod 1C26  
                              i1l179 1B0A               __end_of_DAC1_SetOutput 18FF  
                    ___awdiv@counter 0020                                _TRISA 008C  
                              _TRISB 008D                                _TRISC 008E  
                              _TRISD 008F                                _TRISE 0090  
                    _Print_uint16Str 1655                 PIC_SYNC_ADO_RTC@cDay 0049  
               PIC_SYNC_ADO_RTC@cMin 004F                 PIC_SYNC_ADO_RTC@cSec 0047  
                ___lmul@multiplicand 0076                                _LoopA 00E4  
                   _Loop_Mesure_Test 0151                     __end_of_TMR0_ISR 1A07  
                   __end_of_TMR2_ISR 19DC            __size_of_Covert_BDC_2_OCT 001D  
                    _DATAEE_ReadByte 1954                         main@loop_tds 006E  
              RUN_MESURE@setup_table 00A0                  __end_of_Convert_2HB 1D4D  
                __end_of_Convert_HMS 1762                  __end_of_Convert_YMD 1655  
                  __end_of_I2C_mREAD 1E83                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                        _DS18B20_Reset 19DC  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                        _DS18B20_Write 1C54  
                    _TMR2_StartTimer 18DF                     __end_of_Delay5us 0003  
                      _I2C_START_BIT 196C                     Print_String@BStr 0074  
                   Print_String@Data 0022                     Print_String@chln 0076  
                    __initialization 0033        I2C_Sequential_READ@slave_addr 002F  
                       __end_of_main 1000              __end_of_DAC1_Initialize 1904  
                        ?_RUN_MESURE 0070                     _PIC_SYNC_ADO_RTC 0945  
                     ?_I2C_READ_8BIT 0070            I2C_PAGE_WRITE@Check_Error 0031  
                     ??_EUSART_Write 0072              __end_of_TMR2_Initialize 196C  
                     __CFG_LPBOR$OFF 0000          ?_INTERRUPT_InterruptManager 0070  
                     _I2C_PAGE_WRITE 1576                    _UPLOAD_MESURE_REC 06C4  
                   ?_OPA1_Initialize 0070                     ?_Print_BreakLine 0070  
                             ??_main 016A                   ?_UPLOAD_MESURE_REC 0070  
                    ?_DAC1_SetOutput 0070               __size_of_Check_1MSFlag 0009  
                        ?_Delay100us 0070                Print_uint16Str@CalVol 0027  
                        ?_Delay480us 0070               I2C_TEST_02@Check_Error 0058  
                ??_UPLOAD_MESURE_REC 004B                            ??_STR2HEX 0075  
                             _ADCON0 009D                               _ADCON1 009E  
                             _ADCON2 009F                               _ADC_CH 0167  
                   ___llmod@dividend 0076                               _ADRESH 009C  
                             _EEADRH 0192                               _ADRESL 009B  
                             _EEADRL 0191                               _EEDATH 0194  
                             _EEDATL 0193                               _EECON2 0196  
                   ___awdiv@dividend 0074                               _ANSELA 018C  
                             _ANSELB 018D                               _ANSELC 018E  
                             _ANSELD 018F                               _ANSELE 0190  
       __size_of_I2C_Sequential_READ 0067                     RUN_MESURE@AVG100 003E  
                             _RC1REG 0199                               _RC1STA 019D  
                             _FVRCON 0117                       ?_DS18B20_Reset 0070  
                  Convert_HMS@iCount 002A                     ?_OPA2_Initialize 0070  
                             _OSCCON 0099                       ?_DS18B20_Write 0070  
                             _TX1REG 019A                    Convert_HMS@rClock 002E  
                             _TX1STA 019E                               _TRISC3 0473  
                             _TRISC4 0474                               _TRISD4 047C  
                     ?_I2C_START_BIT 0070                         ??_I2C_mWrite 0020  
              PIC_SYNC_ADO_RTC@cHour 004B                PIC_SYNC_ADO_RTC@cYear 0051  
                     __CFG_PWRTE$OFF 0000              DAC1_SetOutput@inputData 0072  
                 DS18B20_Reset@vByte 0075                               ___bmul 19B6  
                             ___lmul 1CB3               __end_of_I2C_PAGE_WRITE 15E2  
          __end_of_UPLOAD_MESURE_REC 07A9                               ___wmul 1A3B  
                          ??___awdiv 0076                       __CFG_STVREN$ON 0000  
                          ??___awmod 0076                            ??___lldiv 0020  
                          ??___llmod 0020                            ??___lwdiv 0076  
                          ??___lwmod 0076                 I2C_Sequential_READ@i 0030  
               I2C_Sequential_READ@j 0031              __end_of_Print_uint16Str 16C9  
                    I2C_WRITE_8BIT@i 0074                  _EUSART_Transmit_ISR 1B25  
                         _Print_CHLN 191C                     ?_TMR0_Initialize 0070  
                   ___awdiv@quotient 0022                    ??_DS18B20_GetTemp 002C  
                    ___awmod@divisor 0072                     ?_OPA3_Initialize 0070  
                    STR2HEX@NumPoint 0074                      ___awmod@counter 0077  
               Covert_BDC_2_OCT@iBDC 0079              __end_of_DATAEE_ReadByte 1960  
                 _CheckRxOneByteFlag 192D                          _Convert_2HB 1D19  
                 Print_HEX2Str@Chgln 0077                   __size_of_Print_HMS 005C  
                        _Convert_HMS 16C9                __end_of_Print_HEX2Str 1F5B  
                 __size_of_Print_YMD 0065                          _Convert_YMD 15E2  
                    _CheckOneSecFlag 1924                   __end_of_I2C_mWrite 1EC8  
                    Convert_2HB@hNib 0027                      Convert_2HB@lNib 0028  
           ADC_GetConversion@channel 0075             I2C_TEST_02@i2cReadBuffer 0047  
              __end_of_TMR0_CallBack 18E6                  ?_CheckRxOneByteFlag 0070  
            __end_of_TMR2_StartTimer 18E2                 ?_EUSART_Transmit_ISR 0070  
                __size_of_RUN_MESURE 01FA                         I2C_TEST_02@i 005A  
                  _SYSTEM_Initialize 1B45              __end_of__initialization 0095  
              __end_of_TMR2_CallBack 18EA                   ?_SYSTEM_Initialize 0070  
                _NUL_SecCount_offset 0163                        _Check_1MSFlag 1936  
                ___bmul@multiplicand 0077                    Print_String@loopA 0020  
                    ??_I2C_READ_8BIT 0072                       __pcstackCOMMON 0070  
               ??_CheckRxOneByteFlag 0072                         __pidataBANK1 0003  
                       __pidataBANK2 1949                         __pidataBANK3 1AE6  
                       __pidataBANK4 1C83                         __pidataBANK5 1A21  
                       __pidataBANK6 12FA                  ??_SYSTEM_Initialize 0073  
                   ?_DAC1_Initialize 0070                      ?_I2C_PAGE_WRITE 0028  
                          ?_TMR0_ISR 0070                  __size_of_Delay100us 000F  
                          ?_TMR2_ISR 0070                  __size_of_Delay480us 000F  
                   _DATAEE_WriteByte 1A72                     ?_TMR2_Initialize 0070  
                     _I2C_WRITE_8BIT 1DBD                    _PIC_SYNC_ADO_ULSR 1762  
                        _OneCount_MT 0146                  Print_uint16Str@DIVA 0029  
                 ?_PIC_SYNC_ADO_ULSR 0070                    Convert_YMD@cMonth 0048  
                     _OPTION_REGbits 0095                TMR0_ISR@CountCallBack 013C  
                  Convert_YMD@iCount 002A                            ?_Delay5us 0070  
                  Convert_YMD@rClock 002C                           _exINT_Flag 0156  
                         _exINT_Mode 00EF                     _Covert_BDC_2_OCT 1AC9  
          __end_of_SYSTEM_Initialize 1B66                      ??_DS18B20_Reset 0075  
              ??_EUSART_Transmit_ISR 0070                  ??_PIC_SYNC_ADO_ULSR 002C  
                    ??_DS18B20_Write 0075                           __pbssBANK1 00DF  
                         __pbssBANK2 0120                           __pbssBANK3 01A0  
                         __pbssBANK4 0250                      ??_I2C_START_BIT 0072  
               __end_of_EUSART_Write 1B8A                 I2C_TEST_02@i2cAddr_h 005B  
               I2C_TEST_02@i2cAddr_l 0059                      __CFG_VCAPEN$OFF 0000  
                    Convert_YMD@cDay 0047          __size_of_EUSART_Receive_ISR 0020  
                     ?_Check_1MSFlag 0070                        ??_I2C_TEST_02 0032  
                      ??_I2C_TEST_10 0028                    __end_of_Print_HMS 13EA  
                  __end_of_Print_YMD 150F                     ??_FVR_Initialize 0072  
                         __pmaintext 0CA5                        _REC_METER_VAL 0120  
                    _Rec_Error_Event 0154                        ??_I2C_Dealy_1 0072  
                      ??_I2C_Dealy_2 0072                              ?___bmul 0077  
                            ?___lmul 0072                           I2C_mREAD@i 0023  
                         I2C_mREAD@j 0026           __size_of_UPLOAD_MESURE_REC 00E5  
             __size_of_check_ADO_I2C 0061                              ?___wmul 0072  
                         ??_TMR0_ISR 0070                           ??_TMR2_ISR 0070  
             __end_of_I2C_WRITE_8BIT 1DFB            __end_of_PIC_SYNC_ADO_ULSR 1800  
                         __pintentry 0004                          ?_Print_CHLN 0070  
                   ?_Print_uint16Str 0020              __end_of_CheckOneSecFlag 192D  
                     ___lmul@product 0020                              _ADC_Vol 007A  
                            _APFCON1 011D                              _APFCON2 011C  
                 I2C_PAGE_WRITE@Size 002A              __size_of_ADC_Initialize 000A  
                       I2C_mREAD@ack 0024                     ?_DATAEE_ReadByte 0070  
                      _eusartRxCount 00E9                              _OPA1CON 0511  
                            _OPA2CON 0513                              _OPA3CON 0515  
                 __size_of_print_RTC 005F                           ??_Delay5us 0072  
                            _SP1BRGH 019C                              _SP1BRGL 019B  
                            _OSCSTAT 009A                              _OSCTUNE 0098  
                 DS18B20_Write@vByte 0076            __size_of_Decode_RS232_CMD 062B  
                            _STR2HEX 1A8F                         _BufferLenght 014A  
                   ?_TMR2_StartTimer 0070             __end_of_PIC_SYNC_ADO_RTC 0AAB  
           I2C_Sequential_READ@value 002B                  Decode_RS232_CMD@Adr 006B  
               DATAEE_WriteByte@bAdd 0073               PIC_SYNC_ADO_RTC@cMonth 0053  
                          _I2C_mREAD 1E3E                  I2C_WRITE_8BIT@value 0073  
             __size_of_ASCII_OCT2HEX 0026                        ?_TEST_PIC_ALL 0070  
                      RUN_MESURE@lpi 0042                      __size_of___bmul 0012  
                      ?_Print_String 0074                              ___awdiv 1F5B  
                    __size_of___lmul 0032                         ??_RUN_MESURE 002C  
                            ___awmod 1EC8                              ___lldiv 1FAD  
                    __size_of___wmul 001B                              ___llmod 1DFB  
                    ?_I2C_WRITE_8BIT 0070                              ___lwdiv 1CE5  
                   ??_DAC1_SetOutput 0072                              ___lwmod 1BFA  
                _I2C_Sequential_READ 150F                  __end_of_I2C_TEST_02 0890  
                __end_of_I2C_TEST_10 0800                              __ptext1 1B45  
                            __ptext2 1960                              __ptext3 18DF  
                            __ptext4 19A6                              __ptext5 1D85  
                            __ptext6 190A                              __ptext7 18F6  
                            __ptext8 18F2                              __ptext9 18EE  
        __size_of_Covert_Month_2_Day 0038                  __end_of_I2C_Dealy_1 190A  
                __end_of_I2C_Dealy_2 18DF                _OSCILLATOR_Initialize 190A  
                          _T2CONbits 001C                       I2C_mREAD@value 0025  
               I2C_mWrite@slave_addr 0079                     ___awmod@dividend 0074  
           ??_PIN_MANAGER_Initialize 0072                         ??_Delay100us 0072  
                       ??_Delay480us 0072                        _check_ADO_I2C 1449  
         __size_of_SYSTEM_Initialize 0021                              clrloop0 1917  
               ?_I2C_Sequential_READ 0028                 end_of_initialization 0095  
                        STR2HEX@BStr 0078                  __size_of_Print_CHLN 0008  
                 __end_of_RUN_MESURE 0CA5                      ??_Check_1MSFlag 0072  
                            init_ram 1910                  Print_HEX2Str@HexCal 0026  
                            initloop 1911                           ?_I2C_mREAD 0077  
                  _EUSART_Initialize 1A56                      _DS18B20_GetTemp 0890  
                     ??_TEST_PIC_ALL 007A                      ___lldiv@divisor 0072  
                  __end_of_print_RTC 1449                      ___lldiv@counter 0025  
                 ?_EUSART_Initialize 0070                       ??_Print_String 0077  
         __size_of_PIC_SYNC_ADO_ULSR 009E                         __pstringtext 1000  
                 __end_of_Delay100us 1997                   __end_of_Delay480us 19A6  
                   ?_CheckOneSecFlag 0070                  ??_EUSART_Initialize 0072  
                       ?_Convert_2HB 0070                         ?_Convert_HMS 002A  
                       ?_Convert_YMD 002A                     __CFG_FOSC$INTOSC 0000  
                          _RTC_Clock 0157                        _ASCII_OCT2HEX 1BAE  
              __size_of_EUSART_Write 0024                       ?_check_ADO_I2C 0070  
           __size_of_OPA1_Initialize 0004             __size_of_Print_BreakLine 001D  
                      DS18B20_Read@i 0077                ??_I2C_Sequential_READ 002C  
           __end_of_DATAEE_WriteByte 1A8F            __end_of_EUSART_Initialize 1A72  
                   ??_I2C_PAGE_WRITE 002C                          _I2C_TEST_10 07A9  
                        _I2C_TEST_02 0802                     _Flag_Mesure_Test 00E3  
           __size_of_OPA2_Initialize 0004             __end_of_Covert_BDC_2_OCT 1AE6  
                        _I2C_Dealy_1 1904                          _I2C_Dealy_2 18DC  
                     __end_of___bmul 19C8                       __end_of___lmul 1CE5  
                     __end_of___wmul 1A56                            _BufferRec 01A8  
                          _BufferStr 0250                         _EUSART_Write 1B66  
                  __size_of_TMR0_ISR 0017                    __size_of_TMR2_ISR 0014  
                     _ADC_Initialize 193F               ?_OSCILLATOR_Initialize 0070  
                     ?_ASCII_OCT2HEX 0070                  start_initialization 0033  
       Covert_Month_2_Day@MonthTable 0020             __size_of_TMR0_Initialize 0010  
    __size_of_PIN_MANAGER_Initialize 0038                     _Decode_RS232_CMD 0099  
           __size_of_OPA3_Initialize 0004                            _ErrorFlag 014B  
                  __size_of_Delay5us 0001              __end_of_DS18B20_GetTemp 0945  
                        _ADC_Vol_cal 0138                 Print_uint16Str@Chk19 0024  
                    RUN_MESURE@F7902 01D8                 Print_uint16Str@Chgln 0022  
                    RUN_MESURE@F7899 0320                      ___llmod@divisor 0072  
                        ??_I2C_mREAD 0020                        ?_DS18B20_Read 0070  
                    ___llmod@counter 0021                  DATAEE_ReadByte@bAdd 0072  
               Print_uint16Str@loopA 0025               __size_of_Print_HEX2Str 004E  
                      ?_I2C_STOP_BIT 0070              DS18B20_GetTemp@vByteLow 0032  
                           ??___bmul 0078                             ??___lmul 007A  
        __size_of_CheckRxOneByteFlag 0009                             ??___wmul 0076  
                          _Print_HMS 138E                      I2C_mWrite@value 0076  
                          _Print_YMD 14AA                __end_of_I2C_READ_8BIT 138E  
            DS18B20_GetTemp@rTwoByte 002F               __size_of_TMR0_CallBack 0004  
             __end_of_ADC_Initialize 1949                         ??_Print_CHLN 0074  
                        __pdataBANK1 00EF                          __pdataBANK2 015F  
                        __pdataBANK3 01C8                          __pdataBANK4 0220  
                        __pdataBANK5 02A0                          __pdataBANK6 0320  
             __size_of_TMR2_CallBack 0004          __end_of_EUSART_Transmit_ISR 1B45  
           __size_of_DAC1_Initialize 0005                      ??_check_ADO_I2C 0028  
                        __pbssCOMMON 007A                     Convert_YMD@F7967 0220  
                          ___latbits 0003                 __end_of_TEST_PIC_ALL 1C54  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 016A             __size_of_TMR2_Initialize 000C  
                           ?_STR2HEX 0074                  RUN_MESURE@WhatStrip 0044  
               __end_of_Print_String 1BAE                Convert_YMD@MonthTable 002F  
                  ?_PIC_SYNC_ADO_RTC 0070                     Convert_YMD@cYear 0049  
              __end_of_DS18B20_Reset 19F0           __end_of_EUSART_Receive_ISR 1B25  
                       _MES_TDS_FLAG 0153                __end_of_DS18B20_Write 1C83  
         __size_of_EUSART_Initialize 001C                    ??_OPA1_Initialize 0072  
                 __end_of_Print_CHLN 1924                       ??_DS18B20_Read 0075  
                  ??_Print_BreakLine 0074                   ??_PIC_SYNC_ADO_RTC 003B  
              __end_of_I2C_START_BIT 1979                            __pnvBANK2 016E  
           I2C_PAGE_WRITE@reg_addr_h 0028             I2C_PAGE_WRITE@reg_addr_l 0029  
                   ??_I2C_WRITE_8BIT 0072                       ??_I2C_STOP_BIT 0072  
                   ___lwdiv@dividend 0074               _PIN_MANAGER_Initialize 1D85  
                    I2C_PAGE_WRITE@i 002F                      I2C_PAGE_WRITE@j 0030  
                         ?_Print_HMS 0024                             ?___awdiv 0072  
                           ?___awmod 0072                           ?_Print_YMD 0024  
                           ?___lldiv 0072                             ?___llmod 0072  
                           ?___lwdiv 0072                             ?___lwmod 0072  
                    ?_ADC_Initialize 0070                   I2C_READ_8BIT@value 0076  
                       _eusartRxHead 00EA                         _eusartTxHead 00EC  
                       _eusartRxTail 00EB                         _eusartTxTail 00ED  
                           _DAC1CON0 0118                             _DAC1CON1 0119  
             UPLOAD_MESURE_REC@F7910 02A0         ??_INTERRUPT_InterruptManager 0071  
                    ??_ASCII_OCT2HEX 0072              I2C_Sequential_READ@Size 002A  
                          __pswtext1 1800                    ??_OPA2_Initialize 0072  
            _eusartTxBufferRemaining 016E                             _BAUD1CON 019F  
             ASCII_OCT2HEX@ASCII_OCT 0073                        _Print_HEX2Str 1F0D  
                I2C_mREAD@slave_addr 0078                             _ADC_Volm 0140  
                    Print_HMS@rClock 0024               UPLOAD_MESURE_REC@LoopA 004D  
               __size_of_Convert_2HB 0034             __size_of_Print_uint16Str 0074  
               __size_of_Convert_HMS 0099                 __size_of_Convert_YMD 0073  
                   ___lwdiv@quotient 0077                        _TMR0_CallBack 18E2  
           __size_of_DATAEE_ReadByte 000C                  I2C_PAGE_WRITE@value 002B  
                      I2C_mREAD@Size 0077             I2C_PAGE_WRITE@slave_addr 002E  
                      I2C_mREAD@rSCL 0022                          Delay100us@i 0074  
                        Delay100us@s 0073                     ?_DS18B20_GetTemp 0070  
            Print_uint16Str@InputVol 0020                       _eusartRxBuffer 01A0  
                  ??_TMR0_Initialize 0072                       _eusartTxBuffer 0130  
                        Delay480us@i 0074                          Delay480us@s 0073  
                  ??_OPA3_Initialize 0072                       ___wmul@product 0076  
                          clear_ram0 1916                        _TMR2_CallBack 18E6  
                        I2C_mWrite@i 0023                          I2C_mWrite@j 0024  
                           _PIE1bits 0091             __size_of_TMR2_StartTimer 0003  
                   _What_Strip_Error 0155  __size_of_INTERRUPT_InterruptManager 002D  
                           _PIR1bits 0011                        _BufferGetTemp 015D  
                           _TMR0_ISR 19F0                             _TMR2_ISR 19C8  
                          _print_RTC 13EA           __end_of_Covert_Month_2_Day 1D85  
                         _ADCON0bits 009D                    ___wmul@multiplier 0072  
            __size_of_FVR_Initialize 0004                 Decode_RS232_CMD@BStr 006D  
                     ?_Print_HEX2Str 0077                  RUN_MESURE@tpWhatADC 003D  
               Decode_RS232_CMD@Data 006C             Covert_Month_2_Day@iMonth 0072  
                           _Delay5us 0002                             _Flag_1MS 014F  
              DATAEE_WriteByte@bData 0072              Print_uint16Str@wOneByte 002B  
                     ?_TMR0_CallBack 0070                  RUN_MESURE@setup_3t8 002E  
                  ___lmul@multiplier 0072                   PIC_SYNC_ADO_ULSR@i 0030  
                   __size_of_STR2HEX 001D                    ??_DAC1_Initialize 0072  
                  ?_DATAEE_WriteByte 0072                    ??_TMR2_Initialize 0072  
                     ?_TMR2_CallBack 0070                   ??_DATAEE_WriteByte 0073  
                         _I2C_mWrite 1E83                __end_of_Check_1MSFlag 193F  
                         _EECON1bits 0195                         ?_I2C_TEST_02 0070  
                       ?_I2C_TEST_10 0070                       I2C_mWrite@Size 0078  
             DS18B20_GetTemp@vByteHi 0033                    _ADC_GetConversion 1A07  
           __end_of_Decode_RS232_CMD 06C4                         ?_I2C_Dealy_1 0070  
                       ?_I2C_Dealy_2 0070                    ?_Covert_BDC_2_OCT 0070  
                        ??_Print_HMS 0077                          ??_Print_YMD 0077  
            ??_OSCILLATOR_Initialize 0072                           ?_print_RTC 0070  
                 ?_ADC_GetConversion 0072                      Print_YMD@rClock 0024  
                   __size_of___awdiv 0052                     __size_of___awmod 0045  
                   __size_of___lldiv 0053                     __size_of___llmod 0043  
                 ??_Covert_BDC_2_OCT 0026                          _MES_DO_FLAG 0152  
                   __size_of___lwdiv 0034                     __size_of___lwmod 002C  
              __size_of_TEST_PIC_ALL 002E                 __end_of_DS18B20_Read 1BFA  
        __end_of_I2C_Sequential_READ 1576                __size_of_Print_String 0024  
                ??_ADC_GetConversion 0074                Print_HEX2Str@InputVol 0024  
                 I2C_TEST_02@i2cData 0037                      ___lwdiv@divisor 0072  
               __end_of_I2C_STOP_BIT 1988              __size_of_DAC1_SetOutput 0005  
           __size_of_CheckOneSecFlag 0009                    I2C_READ_8BIT@rSCL 0075  
                    ___lwdiv@counter 0079                             __ptext10 18EA  
                           __ptext11 1A56                             __ptext20 1A3B  
                           __ptext12 18FF                             __ptext21 06C4  
                           __ptext13 193F                             __ptext30 1EC8  
                           __ptext22 1C26                             __ptext14 1762  
                           __ptext31 1449                             __ptext23 13EA  
                           __ptext15 0945                             __ptext40 1BAE  
                           __ptext32 1AAC                             __ptext24 14AA  
                           __ptext16 1CB3                             __ptext41 0AAB  
                           __ptext33 0890                             __ptext25 138E  
                           __ptext17 1D4D                             __ptext50 1E83  
                           __ptext42 1FAD                             __ptext34 1C54  
                           __ptext26 15E2                             __ptext18 1AC9  
                           __ptext51 1E3E                             __ptext43 19B6  
                           __ptext35 19DC                             __ptext27 16C9  
                           __ptext19 0099                             __ptext60 1B66  
                           __ptext52 0802                             __ptext44 1655  
                           __ptext36 1997                             __ptext28 1DFB  
                           __ptext61 1DBD                             __ptext53 1B8A  
                           __ptext45 1BFA                             __ptext37 1BD4  
                           __ptext29 1D19                             __ptext70 192D  
                           __ptext62 1979                             __ptext54 150F  
                           __ptext46 1CE5                             __ptext38 1988  
                           __ptext71 1924                             __ptext63 196C  
                           __ptext55 1339                             __ptext47 18FA  
                           __ptext39 1A8F                             __ptext64 18DC  
                           __ptext56 1576                             __ptext48 1A07  
                           __ptext73 19C8                             __ptext65 1904  
                           __ptext57 1F0D                             __ptext49 07A9  
                           __ptext74 18E6                             __ptext66 0002  
                           __ptext58 1F5B                             __ptext75 19F0  
                           __ptext67 1A72                             __ptext59 191C  
                           __ptext76 18E2                             __ptext68 1954  
                           __ptext77 1B25                             __ptext69 1936  
                           __ptext78 1B05               I2C_Sequential_READ@ack 002E  
        DATAEE_WriteByte@GIEBitValue 0074                    I2C_WRITE_8BIT@ack 0075  
                  ??_Print_uint16Str 0023                        __size_of_main 035B  
                     I2C_READ_8BIT@i 0074                    ??_DATAEE_ReadByte 0072  
          __end_of_ADC_GetConversion 1A21              Covert_Month_2_Day@F7991 0238  
                         _RC1STAbits 019D                         _TEST_PIC_ALL 1C26  
                           int$flags 007E                         _Print_String 1B8A  
                _SR_0xA1_ADO_Request 00E8                    ??_TMR2_StartTimer 0072  
 __end_of_INTERRUPT_InterruptManager 0031           _INTERRUPT_InterruptManager 0004  
                      _PWM_1MS_COUNT 00E5                Print_HEX2Str@wOneByte 0025  
            Covert_Month_2_Day@loopi 003A                      ??_Print_HEX2Str 0078  
                  PIC_SYNC_ADO_RTC@i 0055                           _INTCONbits 000B  
                    _OPA1_Initialize 18EE                      ??_TMR0_CallBack 0070  
                    _Print_BreakLine 1AAC                           _FVRCONbits 0117  
        Covert_Month_2_Day@CalResult 0038                       _FirstTimeSetup 014C  
                           intlevel1 0000                      ??_TMR2_CallBack 0070  
                       _NUL_DayCount 0144                     ___lwmod@dividend 0074  
      UPLOAD_MESURE_REC@BufferString 004E                     ___lldiv@dividend 0076  
            ?_PIN_MANAGER_Initialize 0070                          ?_I2C_mWrite 0076  
                  __CFG_CLKOUTEN$OFF 0000                     ??_ADC_Initialize 0072  
         __end_of_CheckRxOneByteFlag 1936                      _OPA2_Initialize 18F2  
                  Convert_2HB@iCount 0029                         _NUL_SecCount 015F  
                 _EUSART_Receive_ISR 1B05                          ??_print_RTC 004B  
          __size_of_PIC_SYNC_ADO_RTC 0166                     I2C_TEST_02@F8059 01C8  
                  _SR_0xA0_ADO_Error 00E7              __size_of_I2C_PAGE_WRITE 006C  
               DS18B20_GetTemp@xTemp 0030                       _FVR_Initialize 18EA  
                         _OPTION_REG 0095                  ?_EUSART_Receive_ISR 0070  
                       _RTC_DayCount 0148                     ___lldiv@quotient 0021  
                    ___lwmod@divisor 0072                TMR2_ISR@CountCallBack 013E  
                    _TMR0_Initialize 19A6                      ___lwmod@counter 0077  
                    _OPA3_Initialize 18F6                __end_of_check_ADO_I2C 14AA  
                 EUSART_Write@txData 0073         __size_of_EUSART_Transmit_ISR 0020  
     __end_of_PIN_MANAGER_Initialize 1DBD               __size_of_I2C_READ_8BIT 0055  
                       _RTC_SecCount 00DF                 Print_BreakLine@loopA 0074  
                  ??_CheckOneSecFlag 0072                   DS18B20_GetTemp@ack 002E  
                     I2C_TEST_02@SID 0057                I2C_mWrite@Check_Error 0025  
               ??_EUSART_Receive_ISR 0070           __size_of_ADC_GetConversion 001A  
